/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentosDeSaidaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Atualiza o documento relacionado do Documento de Saída vinculado ao Documento Oficial de Saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoOficialSaida"></param>
        /// <param name="documentoRelacionado"></param>
        /// <returns></returns>
        void AtualizarDocumentoRelacionado (long? codigoEstabelecimento, string tipoDocumento, string serieDocumento, string documentoOficialSaida, string documentoRelacionado);

        /// <summary>
        /// Atualiza o documento relacionado do Documento de Saída vinculado ao Documento Oficial de Saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoOficialSaida"></param>
        /// <param name="documentoRelacionado"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AtualizarDocumentoRelacionadoWithHttpInfo (long? codigoEstabelecimento, string tipoDocumento, string serieDocumento, string documentoOficialSaida, string documentoRelacionado);
        /// <summary>
        /// Atualiza o transportador do Documento de Saída 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="empresa">empresa</param>
        /// <returns></returns>
        void AtualizarTransportador (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, EmpresaDTO empresa);

        /// <summary>
        /// Atualiza o transportador do Documento de Saída 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="empresa">empresa</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AtualizarTransportadorWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, EmpresaDTO empresa);
        /// <summary>
        /// Conta os documentos de saida. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>long?</returns>
        long? CountByQuery ();

        /// <summary>
        /// Conta os documentos de saida. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> CountByQueryWithHttpInfo ();
        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>long?</returns>
        long? CountEstadoProcessoByQuery ();

        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> CountEstadoProcessoByQueryWithHttpInfo ();
        /// <summary>
        /// Retorna a divergência de atendimento do documento de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações.
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns></returns>
        void DivergenciaAtendimento (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna a divergência de atendimento do documento de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações.
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DivergenciaAtendimentoWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Retorna se um documento de saida possui romaneio relacionado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>bool?</returns>
        bool? ExistsRomaneio (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna se um documento de saida possui romaneio relacionado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> ExistsRomaneioWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Retorna um documento de saída  atravéz dos atributos identificadores com sua lista de loteSaida
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>DocumentoSaida</returns>
        DocumentoSaida FindByIdFethLoteSaida (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna um documento de saída  atravéz dos atributos identificadores com sua lista de loteSaida
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of DocumentoSaida</returns>
        ApiResponse<DocumentoSaida> FindByIdFethLoteSaidaWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Retorna os documentos de saida. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentoSaida&gt;</returns>
        List<DocumentoSaida> FindByQuery ();

        /// <summary>
        /// Retorna os documentos de saida. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentoSaida&gt;</returns>
        ApiResponse<List<DocumentoSaida>> FindByQueryWithHttpInfo ();
        /// <summary>
        /// Retorna os documentos de saída. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentoSaida&gt;</returns>
        List<DocumentoSaida> FindByQueryUploadSaida ();

        /// <summary>
        /// Retorna os documentos de saída. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentoSaida&gt;</returns>
        ApiResponse<List<DocumentoSaida>> FindByQueryUploadSaidaWithHttpInfo ();
        /// <summary>
        /// Retorna um documento de saida  atravéz dos atributos identificadores
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>DocumentoSaida</returns>
        DocumentoSaida FindDocumentoByID (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna um documento de saida  atravéz dos atributos identificadores
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of DocumentoSaida</returns>
        ApiResponse<DocumentoSaida> FindDocumentoByIDWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentoSaida&gt;</returns>
        List<DocumentoSaida> FindEstadoProcessoByQuery ();

        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentoSaida&gt;</returns>
        ApiResponse<List<DocumentoSaida>> FindEstadoProcessoByQueryWithHttpInfo ();
        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>List&lt;ProdutoBaixaDTO&gt;</returns>
        List<ProdutoBaixaDTO> FindProdutoConferenciaByQuery (long? codigoEstabelecimento, string codigoDepositante, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of List&lt;ProdutoBaixaDTO&gt;</returns>
        ApiResponse<List<ProdutoBaixaDTO>> FindProdutoConferenciaByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída em execução
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>List&lt;ProdutoBaixaDTO&gt;</returns>
        List<ProdutoBaixaDTO> FindProdutoConferenciaRealizadaByQuery (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída em execução
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of List&lt;ProdutoBaixaDTO&gt;</returns>
        ApiResponse<List<ProdutoBaixaDTO>> FindProdutoConferenciaRealizadaByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Retorna os produtos baixados para um documento de saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>List&lt;ProdutoBaixaDTO&gt;</returns>
        List<ProdutoBaixaDTO> FindProdutoSaldoInicialByQuery (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna os produtos baixados para um documento de saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of List&lt;ProdutoBaixaDTO&gt;</returns>
        ApiResponse<List<ProdutoBaixaDTO>> FindProdutoSaldoInicialByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Retorna os produtos e suas series do documento de saída que está confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>List&lt;DocumentoProdutoSerieDTO&gt;</returns>
        List<DocumentoProdutoSerieDTO> FindProdutoSaldoProdutoSerieByQuery (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna os produtos e suas series do documento de saída que está confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of List&lt;DocumentoProdutoSerieDTO&gt;</returns>
        ApiResponse<List<DocumentoProdutoSerieDTO>> FindProdutoSaldoProdutoSerieByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Exclui um documento de saida
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns></returns>
        void RemoveDocumento (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Exclui um documento de saida
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveDocumentoWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Altera um documento de saida 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="documentoSaida2">documentoSaida</param>
        /// <returns></returns>
        void UpdateDocumento (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, DocumentoSaida documentoSaida2);

        /// <summary>
        /// Altera um documento de saida 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="documentoSaida2">documentoSaida</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateDocumentoWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, DocumentoSaida documentoSaida2);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Atualiza o documento relacionado do Documento de Saída vinculado ao Documento Oficial de Saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoOficialSaida"></param>
        /// <param name="documentoRelacionado"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AtualizarDocumentoRelacionadoAsync (long? codigoEstabelecimento, string tipoDocumento, string serieDocumento, string documentoOficialSaida, string documentoRelacionado);

        /// <summary>
        /// Atualiza o documento relacionado do Documento de Saída vinculado ao Documento Oficial de Saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoOficialSaida"></param>
        /// <param name="documentoRelacionado"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AtualizarDocumentoRelacionadoAsyncWithHttpInfo (long? codigoEstabelecimento, string tipoDocumento, string serieDocumento, string documentoOficialSaida, string documentoRelacionado);
        /// <summary>
        /// Atualiza o transportador do Documento de Saída 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="empresa">empresa</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AtualizarTransportadorAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, EmpresaDTO empresa);

        /// <summary>
        /// Atualiza o transportador do Documento de Saída 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="empresa">empresa</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AtualizarTransportadorAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, EmpresaDTO empresa);
        /// <summary>
        /// Conta os documentos de saida. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> CountByQueryAsync ();

        /// <summary>
        /// Conta os documentos de saida. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> CountByQueryAsyncWithHttpInfo ();
        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> CountEstadoProcessoByQueryAsync ();

        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> CountEstadoProcessoByQueryAsyncWithHttpInfo ();
        /// <summary>
        /// Retorna a divergência de atendimento do documento de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações.
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DivergenciaAtendimentoAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna a divergência de atendimento do documento de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações.
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DivergenciaAtendimentoAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Retorna se um documento de saida possui romaneio relacionado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> ExistsRomaneioAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna se um documento de saida possui romaneio relacionado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> ExistsRomaneioAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Retorna um documento de saída  atravéz dos atributos identificadores com sua lista de loteSaida
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of DocumentoSaida</returns>
        System.Threading.Tasks.Task<DocumentoSaida> FindByIdFethLoteSaidaAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna um documento de saída  atravéz dos atributos identificadores com sua lista de loteSaida
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse (DocumentoSaida)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentoSaida>> FindByIdFethLoteSaidaAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Retorna os documentos de saida. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DocumentoSaida&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentoSaida>> FindByQueryAsync ();

        /// <summary>
        /// Retorna os documentos de saida. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DocumentoSaida&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentoSaida>>> FindByQueryAsyncWithHttpInfo ();
        /// <summary>
        /// Retorna os documentos de saída. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DocumentoSaida&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentoSaida>> FindByQueryUploadSaidaAsync ();

        /// <summary>
        /// Retorna os documentos de saída. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DocumentoSaida&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentoSaida>>> FindByQueryUploadSaidaAsyncWithHttpInfo ();
        /// <summary>
        /// Retorna um documento de saida  atravéz dos atributos identificadores
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of DocumentoSaida</returns>
        System.Threading.Tasks.Task<DocumentoSaida> FindDocumentoByIDAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna um documento de saida  atravéz dos atributos identificadores
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse (DocumentoSaida)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentoSaida>> FindDocumentoByIDAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DocumentoSaida&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentoSaida>> FindEstadoProcessoByQueryAsync ();

        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DocumentoSaida&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentoSaida>>> FindEstadoProcessoByQueryAsyncWithHttpInfo ();
        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of List&lt;ProdutoBaixaDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProdutoBaixaDTO>> FindProdutoConferenciaByQueryAsync (long? codigoEstabelecimento, string codigoDepositante, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse (List&lt;ProdutoBaixaDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProdutoBaixaDTO>>> FindProdutoConferenciaByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída em execução
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of List&lt;ProdutoBaixaDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProdutoBaixaDTO>> FindProdutoConferenciaRealizadaByQueryAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída em execução
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse (List&lt;ProdutoBaixaDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProdutoBaixaDTO>>> FindProdutoConferenciaRealizadaByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Retorna os produtos baixados para um documento de saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of List&lt;ProdutoBaixaDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProdutoBaixaDTO>> FindProdutoSaldoInicialByQueryAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna os produtos baixados para um documento de saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse (List&lt;ProdutoBaixaDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProdutoBaixaDTO>>> FindProdutoSaldoInicialByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Retorna os produtos e suas series do documento de saída que está confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of List&lt;DocumentoProdutoSerieDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentoProdutoSerieDTO>> FindProdutoSaldoProdutoSerieByQueryAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Retorna os produtos e suas series do documento de saída que está confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse (List&lt;DocumentoProdutoSerieDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentoProdutoSerieDTO>>> FindProdutoSaldoProdutoSerieByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Exclui um documento de saida
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveDocumentoAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);

        /// <summary>
        /// Exclui um documento de saida
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveDocumentoAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida);
        /// <summary>
        /// Altera um documento de saida 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="documentoSaida2">documentoSaida</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateDocumentoAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, DocumentoSaida documentoSaida2);

        /// <summary>
        /// Altera um documento de saida 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="documentoSaida2">documentoSaida</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDocumentoAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, DocumentoSaida documentoSaida2);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentosDeSaidaApi : IDocumentosDeSaidaApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentosDeSaidaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentosDeSaidaApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentosDeSaidaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentosDeSaidaApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Atualiza o documento relacionado do Documento de Saída vinculado ao Documento Oficial de Saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoOficialSaida"></param>
        /// <param name="documentoRelacionado"></param>
        /// <returns></returns>
        public void AtualizarDocumentoRelacionado (long? codigoEstabelecimento, string tipoDocumento, string serieDocumento, string documentoOficialSaida, string documentoRelacionado)
        {
             AtualizarDocumentoRelacionadoWithHttpInfo(codigoEstabelecimento, tipoDocumento, serieDocumento, documentoOficialSaida, documentoRelacionado);
        }

        /// <summary>
        /// Atualiza o documento relacionado do Documento de Saída vinculado ao Documento Oficial de Saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoOficialSaida"></param>
        /// <param name="documentoRelacionado"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AtualizarDocumentoRelacionadoWithHttpInfo (long? codigoEstabelecimento, string tipoDocumento, string serieDocumento, string documentoOficialSaida, string documentoRelacionado)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->AtualizarDocumentoRelacionado");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->AtualizarDocumentoRelacionado");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->AtualizarDocumentoRelacionado");
            // verify the required parameter 'documentoOficialSaida' is set
            if (documentoOficialSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoOficialSaida' when calling DocumentosDeSaidaApi->AtualizarDocumentoRelacionado");
            // verify the required parameter 'documentoRelacionado' is set
            if (documentoRelacionado == null)
                throw new ApiException(400, "Missing required parameter 'documentoRelacionado' when calling DocumentosDeSaidaApi->AtualizarDocumentoRelacionado");

            var localVarPath = "/v1/documentos-saida/atualizar-documento-relacionado/{codigoEstabelecimento}/{tipoDocumento}/{serieDocumento}/{documentoOficialSaida}/{documentoRelacionado}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoOficialSaida != null) localVarPathParams.Add("documentoOficialSaida", this.Configuration.ApiClient.ParameterToString(documentoOficialSaida)); // path parameter
            if (documentoRelacionado != null) localVarPathParams.Add("documentoRelacionado", this.Configuration.ApiClient.ParameterToString(documentoRelacionado)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AtualizarDocumentoRelacionado", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Atualiza o documento relacionado do Documento de Saída vinculado ao Documento Oficial de Saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoOficialSaida"></param>
        /// <param name="documentoRelacionado"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AtualizarDocumentoRelacionadoAsync (long? codigoEstabelecimento, string tipoDocumento, string serieDocumento, string documentoOficialSaida, string documentoRelacionado)
        {
             await AtualizarDocumentoRelacionadoAsyncWithHttpInfo(codigoEstabelecimento, tipoDocumento, serieDocumento, documentoOficialSaida, documentoRelacionado);

        }

        /// <summary>
        /// Atualiza o documento relacionado do Documento de Saída vinculado ao Documento Oficial de Saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoOficialSaida"></param>
        /// <param name="documentoRelacionado"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AtualizarDocumentoRelacionadoAsyncWithHttpInfo (long? codigoEstabelecimento, string tipoDocumento, string serieDocumento, string documentoOficialSaida, string documentoRelacionado)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->AtualizarDocumentoRelacionado");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->AtualizarDocumentoRelacionado");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->AtualizarDocumentoRelacionado");
            // verify the required parameter 'documentoOficialSaida' is set
            if (documentoOficialSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoOficialSaida' when calling DocumentosDeSaidaApi->AtualizarDocumentoRelacionado");
            // verify the required parameter 'documentoRelacionado' is set
            if (documentoRelacionado == null)
                throw new ApiException(400, "Missing required parameter 'documentoRelacionado' when calling DocumentosDeSaidaApi->AtualizarDocumentoRelacionado");

            var localVarPath = "/v1/documentos-saida/atualizar-documento-relacionado/{codigoEstabelecimento}/{tipoDocumento}/{serieDocumento}/{documentoOficialSaida}/{documentoRelacionado}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoOficialSaida != null) localVarPathParams.Add("documentoOficialSaida", this.Configuration.ApiClient.ParameterToString(documentoOficialSaida)); // path parameter
            if (documentoRelacionado != null) localVarPathParams.Add("documentoRelacionado", this.Configuration.ApiClient.ParameterToString(documentoRelacionado)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AtualizarDocumentoRelacionado", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Atualiza o transportador do Documento de Saída  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="empresa">empresa</param>
        /// <returns></returns>
        public void AtualizarTransportador (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, EmpresaDTO empresa)
        {
             AtualizarTransportadorWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida, empresa);
        }

        /// <summary>
        /// Atualiza o transportador do Documento de Saída  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="empresa">empresa</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AtualizarTransportadorWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, EmpresaDTO empresa)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->AtualizarTransportador");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->AtualizarTransportador");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->AtualizarTransportador");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->AtualizarTransportador");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->AtualizarTransportador");
            // verify the required parameter 'empresa' is set
            if (empresa == null)
                throw new ApiException(400, "Missing required parameter 'empresa' when calling DocumentosDeSaidaApi->AtualizarTransportador");

            var localVarPath = "/v1/documentos-saida/atualizar-transportador/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter
            if (empresa != null && empresa.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(empresa); // http body (model) parameter
            }
            else
            {
                localVarPostBody = empresa; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AtualizarTransportador", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Atualiza o transportador do Documento de Saída  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="empresa">empresa</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AtualizarTransportadorAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, EmpresaDTO empresa)
        {
             await AtualizarTransportadorAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida, empresa);

        }

        /// <summary>
        /// Atualiza o transportador do Documento de Saída  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="empresa">empresa</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AtualizarTransportadorAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, EmpresaDTO empresa)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->AtualizarTransportador");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->AtualizarTransportador");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->AtualizarTransportador");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->AtualizarTransportador");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->AtualizarTransportador");
            // verify the required parameter 'empresa' is set
            if (empresa == null)
                throw new ApiException(400, "Missing required parameter 'empresa' when calling DocumentosDeSaidaApi->AtualizarTransportador");

            var localVarPath = "/v1/documentos-saida/atualizar-transportador/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter
            if (empresa != null && empresa.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(empresa); // http body (model) parameter
            }
            else
            {
                localVarPostBody = empresa; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AtualizarTransportador", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Conta os documentos de saida. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>long?</returns>
        public long? CountByQuery ()
        {
             ApiResponse<long?> localVarResponse = CountByQueryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Conta os documentos de saida. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > CountByQueryWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-saida/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Conta os documentos de saida. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> CountByQueryAsync ()
        {
             ApiResponse<long?> localVarResponse = await CountByQueryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Conta os documentos de saida. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> CountByQueryAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-saida/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>long?</returns>
        public long? CountEstadoProcessoByQuery ()
        {
             ApiResponse<long?> localVarResponse = CountEstadoProcessoByQueryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > CountEstadoProcessoByQueryWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-saida/count-estado";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountEstadoProcessoByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> CountEstadoProcessoByQueryAsync ()
        {
             ApiResponse<long?> localVarResponse = await CountEstadoProcessoByQueryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> CountEstadoProcessoByQueryAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-saida/count-estado";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountEstadoProcessoByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Retorna a divergência de atendimento do documento de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações. Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns></returns>
        public void DivergenciaAtendimento (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             DivergenciaAtendimentoWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);
        }

        /// <summary>
        /// Retorna a divergência de atendimento do documento de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações. Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DivergenciaAtendimentoWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->DivergenciaAtendimento");

            var localVarPath = "/v1/documentos-saida/divergencia-atendimento/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DivergenciaAtendimento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna a divergência de atendimento do documento de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações. Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DivergenciaAtendimentoAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             await DivergenciaAtendimentoAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);

        }

        /// <summary>
        /// Retorna a divergência de atendimento do documento de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações. Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DivergenciaAtendimentoAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->DivergenciaAtendimento");

            var localVarPath = "/v1/documentos-saida/divergencia-atendimento/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DivergenciaAtendimento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna se um documento de saida possui romaneio relacionado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>bool?</returns>
        public bool? ExistsRomaneio (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             ApiResponse<bool?> localVarResponse = ExistsRomaneioWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna se um documento de saida possui romaneio relacionado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > ExistsRomaneioWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->ExistsRomaneio");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->ExistsRomaneio");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->ExistsRomaneio");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->ExistsRomaneio");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->ExistsRomaneio");

            var localVarPath = "/v1/documentos-saida/possui-romaneio/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExistsRomaneio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Retorna se um documento de saida possui romaneio relacionado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> ExistsRomaneioAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             ApiResponse<bool?> localVarResponse = await ExistsRomaneioAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna se um documento de saida possui romaneio relacionado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> ExistsRomaneioAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->ExistsRomaneio");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->ExistsRomaneio");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->ExistsRomaneio");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->ExistsRomaneio");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->ExistsRomaneio");

            var localVarPath = "/v1/documentos-saida/possui-romaneio/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExistsRomaneio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
        }

        /// <summary>
        /// Retorna um documento de saída  atravéz dos atributos identificadores com sua lista de loteSaida Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>DocumentoSaida</returns>
        public DocumentoSaida FindByIdFethLoteSaida (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             ApiResponse<DocumentoSaida> localVarResponse = FindByIdFethLoteSaidaWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna um documento de saída  atravéz dos atributos identificadores com sua lista de loteSaida Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of DocumentoSaida</returns>
        public ApiResponse< DocumentoSaida > FindByIdFethLoteSaidaWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->FindByIdFethLoteSaida");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->FindByIdFethLoteSaida");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->FindByIdFethLoteSaida");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->FindByIdFethLoteSaida");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->FindByIdFethLoteSaida");

            var localVarPath = "/v1/documentos-saida/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}/loteSaida";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByIdFethLoteSaida", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentoSaida>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentoSaida) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentoSaida)));
        }

        /// <summary>
        /// Retorna um documento de saída  atravéz dos atributos identificadores com sua lista de loteSaida Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of DocumentoSaida</returns>
        public async System.Threading.Tasks.Task<DocumentoSaida> FindByIdFethLoteSaidaAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             ApiResponse<DocumentoSaida> localVarResponse = await FindByIdFethLoteSaidaAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna um documento de saída  atravéz dos atributos identificadores com sua lista de loteSaida Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse (DocumentoSaida)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentoSaida>> FindByIdFethLoteSaidaAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->FindByIdFethLoteSaida");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->FindByIdFethLoteSaida");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->FindByIdFethLoteSaida");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->FindByIdFethLoteSaida");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->FindByIdFethLoteSaida");

            var localVarPath = "/v1/documentos-saida/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}/loteSaida";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByIdFethLoteSaida", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentoSaida>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentoSaida) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentoSaida)));
        }

        /// <summary>
        /// Retorna os documentos de saida. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentoSaida&gt;</returns>
        public List<DocumentoSaida> FindByQuery ()
        {
             ApiResponse<List<DocumentoSaida>> localVarResponse = FindByQueryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna os documentos de saida. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentoSaida&gt;</returns>
        public ApiResponse< List<DocumentoSaida> > FindByQueryWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-saida";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoSaida>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoSaida>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoSaida>)));
        }

        /// <summary>
        /// Retorna os documentos de saida. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DocumentoSaida&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentoSaida>> FindByQueryAsync ()
        {
             ApiResponse<List<DocumentoSaida>> localVarResponse = await FindByQueryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna os documentos de saida. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DocumentoSaida&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentoSaida>>> FindByQueryAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-saida";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoSaida>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoSaida>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoSaida>)));
        }

        /// <summary>
        /// Retorna os documentos de saída. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentoSaida&gt;</returns>
        public List<DocumentoSaida> FindByQueryUploadSaida ()
        {
             ApiResponse<List<DocumentoSaida>> localVarResponse = FindByQueryUploadSaidaWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna os documentos de saída. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentoSaida&gt;</returns>
        public ApiResponse< List<DocumentoSaida> > FindByQueryUploadSaidaWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-saida/uploadSaida";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQueryUploadSaida", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoSaida>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoSaida>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoSaida>)));
        }

        /// <summary>
        /// Retorna os documentos de saída. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DocumentoSaida&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentoSaida>> FindByQueryUploadSaidaAsync ()
        {
             ApiResponse<List<DocumentoSaida>> localVarResponse = await FindByQueryUploadSaidaAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna os documentos de saída. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DocumentoSaida&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentoSaida>>> FindByQueryUploadSaidaAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-saida/uploadSaida";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQueryUploadSaida", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoSaida>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoSaida>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoSaida>)));
        }

        /// <summary>
        /// Retorna um documento de saida  atravéz dos atributos identificadores Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>DocumentoSaida</returns>
        public DocumentoSaida FindDocumentoByID (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             ApiResponse<DocumentoSaida> localVarResponse = FindDocumentoByIDWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna um documento de saida  atravéz dos atributos identificadores Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of DocumentoSaida</returns>
        public ApiResponse< DocumentoSaida > FindDocumentoByIDWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->FindDocumentoByID");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->FindDocumentoByID");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->FindDocumentoByID");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->FindDocumentoByID");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->FindDocumentoByID");

            var localVarPath = "/v1/documentos-saida/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindDocumentoByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentoSaida>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentoSaida) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentoSaida)));
        }

        /// <summary>
        /// Retorna um documento de saida  atravéz dos atributos identificadores Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of DocumentoSaida</returns>
        public async System.Threading.Tasks.Task<DocumentoSaida> FindDocumentoByIDAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             ApiResponse<DocumentoSaida> localVarResponse = await FindDocumentoByIDAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna um documento de saida  atravéz dos atributos identificadores Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse (DocumentoSaida)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentoSaida>> FindDocumentoByIDAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->FindDocumentoByID");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->FindDocumentoByID");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->FindDocumentoByID");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->FindDocumentoByID");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->FindDocumentoByID");

            var localVarPath = "/v1/documentos-saida/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindDocumentoByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentoSaida>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentoSaida) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentoSaida)));
        }

        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentoSaida&gt;</returns>
        public List<DocumentoSaida> FindEstadoProcessoByQuery ()
        {
             ApiResponse<List<DocumentoSaida>> localVarResponse = FindEstadoProcessoByQueryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentoSaida&gt;</returns>
        public ApiResponse< List<DocumentoSaida> > FindEstadoProcessoByQueryWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-saida/query-estado";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEstadoProcessoByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoSaida>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoSaida>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoSaida>)));
        }

        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DocumentoSaida&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentoSaida>> FindEstadoProcessoByQueryAsync ()
        {
             ApiResponse<List<DocumentoSaida>> localVarResponse = await FindEstadoProcessoByQueryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DocumentoSaida&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentoSaida>>> FindEstadoProcessoByQueryAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-saida/query-estado";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEstadoProcessoByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoSaida>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoSaida>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoSaida>)));
        }

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>List&lt;ProdutoBaixaDTO&gt;</returns>
        public List<ProdutoBaixaDTO> FindProdutoConferenciaByQuery (long? codigoEstabelecimento, string codigoDepositante, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             ApiResponse<List<ProdutoBaixaDTO>> localVarResponse = FindProdutoConferenciaByQueryWithHttpInfo(codigoEstabelecimento, codigoDepositante, tipoDocumento, serieDocumento, documentoSaida);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of List&lt;ProdutoBaixaDTO&gt;</returns>
        public ApiResponse< List<ProdutoBaixaDTO> > FindProdutoConferenciaByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling DocumentosDeSaidaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->FindProdutoConferenciaByQuery");

            var localVarPath = "/v1/documentos-saida/produtos-conferencia/{codigoEstabelecimento}/{codigoDepositante}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProdutoConferenciaByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProdutoBaixaDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProdutoBaixaDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProdutoBaixaDTO>)));
        }

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of List&lt;ProdutoBaixaDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProdutoBaixaDTO>> FindProdutoConferenciaByQueryAsync (long? codigoEstabelecimento, string codigoDepositante, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             ApiResponse<List<ProdutoBaixaDTO>> localVarResponse = await FindProdutoConferenciaByQueryAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, tipoDocumento, serieDocumento, documentoSaida);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse (List&lt;ProdutoBaixaDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProdutoBaixaDTO>>> FindProdutoConferenciaByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling DocumentosDeSaidaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->FindProdutoConferenciaByQuery");

            var localVarPath = "/v1/documentos-saida/produtos-conferencia/{codigoEstabelecimento}/{codigoDepositante}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProdutoConferenciaByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProdutoBaixaDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProdutoBaixaDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProdutoBaixaDTO>)));
        }

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída em execução Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>List&lt;ProdutoBaixaDTO&gt;</returns>
        public List<ProdutoBaixaDTO> FindProdutoConferenciaRealizadaByQuery (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             ApiResponse<List<ProdutoBaixaDTO>> localVarResponse = FindProdutoConferenciaRealizadaByQueryWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída em execução Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of List&lt;ProdutoBaixaDTO&gt;</returns>
        public ApiResponse< List<ProdutoBaixaDTO> > FindProdutoConferenciaRealizadaByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->FindProdutoConferenciaRealizadaByQuery");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->FindProdutoConferenciaRealizadaByQuery");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->FindProdutoConferenciaRealizadaByQuery");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->FindProdutoConferenciaRealizadaByQuery");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->FindProdutoConferenciaRealizadaByQuery");

            var localVarPath = "/v1/documentos-saida/produtos-conferencia-realizada/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProdutoConferenciaRealizadaByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProdutoBaixaDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProdutoBaixaDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProdutoBaixaDTO>)));
        }

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída em execução Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of List&lt;ProdutoBaixaDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProdutoBaixaDTO>> FindProdutoConferenciaRealizadaByQueryAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             ApiResponse<List<ProdutoBaixaDTO>> localVarResponse = await FindProdutoConferenciaRealizadaByQueryAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída em execução Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse (List&lt;ProdutoBaixaDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProdutoBaixaDTO>>> FindProdutoConferenciaRealizadaByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->FindProdutoConferenciaRealizadaByQuery");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->FindProdutoConferenciaRealizadaByQuery");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->FindProdutoConferenciaRealizadaByQuery");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->FindProdutoConferenciaRealizadaByQuery");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->FindProdutoConferenciaRealizadaByQuery");

            var localVarPath = "/v1/documentos-saida/produtos-conferencia-realizada/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProdutoConferenciaRealizadaByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProdutoBaixaDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProdutoBaixaDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProdutoBaixaDTO>)));
        }

        /// <summary>
        /// Retorna os produtos baixados para um documento de saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>List&lt;ProdutoBaixaDTO&gt;</returns>
        public List<ProdutoBaixaDTO> FindProdutoSaldoInicialByQuery (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             ApiResponse<List<ProdutoBaixaDTO>> localVarResponse = FindProdutoSaldoInicialByQueryWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna os produtos baixados para um documento de saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of List&lt;ProdutoBaixaDTO&gt;</returns>
        public ApiResponse< List<ProdutoBaixaDTO> > FindProdutoSaldoInicialByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->FindProdutoSaldoInicialByQuery");

            var localVarPath = "/v1/documentos-saida/produtos-baixa/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProdutoSaldoInicialByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProdutoBaixaDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProdutoBaixaDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProdutoBaixaDTO>)));
        }

        /// <summary>
        /// Retorna os produtos baixados para um documento de saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of List&lt;ProdutoBaixaDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProdutoBaixaDTO>> FindProdutoSaldoInicialByQueryAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             ApiResponse<List<ProdutoBaixaDTO>> localVarResponse = await FindProdutoSaldoInicialByQueryAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna os produtos baixados para um documento de saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse (List&lt;ProdutoBaixaDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProdutoBaixaDTO>>> FindProdutoSaldoInicialByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->FindProdutoSaldoInicialByQuery");

            var localVarPath = "/v1/documentos-saida/produtos-baixa/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProdutoSaldoInicialByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProdutoBaixaDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProdutoBaixaDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProdutoBaixaDTO>)));
        }

        /// <summary>
        /// Retorna os produtos e suas series do documento de saída que está confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>List&lt;DocumentoProdutoSerieDTO&gt;</returns>
        public List<DocumentoProdutoSerieDTO> FindProdutoSaldoProdutoSerieByQuery (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             ApiResponse<List<DocumentoProdutoSerieDTO>> localVarResponse = FindProdutoSaldoProdutoSerieByQueryWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna os produtos e suas series do documento de saída que está confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of List&lt;DocumentoProdutoSerieDTO&gt;</returns>
        public ApiResponse< List<DocumentoProdutoSerieDTO> > FindProdutoSaldoProdutoSerieByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->FindProdutoSaldoProdutoSerieByQuery");

            var localVarPath = "/v1/documentos-saida/produtos-saldo-produtoserie/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProdutoSaldoProdutoSerieByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoProdutoSerieDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoProdutoSerieDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoProdutoSerieDTO>)));
        }

        /// <summary>
        /// Retorna os produtos e suas series do documento de saída que está confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of List&lt;DocumentoProdutoSerieDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentoProdutoSerieDTO>> FindProdutoSaldoProdutoSerieByQueryAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             ApiResponse<List<DocumentoProdutoSerieDTO>> localVarResponse = await FindProdutoSaldoProdutoSerieByQueryAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna os produtos e suas series do documento de saída que está confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse (List&lt;DocumentoProdutoSerieDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentoProdutoSerieDTO>>> FindProdutoSaldoProdutoSerieByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->FindProdutoSaldoProdutoSerieByQuery");

            var localVarPath = "/v1/documentos-saida/produtos-saldo-produtoserie/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProdutoSaldoProdutoSerieByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoProdutoSerieDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoProdutoSerieDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoProdutoSerieDTO>)));
        }

        /// <summary>
        /// Exclui um documento de saida Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns></returns>
        public void RemoveDocumento (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             RemoveDocumentoWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);
        }

        /// <summary>
        /// Exclui um documento de saida Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveDocumentoWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->RemoveDocumento");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->RemoveDocumento");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->RemoveDocumento");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->RemoveDocumento");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->RemoveDocumento");

            var localVarPath = "/v1/documentos-saida/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDocumento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Exclui um documento de saida Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveDocumentoAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
             await RemoveDocumentoAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida);

        }

        /// <summary>
        /// Exclui um documento de saida Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveDocumentoAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->RemoveDocumento");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->RemoveDocumento");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->RemoveDocumento");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->RemoveDocumento");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->RemoveDocumento");

            var localVarPath = "/v1/documentos-saida/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDocumento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Altera um documento de saida  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="documentoSaida2">documentoSaida</param>
        /// <returns></returns>
        public void UpdateDocumento (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, DocumentoSaida documentoSaida2)
        {
             UpdateDocumentoWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida, documentoSaida2);
        }

        /// <summary>
        /// Altera um documento de saida  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="documentoSaida2">documentoSaida</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateDocumentoWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, DocumentoSaida documentoSaida2)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->UpdateDocumento");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->UpdateDocumento");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->UpdateDocumento");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->UpdateDocumento");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->UpdateDocumento");
            // verify the required parameter 'documentoSaida2' is set
            if (documentoSaida2 == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida2' when calling DocumentosDeSaidaApi->UpdateDocumento");

            var localVarPath = "/v1/documentos-saida/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter
            if (documentoSaida2 != null && documentoSaida2.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentoSaida2); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentoSaida2; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDocumento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Altera um documento de saida  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="documentoSaida2">documentoSaida</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateDocumentoAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, DocumentoSaida documentoSaida2)
        {
             await UpdateDocumentoAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoSaida, documentoSaida2);

        }

        /// <summary>
        /// Altera um documento de saida  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoSaida"></param>
        /// <param name="documentoSaida2">documentoSaida</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateDocumentoAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoSaida, DocumentoSaida documentoSaida2)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeSaidaApi->UpdateDocumento");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeSaidaApi->UpdateDocumento");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeSaidaApi->UpdateDocumento");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeSaidaApi->UpdateDocumento");
            // verify the required parameter 'documentoSaida' is set
            if (documentoSaida == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida' when calling DocumentosDeSaidaApi->UpdateDocumento");
            // verify the required parameter 'documentoSaida2' is set
            if (documentoSaida2 == null)
                throw new ApiException(400, "Missing required parameter 'documentoSaida2' when calling DocumentosDeSaidaApi->UpdateDocumento");

            var localVarPath = "/v1/documentos-saida/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoSaida != null) localVarPathParams.Add("documentoSaida", this.Configuration.ApiClient.ParameterToString(documentoSaida)); // path parameter
            if (documentoSaida2 != null && documentoSaida2.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentoSaida2); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentoSaida2; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDocumento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
