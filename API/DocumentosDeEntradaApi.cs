/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentosDeEntradaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Conta os documentos de entrada. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>long?</returns>
        long? CountByQuery ();

        /// <summary>
        /// Conta os documentos de entrada. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> CountByQueryWithHttpInfo ();
        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>long?</returns>
        long? CountEstadoProcessoByQuery ();

        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> CountEstadoProcessoByQueryWithHttpInfo ();
        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>DocumentoEntrada</returns>
        DocumentoEntrada FindById (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);

        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>ApiResponse of DocumentoEntrada</returns>
        ApiResponse<DocumentoEntrada> FindByIdWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);
        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores com sua lista de loteEntrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>DocumentoEntrada</returns>
        DocumentoEntrada FindByIdFethLoteEntrada (string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);

        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores com sua lista de loteEntrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>ApiResponse of DocumentoEntrada</returns>
        ApiResponse<DocumentoEntrada> FindByIdFethLoteEntradaWithHttpInfo (string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);
        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentoEntrada&gt;</returns>
        List<DocumentoEntrada> FindByQuery ();

        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentoEntrada&gt;</returns>
        ApiResponse<List<DocumentoEntrada>> FindByQueryWithHttpInfo ();
        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentoEntrada&gt;</returns>
        List<DocumentoEntrada> FindByQueryUploadEntrada ();

        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentoEntrada&gt;</returns>
        ApiResponse<List<DocumentoEntrada>> FindByQueryUploadEntradaWithHttpInfo ();
        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentoEntrada&gt;</returns>
        List<DocumentoEntrada> FindEstadoProcessoByQuery ();

        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentoEntrada&gt;</returns>
        ApiResponse<List<DocumentoEntrada>> FindEstadoProcessoByQueryWithHttpInfo ();
        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>List&lt;ProdutoBaixaDTO&gt;</returns>
        List<ProdutoBaixaDTO> FindProdutoConferenciaByQuery (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>ApiResponse of List&lt;ProdutoBaixaDTO&gt;</returns>
        ApiResponse<List<ProdutoBaixaDTO>> FindProdutoConferenciaByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);
        /// <summary>
        /// Retorna o saldo inicial dos produtos do documento de entrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>List&lt;ProdutoSaldoInicialDTO&gt;</returns>
        List<ProdutoSaldoInicialDTO> FindProdutoSaldoInicialByQuery (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);

        /// <summary>
        /// Retorna o saldo inicial dos produtos do documento de entrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>ApiResponse of List&lt;ProdutoSaldoInicialDTO&gt;</returns>
        ApiResponse<List<ProdutoSaldoInicialDTO>> FindProdutoSaldoInicialByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);
        /// <summary>
        /// Retorna o saldo inicial dos produtos e suas series do documento de entrada que está confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>List&lt;DocumentoProdutoSerieDTO&gt;</returns>
        List<DocumentoProdutoSerieDTO> FindProdutoSaldoProdutoSerieByQuery (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);

        /// <summary>
        /// Retorna o saldo inicial dos produtos e suas series do documento de entrada que está confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>ApiResponse of List&lt;DocumentoProdutoSerieDTO&gt;</returns>
        ApiResponse<List<DocumentoProdutoSerieDTO>> FindProdutoSaldoProdutoSerieByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);
        /// <summary>
        /// Exclui um documento de entrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns></returns>
        void Remove (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);

        /// <summary>
        /// Exclui um documento de entrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);
        /// <summary>
        /// Exclui um documento de entrada vindo de upload de arquivos
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns></returns>
        void RemoveDEupload (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);

        /// <summary>
        /// Exclui um documento de entrada vindo de upload de arquivos
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveDEuploadWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);
        /// <summary>
        /// Altera um documento de entrada 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <param name="documentoEntrada2">documentoEntrada</param>
        /// <returns></returns>
        void Update (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada, DocumentoEntradaDTO documentoEntrada2);

        /// <summary>
        /// Altera um documento de entrada 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <param name="documentoEntrada2">documentoEntrada</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada, DocumentoEntradaDTO documentoEntrada2);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Conta os documentos de entrada. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> CountByQueryAsync ();

        /// <summary>
        /// Conta os documentos de entrada. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> CountByQueryAsyncWithHttpInfo ();
        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> CountEstadoProcessoByQueryAsync ();

        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> CountEstadoProcessoByQueryAsyncWithHttpInfo ();
        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of DocumentoEntrada</returns>
        System.Threading.Tasks.Task<DocumentoEntrada> FindByIdAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);

        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of ApiResponse (DocumentoEntrada)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentoEntrada>> FindByIdAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);
        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores com sua lista de loteEntrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of DocumentoEntrada</returns>
        System.Threading.Tasks.Task<DocumentoEntrada> FindByIdFethLoteEntradaAsync (string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);

        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores com sua lista de loteEntrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of ApiResponse (DocumentoEntrada)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentoEntrada>> FindByIdFethLoteEntradaAsyncWithHttpInfo (string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);
        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DocumentoEntrada&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentoEntrada>> FindByQueryAsync ();

        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DocumentoEntrada&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentoEntrada>>> FindByQueryAsyncWithHttpInfo ();
        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DocumentoEntrada&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentoEntrada>> FindByQueryUploadEntradaAsync ();

        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DocumentoEntrada&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentoEntrada>>> FindByQueryUploadEntradaAsyncWithHttpInfo ();
        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DocumentoEntrada&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentoEntrada>> FindEstadoProcessoByQueryAsync ();

        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DocumentoEntrada&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentoEntrada>>> FindEstadoProcessoByQueryAsyncWithHttpInfo ();
        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of List&lt;ProdutoBaixaDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProdutoBaixaDTO>> FindProdutoConferenciaByQueryAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of ApiResponse (List&lt;ProdutoBaixaDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProdutoBaixaDTO>>> FindProdutoConferenciaByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);
        /// <summary>
        /// Retorna o saldo inicial dos produtos do documento de entrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of List&lt;ProdutoSaldoInicialDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProdutoSaldoInicialDTO>> FindProdutoSaldoInicialByQueryAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);

        /// <summary>
        /// Retorna o saldo inicial dos produtos do documento de entrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of ApiResponse (List&lt;ProdutoSaldoInicialDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProdutoSaldoInicialDTO>>> FindProdutoSaldoInicialByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);
        /// <summary>
        /// Retorna o saldo inicial dos produtos e suas series do documento de entrada que está confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of List&lt;DocumentoProdutoSerieDTO&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentoProdutoSerieDTO>> FindProdutoSaldoProdutoSerieByQueryAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);

        /// <summary>
        /// Retorna o saldo inicial dos produtos e suas series do documento de entrada que está confirmado
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of ApiResponse (List&lt;DocumentoProdutoSerieDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentoProdutoSerieDTO>>> FindProdutoSaldoProdutoSerieByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);
        /// <summary>
        /// Exclui um documento de entrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);

        /// <summary>
        /// Exclui um documento de entrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);
        /// <summary>
        /// Exclui um documento de entrada vindo de upload de arquivos
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveDEuploadAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);

        /// <summary>
        /// Exclui um documento de entrada vindo de upload de arquivos
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveDEuploadAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada);
        /// <summary>
        /// Altera um documento de entrada 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <param name="documentoEntrada2">documentoEntrada</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada, DocumentoEntradaDTO documentoEntrada2);

        /// <summary>
        /// Altera um documento de entrada 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <param name="documentoEntrada2">documentoEntrada</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada, DocumentoEntradaDTO documentoEntrada2);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentosDeEntradaApi : IDocumentosDeEntradaApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentosDeEntradaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentosDeEntradaApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentosDeEntradaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentosDeEntradaApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Conta os documentos de entrada. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>long?</returns>
        public long? CountByQuery ()
        {
             ApiResponse<long?> localVarResponse = CountByQueryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Conta os documentos de entrada. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > CountByQueryWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-entrada/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Conta os documentos de entrada. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> CountByQueryAsync ()
        {
             ApiResponse<long?> localVarResponse = await CountByQueryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Conta os documentos de entrada. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> CountByQueryAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-entrada/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>long?</returns>
        public long? CountEstadoProcessoByQuery ()
        {
             ApiResponse<long?> localVarResponse = CountEstadoProcessoByQueryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > CountEstadoProcessoByQueryWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-entrada/count-estado";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountEstadoProcessoByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> CountEstadoProcessoByQueryAsync ()
        {
             ApiResponse<long?> localVarResponse = await CountEstadoProcessoByQueryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Conta os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> CountEstadoProcessoByQueryAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-entrada/count-estado";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountEstadoProcessoByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>DocumentoEntrada</returns>
        public DocumentoEntrada FindById (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
             ApiResponse<DocumentoEntrada> localVarResponse = FindByIdWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>ApiResponse of DocumentoEntrada</returns>
        public ApiResponse< DocumentoEntrada > FindByIdWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeEntradaApi->FindById");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->FindById");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->FindById");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->FindById");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->FindById");

            var localVarPath = "/v1/documentos-entrada/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentoEntrada>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentoEntrada) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentoEntrada)));
        }

        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of DocumentoEntrada</returns>
        public async System.Threading.Tasks.Task<DocumentoEntrada> FindByIdAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
             ApiResponse<DocumentoEntrada> localVarResponse = await FindByIdAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of ApiResponse (DocumentoEntrada)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentoEntrada>> FindByIdAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeEntradaApi->FindById");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->FindById");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->FindById");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->FindById");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->FindById");

            var localVarPath = "/v1/documentos-entrada/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentoEntrada>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentoEntrada) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentoEntrada)));
        }

        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores com sua lista de loteEntrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>DocumentoEntrada</returns>
        public DocumentoEntrada FindByIdFethLoteEntrada (string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
             ApiResponse<DocumentoEntrada> localVarResponse = FindByIdFethLoteEntradaWithHttpInfo(codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores com sua lista de loteEntrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>ApiResponse of DocumentoEntrada</returns>
        public ApiResponse< DocumentoEntrada > FindByIdFethLoteEntradaWithHttpInfo (string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->FindByIdFethLoteEntrada");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->FindByIdFethLoteEntrada");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->FindByIdFethLoteEntrada");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->FindByIdFethLoteEntrada");

            var localVarPath = "/v1/documentos-entrada/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}/loteEntrada";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByIdFethLoteEntrada", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentoEntrada>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentoEntrada) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentoEntrada)));
        }

        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores com sua lista de loteEntrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of DocumentoEntrada</returns>
        public async System.Threading.Tasks.Task<DocumentoEntrada> FindByIdFethLoteEntradaAsync (string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
             ApiResponse<DocumentoEntrada> localVarResponse = await FindByIdFethLoteEntradaAsyncWithHttpInfo(codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna um documento de entrada  atravéz dos atributos identificadores com sua lista de loteEntrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of ApiResponse (DocumentoEntrada)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentoEntrada>> FindByIdFethLoteEntradaAsyncWithHttpInfo (string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->FindByIdFethLoteEntrada");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->FindByIdFethLoteEntrada");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->FindByIdFethLoteEntrada");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->FindByIdFethLoteEntrada");

            var localVarPath = "/v1/documentos-entrada/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}/loteEntrada";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByIdFethLoteEntrada", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentoEntrada>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentoEntrada) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentoEntrada)));
        }

        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentoEntrada&gt;</returns>
        public List<DocumentoEntrada> FindByQuery ()
        {
             ApiResponse<List<DocumentoEntrada>> localVarResponse = FindByQueryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentoEntrada&gt;</returns>
        public ApiResponse< List<DocumentoEntrada> > FindByQueryWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-entrada";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoEntrada>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoEntrada>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoEntrada>)));
        }

        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DocumentoEntrada&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentoEntrada>> FindByQueryAsync ()
        {
             ApiResponse<List<DocumentoEntrada>> localVarResponse = await FindByQueryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DocumentoEntrada&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentoEntrada>>> FindByQueryAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-entrada";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoEntrada>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoEntrada>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoEntrada>)));
        }

        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentoEntrada&gt;</returns>
        public List<DocumentoEntrada> FindByQueryUploadEntrada ()
        {
             ApiResponse<List<DocumentoEntrada>> localVarResponse = FindByQueryUploadEntradaWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentoEntrada&gt;</returns>
        public ApiResponse< List<DocumentoEntrada> > FindByQueryUploadEntradaWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-entrada/uploadEntrada";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQueryUploadEntrada", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoEntrada>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoEntrada>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoEntrada>)));
        }

        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DocumentoEntrada&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentoEntrada>> FindByQueryUploadEntradaAsync ()
        {
             ApiResponse<List<DocumentoEntrada>> localVarResponse = await FindByQueryUploadEntradaAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna os documentos de entrada. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DocumentoEntrada&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentoEntrada>>> FindByQueryUploadEntradaAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-entrada/uploadEntrada";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQueryUploadEntrada", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoEntrada>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoEntrada>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoEntrada>)));
        }

        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;DocumentoEntrada&gt;</returns>
        public List<DocumentoEntrada> FindEstadoProcessoByQuery ()
        {
             ApiResponse<List<DocumentoEntrada>> localVarResponse = FindEstadoProcessoByQueryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;DocumentoEntrada&gt;</returns>
        public ApiResponse< List<DocumentoEntrada> > FindEstadoProcessoByQueryWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-entrada/query-estado";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEstadoProcessoByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoEntrada>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoEntrada>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoEntrada>)));
        }

        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;DocumentoEntrada&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentoEntrada>> FindEstadoProcessoByQueryAsync ()
        {
             ApiResponse<List<DocumentoEntrada>> localVarResponse = await FindEstadoProcessoByQueryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna os estados de processo. Filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;DocumentoEntrada&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentoEntrada>>> FindEstadoProcessoByQueryAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/documentos-entrada/query-estado";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindEstadoProcessoByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoEntrada>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoEntrada>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoEntrada>)));
        }

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>List&lt;ProdutoBaixaDTO&gt;</returns>
        public List<ProdutoBaixaDTO> FindProdutoConferenciaByQuery (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
             ApiResponse<List<ProdutoBaixaDTO>> localVarResponse = FindProdutoConferenciaByQueryWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>ApiResponse of List&lt;ProdutoBaixaDTO&gt;</returns>
        public ApiResponse< List<ProdutoBaixaDTO> > FindProdutoConferenciaByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeEntradaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->FindProdutoConferenciaByQuery");

            var localVarPath = "/v1/documentos-entrada/produtos-conferencia/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProdutoConferenciaByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProdutoBaixaDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProdutoBaixaDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProdutoBaixaDTO>)));
        }

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of List&lt;ProdutoBaixaDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProdutoBaixaDTO>> FindProdutoConferenciaByQueryAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
             ApiResponse<List<ProdutoBaixaDTO>> localVarResponse = await FindProdutoConferenciaByQueryAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna os produtos conferidos para um documento de saída confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of ApiResponse (List&lt;ProdutoBaixaDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProdutoBaixaDTO>>> FindProdutoConferenciaByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeEntradaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->FindProdutoConferenciaByQuery");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->FindProdutoConferenciaByQuery");

            var localVarPath = "/v1/documentos-entrada/produtos-conferencia/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProdutoConferenciaByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProdutoBaixaDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProdutoBaixaDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProdutoBaixaDTO>)));
        }

        /// <summary>
        /// Retorna o saldo inicial dos produtos do documento de entrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>List&lt;ProdutoSaldoInicialDTO&gt;</returns>
        public List<ProdutoSaldoInicialDTO> FindProdutoSaldoInicialByQuery (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
             ApiResponse<List<ProdutoSaldoInicialDTO>> localVarResponse = FindProdutoSaldoInicialByQueryWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna o saldo inicial dos produtos do documento de entrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>ApiResponse of List&lt;ProdutoSaldoInicialDTO&gt;</returns>
        public ApiResponse< List<ProdutoSaldoInicialDTO> > FindProdutoSaldoInicialByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeEntradaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->FindProdutoSaldoInicialByQuery");

            var localVarPath = "/v1/documentos-entrada/produtos-saldo-inicial/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProdutoSaldoInicialByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProdutoSaldoInicialDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProdutoSaldoInicialDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProdutoSaldoInicialDTO>)));
        }

        /// <summary>
        /// Retorna o saldo inicial dos produtos do documento de entrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of List&lt;ProdutoSaldoInicialDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProdutoSaldoInicialDTO>> FindProdutoSaldoInicialByQueryAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
             ApiResponse<List<ProdutoSaldoInicialDTO>> localVarResponse = await FindProdutoSaldoInicialByQueryAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna o saldo inicial dos produtos do documento de entrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of ApiResponse (List&lt;ProdutoSaldoInicialDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProdutoSaldoInicialDTO>>> FindProdutoSaldoInicialByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeEntradaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->FindProdutoSaldoInicialByQuery");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->FindProdutoSaldoInicialByQuery");

            var localVarPath = "/v1/documentos-entrada/produtos-saldo-inicial/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProdutoSaldoInicialByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProdutoSaldoInicialDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProdutoSaldoInicialDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProdutoSaldoInicialDTO>)));
        }

        /// <summary>
        /// Retorna o saldo inicial dos produtos e suas series do documento de entrada que está confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>List&lt;DocumentoProdutoSerieDTO&gt;</returns>
        public List<DocumentoProdutoSerieDTO> FindProdutoSaldoProdutoSerieByQuery (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
             ApiResponse<List<DocumentoProdutoSerieDTO>> localVarResponse = FindProdutoSaldoProdutoSerieByQueryWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna o saldo inicial dos produtos e suas series do documento de entrada que está confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>ApiResponse of List&lt;DocumentoProdutoSerieDTO&gt;</returns>
        public ApiResponse< List<DocumentoProdutoSerieDTO> > FindProdutoSaldoProdutoSerieByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeEntradaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->FindProdutoSaldoProdutoSerieByQuery");

            var localVarPath = "/v1/documentos-entrada/produtos-saldo-produtoserie/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProdutoSaldoProdutoSerieByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoProdutoSerieDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoProdutoSerieDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoProdutoSerieDTO>)));
        }

        /// <summary>
        /// Retorna o saldo inicial dos produtos e suas series do documento de entrada que está confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of List&lt;DocumentoProdutoSerieDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentoProdutoSerieDTO>> FindProdutoSaldoProdutoSerieByQueryAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
             ApiResponse<List<DocumentoProdutoSerieDTO>> localVarResponse = await FindProdutoSaldoProdutoSerieByQueryAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna o saldo inicial dos produtos e suas series do documento de entrada que está confirmado Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of ApiResponse (List&lt;DocumentoProdutoSerieDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentoProdutoSerieDTO>>> FindProdutoSaldoProdutoSerieByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeEntradaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->FindProdutoSaldoProdutoSerieByQuery");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->FindProdutoSaldoProdutoSerieByQuery");

            var localVarPath = "/v1/documentos-entrada/produtos-saldo-produtoserie/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindProdutoSaldoProdutoSerieByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentoProdutoSerieDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentoProdutoSerieDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentoProdutoSerieDTO>)));
        }

        /// <summary>
        /// Exclui um documento de entrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns></returns>
        public void Remove (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
             RemoveWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada);
        }

        /// <summary>
        /// Exclui um documento de entrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeEntradaApi->Remove");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->Remove");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->Remove");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->Remove");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->Remove");

            var localVarPath = "/v1/documentos-entrada/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Exclui um documento de entrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
             await RemoveAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada);

        }

        /// <summary>
        /// Exclui um documento de entrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeEntradaApi->Remove");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->Remove");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->Remove");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->Remove");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->Remove");

            var localVarPath = "/v1/documentos-entrada/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Exclui um documento de entrada vindo de upload de arquivos Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns></returns>
        public void RemoveDEupload (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
             RemoveDEuploadWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada);
        }

        /// <summary>
        /// Exclui um documento de entrada vindo de upload de arquivos Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveDEuploadWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeEntradaApi->RemoveDEupload");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->RemoveDEupload");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->RemoveDEupload");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->RemoveDEupload");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->RemoveDEupload");

            var localVarPath = "/v1/documentos-entrada/uploadEntrada/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDEupload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Exclui um documento de entrada vindo de upload de arquivos Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveDEuploadAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
             await RemoveDEuploadAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada);

        }

        /// <summary>
        /// Exclui um documento de entrada vindo de upload de arquivos Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveDEuploadAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeEntradaApi->RemoveDEupload");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->RemoveDEupload");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->RemoveDEupload");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->RemoveDEupload");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->RemoveDEupload");

            var localVarPath = "/v1/documentos-entrada/uploadEntrada/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveDEupload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Altera um documento de entrada  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <param name="documentoEntrada2">documentoEntrada</param>
        /// <returns></returns>
        public void Update (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada, DocumentoEntradaDTO documentoEntrada2)
        {
             UpdateWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada, documentoEntrada2);
        }

        /// <summary>
        /// Altera um documento de entrada  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <param name="documentoEntrada2">documentoEntrada</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada, DocumentoEntradaDTO documentoEntrada2)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeEntradaApi->Update");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->Update");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->Update");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->Update");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->Update");
            // verify the required parameter 'documentoEntrada2' is set
            if (documentoEntrada2 == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada2' when calling DocumentosDeEntradaApi->Update");

            var localVarPath = "/v1/documentos-entrada/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter
            if (documentoEntrada2 != null && documentoEntrada2.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentoEntrada2); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentoEntrada2; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Altera um documento de entrada  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <param name="documentoEntrada2">documentoEntrada</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAsync (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada, DocumentoEntradaDTO documentoEntrada2)
        {
             await UpdateAsyncWithHttpInfo(codigoEstabelecimento, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada, documentoEntrada2);

        }

        /// <summary>
        /// Altera um documento de entrada  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="documentoEntrada"></param>
        /// <param name="documentoEntrada2">documentoEntrada</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoEmpresa, string tipoDocumento, string serieDocumento, string documentoEntrada, DocumentoEntradaDTO documentoEntrada2)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling DocumentosDeEntradaApi->Update");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling DocumentosDeEntradaApi->Update");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling DocumentosDeEntradaApi->Update");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling DocumentosDeEntradaApi->Update");
            // verify the required parameter 'documentoEntrada' is set
            if (documentoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada' when calling DocumentosDeEntradaApi->Update");
            // verify the required parameter 'documentoEntrada2' is set
            if (documentoEntrada2 == null)
                throw new ApiException(400, "Missing required parameter 'documentoEntrada2' when calling DocumentosDeEntradaApi->Update");

            var localVarPath = "/v1/documentos-entrada/{codigoEstabelecimento}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{documentoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (documentoEntrada != null) localVarPathParams.Add("documentoEntrada", this.Configuration.ApiClient.ParameterToString(documentoEntrada)); // path parameter
            if (documentoEntrada2 != null && documentoEntrada2.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentoEntrada2); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentoEntrada2; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
