/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEstoqueApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns></returns>
        void FindConsultaSaldoResumo (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, List<string> groupBy = null, long? limit = null, long? offset = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FindConsultaSaldoResumoWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, List<string> groupBy = null, long? limit = null, long? offset = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="tipoBaixaParaOrdenacao"> (optional)</param>
        /// <param name="tipoBaixaSecundarioParaOrdenacao"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns></returns>
        void FindDetailed (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, int? tipoBaixaParaOrdenacao = null, int? tipoBaixaSecundarioParaOrdenacao = null, long? limit = null, long? offset = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="tipoBaixaParaOrdenacao"> (optional)</param>
        /// <param name="tipoBaixaSecundarioParaOrdenacao"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FindDetailedWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, int? tipoBaixaParaOrdenacao = null, int? tipoBaixaSecundarioParaOrdenacao = null, long? limit = null, long? offset = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="exibirNumeroSerie"> (optional)</param>
        /// <param name="exibirDocumentoEntrada"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns></returns>
        void FindGrouped (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, bool? exibirNumeroSerie = null, bool? exibirDocumentoEntrada = null, List<string> groupBy = null, long? limit = null, long? offset = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="exibirNumeroSerie"> (optional)</param>
        /// <param name="exibirDocumentoEntrada"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FindGroupedWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, bool? exibirNumeroSerie = null, bool? exibirDocumentoEntrada = null, List<string> groupBy = null, long? limit = null, long? offset = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FindConsultaSaldoResumoAsync (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, List<string> groupBy = null, long? limit = null, long? offset = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FindConsultaSaldoResumoAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, List<string> groupBy = null, long? limit = null, long? offset = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="tipoBaixaParaOrdenacao"> (optional)</param>
        /// <param name="tipoBaixaSecundarioParaOrdenacao"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FindDetailedAsync (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, int? tipoBaixaParaOrdenacao = null, int? tipoBaixaSecundarioParaOrdenacao = null, long? limit = null, long? offset = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="tipoBaixaParaOrdenacao"> (optional)</param>
        /// <param name="tipoBaixaSecundarioParaOrdenacao"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FindDetailedAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, int? tipoBaixaParaOrdenacao = null, int? tipoBaixaSecundarioParaOrdenacao = null, long? limit = null, long? offset = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="exibirNumeroSerie"> (optional)</param>
        /// <param name="exibirDocumentoEntrada"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FindGroupedAsync (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, bool? exibirNumeroSerie = null, bool? exibirDocumentoEntrada = null, List<string> groupBy = null, long? limit = null, long? offset = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="exibirNumeroSerie"> (optional)</param>
        /// <param name="exibirDocumentoEntrada"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FindGroupedAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, bool? exibirNumeroSerie = null, bool? exibirDocumentoEntrada = null, List<string> groupBy = null, long? limit = null, long? offset = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EstoqueApi : IEstoqueApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EstoqueApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EstoqueApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EstoqueApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EstoqueApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns></returns>
        public void FindConsultaSaldoResumo (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, List<string> groupBy = null, long? limit = null, long? offset = null)
        {
             FindConsultaSaldoResumoWithHttpInfo(codigoEstabelecimento, codigoDepositante, endereco, etiquetaEndereco, codigoUa, codigoProduto, classeProduto, loteFabricacao, dataFabricacao, dataVencimento, loteGeral, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada, loteEntrada, dataFabricacaoInicial, dataFabricacaoFinal, dataVencimentoInicial, dataVencimentoFinal, loteEntradaSequencia, descricaoProduto, apenasEnderecoDisponivelSaida, checkarNecessidadeOficialSaida, apenasLoteEntradaConfirmado, excluirTipoEnderecoIntermediario, excluirClasseDivergenciaDepositante, groupBy, limit, offset);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FindConsultaSaldoResumoWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, List<string> groupBy = null, long? limit = null, long? offset = null)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling EstoqueApi->FindConsultaSaldoResumo");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling EstoqueApi->FindConsultaSaldoResumo");

            var localVarPath = "/v1/estoque/consulta/saldo/resumo/{codigoEstabelecimento}/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (endereco != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endereco", endereco)); // query parameter
            if (etiquetaEndereco != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "etiquetaEndereco", etiquetaEndereco)); // query parameter
            if (codigoUa != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoUa", codigoUa)); // query parameter
            if (codigoProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoProduto", codigoProduto)); // query parameter
            if (classeProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classeProduto", classeProduto)); // query parameter
            if (loteFabricacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteFabricacao", loteFabricacao)); // query parameter
            if (dataFabricacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacao", dataFabricacao)); // query parameter
            if (dataVencimento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimento", dataVencimento)); // query parameter
            if (loteGeral != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteGeral", loteGeral)); // query parameter
            if (codigoEmpresa != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoEmpresa", codigoEmpresa)); // query parameter
            if (tipoDocumento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tipoDocumento", tipoDocumento)); // query parameter
            if (serieDocumento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serieDocumento", serieDocumento)); // query parameter
            if (documentoEntrada != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentoEntrada", documentoEntrada)); // query parameter
            if (loteEntrada != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteEntrada", loteEntrada)); // query parameter
            if (dataFabricacaoInicial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacaoInicial", dataFabricacaoInicial)); // query parameter
            if (dataFabricacaoFinal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacaoFinal", dataFabricacaoFinal)); // query parameter
            if (dataVencimentoInicial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimentoInicial", dataVencimentoInicial)); // query parameter
            if (dataVencimentoFinal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimentoFinal", dataVencimentoFinal)); // query parameter
            if (loteEntradaSequencia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteEntradaSequencia", loteEntradaSequencia)); // query parameter
            if (descricaoProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "descricaoProduto", descricaoProduto)); // query parameter
            if (apenasEnderecoDisponivelSaida != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apenasEnderecoDisponivelSaida", apenasEnderecoDisponivelSaida)); // query parameter
            if (checkarNecessidadeOficialSaida != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "checkarNecessidadeOficialSaida", checkarNecessidadeOficialSaida)); // query parameter
            if (apenasLoteEntradaConfirmado != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apenasLoteEntradaConfirmado", apenasLoteEntradaConfirmado)); // query parameter
            if (excluirTipoEnderecoIntermediario != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excluirTipoEnderecoIntermediario", excluirTipoEnderecoIntermediario)); // query parameter
            if (excluirClasseDivergenciaDepositante != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excluirClasseDivergenciaDepositante", excluirClasseDivergenciaDepositante)); // query parameter
            if (groupBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "groupBy", groupBy)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindConsultaSaldoResumo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FindConsultaSaldoResumoAsync (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, List<string> groupBy = null, long? limit = null, long? offset = null)
        {
             await FindConsultaSaldoResumoAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, endereco, etiquetaEndereco, codigoUa, codigoProduto, classeProduto, loteFabricacao, dataFabricacao, dataVencimento, loteGeral, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada, loteEntrada, dataFabricacaoInicial, dataFabricacaoFinal, dataVencimentoInicial, dataVencimentoFinal, loteEntradaSequencia, descricaoProduto, apenasEnderecoDisponivelSaida, checkarNecessidadeOficialSaida, apenasLoteEntradaConfirmado, excluirTipoEnderecoIntermediario, excluirClasseDivergenciaDepositante, groupBy, limit, offset);

        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FindConsultaSaldoResumoAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, List<string> groupBy = null, long? limit = null, long? offset = null)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling EstoqueApi->FindConsultaSaldoResumo");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling EstoqueApi->FindConsultaSaldoResumo");

            var localVarPath = "/v1/estoque/consulta/saldo/resumo/{codigoEstabelecimento}/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (endereco != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endereco", endereco)); // query parameter
            if (etiquetaEndereco != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "etiquetaEndereco", etiquetaEndereco)); // query parameter
            if (codigoUa != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoUa", codigoUa)); // query parameter
            if (codigoProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoProduto", codigoProduto)); // query parameter
            if (classeProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classeProduto", classeProduto)); // query parameter
            if (loteFabricacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteFabricacao", loteFabricacao)); // query parameter
            if (dataFabricacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacao", dataFabricacao)); // query parameter
            if (dataVencimento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimento", dataVencimento)); // query parameter
            if (loteGeral != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteGeral", loteGeral)); // query parameter
            if (codigoEmpresa != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoEmpresa", codigoEmpresa)); // query parameter
            if (tipoDocumento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tipoDocumento", tipoDocumento)); // query parameter
            if (serieDocumento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serieDocumento", serieDocumento)); // query parameter
            if (documentoEntrada != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentoEntrada", documentoEntrada)); // query parameter
            if (loteEntrada != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteEntrada", loteEntrada)); // query parameter
            if (dataFabricacaoInicial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacaoInicial", dataFabricacaoInicial)); // query parameter
            if (dataFabricacaoFinal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacaoFinal", dataFabricacaoFinal)); // query parameter
            if (dataVencimentoInicial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimentoInicial", dataVencimentoInicial)); // query parameter
            if (dataVencimentoFinal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimentoFinal", dataVencimentoFinal)); // query parameter
            if (loteEntradaSequencia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteEntradaSequencia", loteEntradaSequencia)); // query parameter
            if (descricaoProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "descricaoProduto", descricaoProduto)); // query parameter
            if (apenasEnderecoDisponivelSaida != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apenasEnderecoDisponivelSaida", apenasEnderecoDisponivelSaida)); // query parameter
            if (checkarNecessidadeOficialSaida != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "checkarNecessidadeOficialSaida", checkarNecessidadeOficialSaida)); // query parameter
            if (apenasLoteEntradaConfirmado != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apenasLoteEntradaConfirmado", apenasLoteEntradaConfirmado)); // query parameter
            if (excluirTipoEnderecoIntermediario != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excluirTipoEnderecoIntermediario", excluirTipoEnderecoIntermediario)); // query parameter
            if (excluirClasseDivergenciaDepositante != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excluirClasseDivergenciaDepositante", excluirClasseDivergenciaDepositante)); // query parameter
            if (groupBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "groupBy", groupBy)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindConsultaSaldoResumo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="tipoBaixaParaOrdenacao"> (optional)</param>
        /// <param name="tipoBaixaSecundarioParaOrdenacao"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns></returns>
        public void FindDetailed (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, int? tipoBaixaParaOrdenacao = null, int? tipoBaixaSecundarioParaOrdenacao = null, long? limit = null, long? offset = null)
        {
             FindDetailedWithHttpInfo(codigoEstabelecimento, codigoDepositante, endereco, etiquetaEndereco, codigoUa, codigoProduto, classeProduto, loteFabricacao, dataFabricacao, dataVencimento, loteGeral, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada, loteEntrada, dataFabricacaoInicial, dataFabricacaoFinal, dataVencimentoInicial, dataVencimentoFinal, loteEntradaSequencia, descricaoProduto, apenasEnderecoDisponivelSaida, checkarNecessidadeOficialSaida, apenasLoteEntradaConfirmado, excluirTipoEnderecoIntermediario, excluirClasseDivergenciaDepositante, tipoBaixaParaOrdenacao, tipoBaixaSecundarioParaOrdenacao, limit, offset);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="tipoBaixaParaOrdenacao"> (optional)</param>
        /// <param name="tipoBaixaSecundarioParaOrdenacao"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FindDetailedWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, int? tipoBaixaParaOrdenacao = null, int? tipoBaixaSecundarioParaOrdenacao = null, long? limit = null, long? offset = null)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling EstoqueApi->FindDetailed");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling EstoqueApi->FindDetailed");

            var localVarPath = "/v1/estoque/detalhe/{codigoEstabelecimento}/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (endereco != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endereco", endereco)); // query parameter
            if (etiquetaEndereco != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "etiquetaEndereco", etiquetaEndereco)); // query parameter
            if (codigoUa != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoUa", codigoUa)); // query parameter
            if (codigoProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoProduto", codigoProduto)); // query parameter
            if (classeProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classeProduto", classeProduto)); // query parameter
            if (loteFabricacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteFabricacao", loteFabricacao)); // query parameter
            if (dataFabricacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacao", dataFabricacao)); // query parameter
            if (dataVencimento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimento", dataVencimento)); // query parameter
            if (loteGeral != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteGeral", loteGeral)); // query parameter
            if (codigoEmpresa != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoEmpresa", codigoEmpresa)); // query parameter
            if (tipoDocumento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tipoDocumento", tipoDocumento)); // query parameter
            if (serieDocumento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serieDocumento", serieDocumento)); // query parameter
            if (documentoEntrada != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentoEntrada", documentoEntrada)); // query parameter
            if (loteEntrada != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteEntrada", loteEntrada)); // query parameter
            if (dataFabricacaoInicial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacaoInicial", dataFabricacaoInicial)); // query parameter
            if (dataFabricacaoFinal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacaoFinal", dataFabricacaoFinal)); // query parameter
            if (dataVencimentoInicial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimentoInicial", dataVencimentoInicial)); // query parameter
            if (dataVencimentoFinal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimentoFinal", dataVencimentoFinal)); // query parameter
            if (loteEntradaSequencia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteEntradaSequencia", loteEntradaSequencia)); // query parameter
            if (descricaoProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "descricaoProduto", descricaoProduto)); // query parameter
            if (apenasEnderecoDisponivelSaida != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apenasEnderecoDisponivelSaida", apenasEnderecoDisponivelSaida)); // query parameter
            if (checkarNecessidadeOficialSaida != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "checkarNecessidadeOficialSaida", checkarNecessidadeOficialSaida)); // query parameter
            if (apenasLoteEntradaConfirmado != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apenasLoteEntradaConfirmado", apenasLoteEntradaConfirmado)); // query parameter
            if (excluirTipoEnderecoIntermediario != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excluirTipoEnderecoIntermediario", excluirTipoEnderecoIntermediario)); // query parameter
            if (excluirClasseDivergenciaDepositante != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excluirClasseDivergenciaDepositante", excluirClasseDivergenciaDepositante)); // query parameter
            if (tipoBaixaParaOrdenacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tipoBaixaParaOrdenacao", tipoBaixaParaOrdenacao)); // query parameter
            if (tipoBaixaSecundarioParaOrdenacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tipoBaixaSecundarioParaOrdenacao", tipoBaixaSecundarioParaOrdenacao)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindDetailed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="tipoBaixaParaOrdenacao"> (optional)</param>
        /// <param name="tipoBaixaSecundarioParaOrdenacao"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FindDetailedAsync (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, int? tipoBaixaParaOrdenacao = null, int? tipoBaixaSecundarioParaOrdenacao = null, long? limit = null, long? offset = null)
        {
             await FindDetailedAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, endereco, etiquetaEndereco, codigoUa, codigoProduto, classeProduto, loteFabricacao, dataFabricacao, dataVencimento, loteGeral, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada, loteEntrada, dataFabricacaoInicial, dataFabricacaoFinal, dataVencimentoInicial, dataVencimentoFinal, loteEntradaSequencia, descricaoProduto, apenasEnderecoDisponivelSaida, checkarNecessidadeOficialSaida, apenasLoteEntradaConfirmado, excluirTipoEnderecoIntermediario, excluirClasseDivergenciaDepositante, tipoBaixaParaOrdenacao, tipoBaixaSecundarioParaOrdenacao, limit, offset);

        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="tipoBaixaParaOrdenacao"> (optional)</param>
        /// <param name="tipoBaixaSecundarioParaOrdenacao"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FindDetailedAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, int? tipoBaixaParaOrdenacao = null, int? tipoBaixaSecundarioParaOrdenacao = null, long? limit = null, long? offset = null)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling EstoqueApi->FindDetailed");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling EstoqueApi->FindDetailed");

            var localVarPath = "/v1/estoque/detalhe/{codigoEstabelecimento}/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (endereco != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endereco", endereco)); // query parameter
            if (etiquetaEndereco != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "etiquetaEndereco", etiquetaEndereco)); // query parameter
            if (codigoUa != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoUa", codigoUa)); // query parameter
            if (codigoProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoProduto", codigoProduto)); // query parameter
            if (classeProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classeProduto", classeProduto)); // query parameter
            if (loteFabricacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteFabricacao", loteFabricacao)); // query parameter
            if (dataFabricacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacao", dataFabricacao)); // query parameter
            if (dataVencimento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimento", dataVencimento)); // query parameter
            if (loteGeral != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteGeral", loteGeral)); // query parameter
            if (codigoEmpresa != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoEmpresa", codigoEmpresa)); // query parameter
            if (tipoDocumento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tipoDocumento", tipoDocumento)); // query parameter
            if (serieDocumento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serieDocumento", serieDocumento)); // query parameter
            if (documentoEntrada != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentoEntrada", documentoEntrada)); // query parameter
            if (loteEntrada != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteEntrada", loteEntrada)); // query parameter
            if (dataFabricacaoInicial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacaoInicial", dataFabricacaoInicial)); // query parameter
            if (dataFabricacaoFinal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacaoFinal", dataFabricacaoFinal)); // query parameter
            if (dataVencimentoInicial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimentoInicial", dataVencimentoInicial)); // query parameter
            if (dataVencimentoFinal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimentoFinal", dataVencimentoFinal)); // query parameter
            if (loteEntradaSequencia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteEntradaSequencia", loteEntradaSequencia)); // query parameter
            if (descricaoProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "descricaoProduto", descricaoProduto)); // query parameter
            if (apenasEnderecoDisponivelSaida != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apenasEnderecoDisponivelSaida", apenasEnderecoDisponivelSaida)); // query parameter
            if (checkarNecessidadeOficialSaida != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "checkarNecessidadeOficialSaida", checkarNecessidadeOficialSaida)); // query parameter
            if (apenasLoteEntradaConfirmado != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apenasLoteEntradaConfirmado", apenasLoteEntradaConfirmado)); // query parameter
            if (excluirTipoEnderecoIntermediario != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excluirTipoEnderecoIntermediario", excluirTipoEnderecoIntermediario)); // query parameter
            if (excluirClasseDivergenciaDepositante != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excluirClasseDivergenciaDepositante", excluirClasseDivergenciaDepositante)); // query parameter
            if (tipoBaixaParaOrdenacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tipoBaixaParaOrdenacao", tipoBaixaParaOrdenacao)); // query parameter
            if (tipoBaixaSecundarioParaOrdenacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tipoBaixaSecundarioParaOrdenacao", tipoBaixaSecundarioParaOrdenacao)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindDetailed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="exibirNumeroSerie"> (optional)</param>
        /// <param name="exibirDocumentoEntrada"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns></returns>
        public void FindGrouped (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, bool? exibirNumeroSerie = null, bool? exibirDocumentoEntrada = null, List<string> groupBy = null, long? limit = null, long? offset = null)
        {
             FindGroupedWithHttpInfo(codigoEstabelecimento, codigoDepositante, endereco, etiquetaEndereco, codigoUa, codigoProduto, classeProduto, loteFabricacao, dataFabricacao, dataVencimento, loteGeral, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada, loteEntrada, dataFabricacaoInicial, dataFabricacaoFinal, dataVencimentoInicial, dataVencimentoFinal, loteEntradaSequencia, descricaoProduto, apenasEnderecoDisponivelSaida, checkarNecessidadeOficialSaida, apenasLoteEntradaConfirmado, excluirTipoEnderecoIntermediario, excluirClasseDivergenciaDepositante, exibirNumeroSerie, exibirDocumentoEntrada, groupBy, limit, offset);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="exibirNumeroSerie"> (optional)</param>
        /// <param name="exibirDocumentoEntrada"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FindGroupedWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, bool? exibirNumeroSerie = null, bool? exibirDocumentoEntrada = null, List<string> groupBy = null, long? limit = null, long? offset = null)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling EstoqueApi->FindGrouped");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling EstoqueApi->FindGrouped");

            var localVarPath = "/v1/estoque/{codigoEstabelecimento}/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (endereco != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endereco", endereco)); // query parameter
            if (etiquetaEndereco != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "etiquetaEndereco", etiquetaEndereco)); // query parameter
            if (codigoUa != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoUa", codigoUa)); // query parameter
            if (codigoProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoProduto", codigoProduto)); // query parameter
            if (classeProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classeProduto", classeProduto)); // query parameter
            if (loteFabricacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteFabricacao", loteFabricacao)); // query parameter
            if (dataFabricacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacao", dataFabricacao)); // query parameter
            if (dataVencimento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimento", dataVencimento)); // query parameter
            if (loteGeral != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteGeral", loteGeral)); // query parameter
            if (codigoEmpresa != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoEmpresa", codigoEmpresa)); // query parameter
            if (tipoDocumento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tipoDocumento", tipoDocumento)); // query parameter
            if (serieDocumento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serieDocumento", serieDocumento)); // query parameter
            if (documentoEntrada != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentoEntrada", documentoEntrada)); // query parameter
            if (loteEntrada != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteEntrada", loteEntrada)); // query parameter
            if (dataFabricacaoInicial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacaoInicial", dataFabricacaoInicial)); // query parameter
            if (dataFabricacaoFinal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacaoFinal", dataFabricacaoFinal)); // query parameter
            if (dataVencimentoInicial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimentoInicial", dataVencimentoInicial)); // query parameter
            if (dataVencimentoFinal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimentoFinal", dataVencimentoFinal)); // query parameter
            if (loteEntradaSequencia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteEntradaSequencia", loteEntradaSequencia)); // query parameter
            if (descricaoProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "descricaoProduto", descricaoProduto)); // query parameter
            if (apenasEnderecoDisponivelSaida != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apenasEnderecoDisponivelSaida", apenasEnderecoDisponivelSaida)); // query parameter
            if (checkarNecessidadeOficialSaida != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "checkarNecessidadeOficialSaida", checkarNecessidadeOficialSaida)); // query parameter
            if (apenasLoteEntradaConfirmado != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apenasLoteEntradaConfirmado", apenasLoteEntradaConfirmado)); // query parameter
            if (excluirTipoEnderecoIntermediario != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excluirTipoEnderecoIntermediario", excluirTipoEnderecoIntermediario)); // query parameter
            if (excluirClasseDivergenciaDepositante != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excluirClasseDivergenciaDepositante", excluirClasseDivergenciaDepositante)); // query parameter
            if (exibirNumeroSerie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exibirNumeroSerie", exibirNumeroSerie)); // query parameter
            if (exibirDocumentoEntrada != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exibirDocumentoEntrada", exibirDocumentoEntrada)); // query parameter
            if (groupBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "groupBy", groupBy)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindGrouped", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="exibirNumeroSerie"> (optional)</param>
        /// <param name="exibirDocumentoEntrada"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FindGroupedAsync (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, bool? exibirNumeroSerie = null, bool? exibirDocumentoEntrada = null, List<string> groupBy = null, long? limit = null, long? offset = null)
        {
             await FindGroupedAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, endereco, etiquetaEndereco, codigoUa, codigoProduto, classeProduto, loteFabricacao, dataFabricacao, dataVencimento, loteGeral, codigoEmpresa, tipoDocumento, serieDocumento, documentoEntrada, loteEntrada, dataFabricacaoInicial, dataFabricacaoFinal, dataVencimentoInicial, dataVencimentoFinal, loteEntradaSequencia, descricaoProduto, apenasEnderecoDisponivelSaida, checkarNecessidadeOficialSaida, apenasLoteEntradaConfirmado, excluirTipoEnderecoIntermediario, excluirClasseDivergenciaDepositante, exibirNumeroSerie, exibirDocumentoEntrada, groupBy, limit, offset);

        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="endereco"> (optional)</param>
        /// <param name="etiquetaEndereco"> (optional)</param>
        /// <param name="codigoUa"> (optional)</param>
        /// <param name="codigoProduto"> (optional)</param>
        /// <param name="classeProduto"> (optional)</param>
        /// <param name="loteFabricacao"> (optional)</param>
        /// <param name="dataFabricacao"> (optional)</param>
        /// <param name="dataVencimento"> (optional)</param>
        /// <param name="loteGeral"> (optional)</param>
        /// <param name="codigoEmpresa"> (optional)</param>
        /// <param name="tipoDocumento"> (optional)</param>
        /// <param name="serieDocumento"> (optional)</param>
        /// <param name="documentoEntrada"> (optional)</param>
        /// <param name="loteEntrada"> (optional)</param>
        /// <param name="dataFabricacaoInicial"> (optional)</param>
        /// <param name="dataFabricacaoFinal"> (optional)</param>
        /// <param name="dataVencimentoInicial"> (optional)</param>
        /// <param name="dataVencimentoFinal"> (optional)</param>
        /// <param name="loteEntradaSequencia"> (optional)</param>
        /// <param name="descricaoProduto"> (optional)</param>
        /// <param name="apenasEnderecoDisponivelSaida"> (optional)</param>
        /// <param name="checkarNecessidadeOficialSaida"> (optional)</param>
        /// <param name="apenasLoteEntradaConfirmado"> (optional)</param>
        /// <param name="excluirTipoEnderecoIntermediario"> (optional)</param>
        /// <param name="excluirClasseDivergenciaDepositante"> (optional)</param>
        /// <param name="exibirNumeroSerie"> (optional)</param>
        /// <param name="exibirDocumentoEntrada"> (optional)</param>
        /// <param name="groupBy"> (optional)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FindGroupedAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, long? endereco = null, string etiquetaEndereco = null, long? codigoUa = null, string codigoProduto = null, string classeProduto = null, string loteFabricacao = null, DateTime? dataFabricacao = null, DateTime? dataVencimento = null, string loteGeral = null, string codigoEmpresa = null, string tipoDocumento = null, string serieDocumento = null, string documentoEntrada = null, long? loteEntrada = null, DateTime? dataFabricacaoInicial = null, DateTime? dataFabricacaoFinal = null, DateTime? dataVencimentoInicial = null, DateTime? dataVencimentoFinal = null, long? loteEntradaSequencia = null, string descricaoProduto = null, bool? apenasEnderecoDisponivelSaida = null, bool? checkarNecessidadeOficialSaida = null, bool? apenasLoteEntradaConfirmado = null, bool? excluirTipoEnderecoIntermediario = null, bool? excluirClasseDivergenciaDepositante = null, bool? exibirNumeroSerie = null, bool? exibirDocumentoEntrada = null, List<string> groupBy = null, long? limit = null, long? offset = null)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling EstoqueApi->FindGrouped");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling EstoqueApi->FindGrouped");

            var localVarPath = "/v1/estoque/{codigoEstabelecimento}/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (endereco != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endereco", endereco)); // query parameter
            if (etiquetaEndereco != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "etiquetaEndereco", etiquetaEndereco)); // query parameter
            if (codigoUa != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoUa", codigoUa)); // query parameter
            if (codigoProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoProduto", codigoProduto)); // query parameter
            if (classeProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "classeProduto", classeProduto)); // query parameter
            if (loteFabricacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteFabricacao", loteFabricacao)); // query parameter
            if (dataFabricacao != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacao", dataFabricacao)); // query parameter
            if (dataVencimento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimento", dataVencimento)); // query parameter
            if (loteGeral != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteGeral", loteGeral)); // query parameter
            if (codigoEmpresa != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "codigoEmpresa", codigoEmpresa)); // query parameter
            if (tipoDocumento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tipoDocumento", tipoDocumento)); // query parameter
            if (serieDocumento != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serieDocumento", serieDocumento)); // query parameter
            if (documentoEntrada != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentoEntrada", documentoEntrada)); // query parameter
            if (loteEntrada != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteEntrada", loteEntrada)); // query parameter
            if (dataFabricacaoInicial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacaoInicial", dataFabricacaoInicial)); // query parameter
            if (dataFabricacaoFinal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataFabricacaoFinal", dataFabricacaoFinal)); // query parameter
            if (dataVencimentoInicial != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimentoInicial", dataVencimentoInicial)); // query parameter
            if (dataVencimentoFinal != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dataVencimentoFinal", dataVencimentoFinal)); // query parameter
            if (loteEntradaSequencia != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loteEntradaSequencia", loteEntradaSequencia)); // query parameter
            if (descricaoProduto != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "descricaoProduto", descricaoProduto)); // query parameter
            if (apenasEnderecoDisponivelSaida != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apenasEnderecoDisponivelSaida", apenasEnderecoDisponivelSaida)); // query parameter
            if (checkarNecessidadeOficialSaida != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "checkarNecessidadeOficialSaida", checkarNecessidadeOficialSaida)); // query parameter
            if (apenasLoteEntradaConfirmado != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "apenasLoteEntradaConfirmado", apenasLoteEntradaConfirmado)); // query parameter
            if (excluirTipoEnderecoIntermediario != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excluirTipoEnderecoIntermediario", excluirTipoEnderecoIntermediario)); // query parameter
            if (excluirClasseDivergenciaDepositante != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excluirClasseDivergenciaDepositante", excluirClasseDivergenciaDepositante)); // query parameter
            if (exibirNumeroSerie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exibirNumeroSerie", exibirNumeroSerie)); // query parameter
            if (exibirDocumentoEntrada != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exibirDocumentoEntrada", exibirDocumentoEntrada)); // query parameter
            if (groupBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "groupBy", groupBy)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindGrouped", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
