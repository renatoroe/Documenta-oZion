/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutenticacaoApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Atualiza validade do token
        /// </summary>
        /// <remarks>
        /// Atualiza a validade do token informado retornando novo token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <returns></returns>
        void AtualizarToken (string refreshToken);

        /// <summary>
        /// Atualiza validade do token
        /// </summary>
        /// <remarks>
        /// Atualiza a validade do token informado retornando novo token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AtualizarTokenWithHttpInfo (string refreshToken);
        /// <summary>
        /// Solicita token
        /// </summary>
        /// <remarks>
        /// Retorna token de autorização para ser utilizado na chamadas das API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autenticacao">autenticacao</param>
        /// <returns></returns>
        void Autenticar (Autenticacao autenticacao);

        /// <summary>
        /// Solicita token
        /// </summary>
        /// <remarks>
        /// Retorna token de autorização para ser utilizado na chamadas das API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autenticacao">autenticacao</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AutenticarWithHttpInfo (Autenticacao autenticacao);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="senha"></param>
        /// <returns></returns>
        void IsAdministrator (string usuario, string senha);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="senha"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> IsAdministratorWithHttpInfo (string usuario, string senha);
        /// <summary>
        /// Liberação da licença por usuário
        /// </summary>
        /// <remarks>
        /// Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns></returns>
        void LiberarLicencaUsuario (string usuario, long? sistema);

        /// <summary>
        /// Liberação da licença por usuário
        /// </summary>
        /// <remarks>
        /// Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LiberarLicencaUsuarioWithHttpInfo (string usuario, long? sistema);
        /// <summary>
        /// Liberação da licença por token
        /// </summary>
        /// <remarks>
        /// Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns></returns>
        void Logout (string accessToken);

        /// <summary>
        /// Liberação da licença por token
        /// </summary>
        /// <remarks>
        /// Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LogoutWithHttpInfo (string accessToken);
        /// <summary>
        /// Troca a licença específica de um CNPJ
        /// </summary>
        /// <remarks>
        /// Na autenticação não é informado o CNPJ do estabelecimento, API deverá ser chamada quando houver a necessidade de troca de licença para o CNPJ fixado no sistema .
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="cnpj"></param>
        /// <returns></returns>
        void TrocarLicencaByCnpj (string refreshToken, string cnpj);

        /// <summary>
        /// Troca a licença específica de um CNPJ
        /// </summary>
        /// <remarks>
        /// Na autenticação não é informado o CNPJ do estabelecimento, API deverá ser chamada quando houver a necessidade de troca de licença para o CNPJ fixado no sistema .
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="cnpj"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TrocarLicencaByCnpjWithHttpInfo (string refreshToken, string cnpj);
        /// <summary>
        /// Valida informações do token
        /// </summary>
        /// <remarks>
        /// Valida a validade do token e retorna as informações contidas no mesmo.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns></returns>
        void ValidarToken (string accessToken);

        /// <summary>
        /// Valida informações do token
        /// </summary>
        /// <remarks>
        /// Valida a validade do token e retorna as informações contidas no mesmo.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ValidarTokenWithHttpInfo (string accessToken);
        /// <summary>
        /// Valida token x usuário
        /// </summary>
        /// <remarks>
        /// Validar se o token pertence ao usuário e retorna informações do token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns></returns>
        void VerificarTokenUsuario (string usuario, long? sistema);

        /// <summary>
        /// Valida token x usuário
        /// </summary>
        /// <remarks>
        /// Validar se o token pertence ao usuário e retorna informações do token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> VerificarTokenUsuarioWithHttpInfo (string usuario, long? sistema);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Atualiza validade do token
        /// </summary>
        /// <remarks>
        /// Atualiza a validade do token informado retornando novo token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AtualizarTokenAsync (string refreshToken);

        /// <summary>
        /// Atualiza validade do token
        /// </summary>
        /// <remarks>
        /// Atualiza a validade do token informado retornando novo token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AtualizarTokenAsyncWithHttpInfo (string refreshToken);
        /// <summary>
        /// Solicita token
        /// </summary>
        /// <remarks>
        /// Retorna token de autorização para ser utilizado na chamadas das API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autenticacao">autenticacao</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AutenticarAsync (Autenticacao autenticacao);

        /// <summary>
        /// Solicita token
        /// </summary>
        /// <remarks>
        /// Retorna token de autorização para ser utilizado na chamadas das API.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autenticacao">autenticacao</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AutenticarAsyncWithHttpInfo (Autenticacao autenticacao);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="senha"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task IsAdministratorAsync (string usuario, string senha);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="senha"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> IsAdministratorAsyncWithHttpInfo (string usuario, string senha);
        /// <summary>
        /// Liberação da licença por usuário
        /// </summary>
        /// <remarks>
        /// Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LiberarLicencaUsuarioAsync (string usuario, long? sistema);

        /// <summary>
        /// Liberação da licença por usuário
        /// </summary>
        /// <remarks>
        /// Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LiberarLicencaUsuarioAsyncWithHttpInfo (string usuario, long? sistema);
        /// <summary>
        /// Liberação da licença por token
        /// </summary>
        /// <remarks>
        /// Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LogoutAsync (string accessToken);

        /// <summary>
        /// Liberação da licença por token
        /// </summary>
        /// <remarks>
        /// Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LogoutAsyncWithHttpInfo (string accessToken);
        /// <summary>
        /// Troca a licença específica de um CNPJ
        /// </summary>
        /// <remarks>
        /// Na autenticação não é informado o CNPJ do estabelecimento, API deverá ser chamada quando houver a necessidade de troca de licença para o CNPJ fixado no sistema .
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="cnpj"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TrocarLicencaByCnpjAsync (string refreshToken, string cnpj);

        /// <summary>
        /// Troca a licença específica de um CNPJ
        /// </summary>
        /// <remarks>
        /// Na autenticação não é informado o CNPJ do estabelecimento, API deverá ser chamada quando houver a necessidade de troca de licença para o CNPJ fixado no sistema .
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="cnpj"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TrocarLicencaByCnpjAsyncWithHttpInfo (string refreshToken, string cnpj);
        /// <summary>
        /// Valida informações do token
        /// </summary>
        /// <remarks>
        /// Valida a validade do token e retorna as informações contidas no mesmo.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ValidarTokenAsync (string accessToken);

        /// <summary>
        /// Valida informações do token
        /// </summary>
        /// <remarks>
        /// Valida a validade do token e retorna as informações contidas no mesmo.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidarTokenAsyncWithHttpInfo (string accessToken);
        /// <summary>
        /// Valida token x usuário
        /// </summary>
        /// <remarks>
        /// Validar se o token pertence ao usuário e retorna informações do token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task VerificarTokenUsuarioAsync (string usuario, long? sistema);

        /// <summary>
        /// Valida token x usuário
        /// </summary>
        /// <remarks>
        /// Validar se o token pertence ao usuário e retorna informações do token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VerificarTokenUsuarioAsyncWithHttpInfo (string usuario, long? sistema);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AutenticacaoApi : IAutenticacaoApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AutenticacaoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutenticacaoApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutenticacaoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AutenticacaoApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Atualiza validade do token Atualiza a validade do token informado retornando novo token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <returns></returns>
        public void AtualizarToken (string refreshToken)
        {
             AtualizarTokenWithHttpInfo(refreshToken);
        }

        /// <summary>
        /// Atualiza validade do token Atualiza a validade do token informado retornando novo token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AtualizarTokenWithHttpInfo (string refreshToken)
        {
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
                throw new ApiException(400, "Missing required parameter 'refreshToken' when calling AutenticacaoApi->AtualizarToken");

            var localVarPath = "/v1/autenticacao/{refreshToken}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (refreshToken != null) localVarPathParams.Add("refreshToken", this.Configuration.ApiClient.ParameterToString(refreshToken)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AtualizarToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Atualiza validade do token Atualiza a validade do token informado retornando novo token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AtualizarTokenAsync (string refreshToken)
        {
             await AtualizarTokenAsyncWithHttpInfo(refreshToken);

        }

        /// <summary>
        /// Atualiza validade do token Atualiza a validade do token informado retornando novo token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AtualizarTokenAsyncWithHttpInfo (string refreshToken)
        {
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
                throw new ApiException(400, "Missing required parameter 'refreshToken' when calling AutenticacaoApi->AtualizarToken");

            var localVarPath = "/v1/autenticacao/{refreshToken}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (refreshToken != null) localVarPathParams.Add("refreshToken", this.Configuration.ApiClient.ParameterToString(refreshToken)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AtualizarToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Solicita token Retorna token de autorização para ser utilizado na chamadas das API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autenticacao">autenticacao</param>
        /// <returns></returns>
        public void Autenticar (Autenticacao autenticacao)
        {
             AutenticarWithHttpInfo(autenticacao);
        }

        /// <summary>
        /// Solicita token Retorna token de autorização para ser utilizado na chamadas das API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autenticacao">autenticacao</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AutenticarWithHttpInfo (Autenticacao autenticacao)
        {
            // verify the required parameter 'autenticacao' is set
            if (autenticacao == null)
                throw new ApiException(400, "Missing required parameter 'autenticacao' when calling AutenticacaoApi->Autenticar");

            var localVarPath = "/v1/autenticacao";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autenticacao != null && autenticacao.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autenticacao); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autenticacao; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Autenticar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Solicita token Retorna token de autorização para ser utilizado na chamadas das API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autenticacao">autenticacao</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AutenticarAsync (Autenticacao autenticacao)
        {
             await AutenticarAsyncWithHttpInfo(autenticacao);

        }

        /// <summary>
        /// Solicita token Retorna token de autorização para ser utilizado na chamadas das API.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="autenticacao">autenticacao</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AutenticarAsyncWithHttpInfo (Autenticacao autenticacao)
        {
            // verify the required parameter 'autenticacao' is set
            if (autenticacao == null)
                throw new ApiException(400, "Missing required parameter 'autenticacao' when calling AutenticacaoApi->Autenticar");

            var localVarPath = "/v1/autenticacao";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (autenticacao != null && autenticacao.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(autenticacao); // http body (model) parameter
            }
            else
            {
                localVarPostBody = autenticacao; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Autenticar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="senha"></param>
        /// <returns></returns>
        public void IsAdministrator (string usuario, string senha)
        {
             IsAdministratorWithHttpInfo(usuario, senha);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="senha"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> IsAdministratorWithHttpInfo (string usuario, string senha)
        {
            // verify the required parameter 'usuario' is set
            if (usuario == null)
                throw new ApiException(400, "Missing required parameter 'usuario' when calling AutenticacaoApi->IsAdministrator");
            // verify the required parameter 'senha' is set
            if (senha == null)
                throw new ApiException(400, "Missing required parameter 'senha' when calling AutenticacaoApi->IsAdministrator");

            var localVarPath = "/v1/autenticacao/usuarios/{usuario}/senhas/{senha}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usuario != null) localVarPathParams.Add("usuario", this.Configuration.ApiClient.ParameterToString(usuario)); // path parameter
            if (senha != null) localVarPathParams.Add("senha", this.Configuration.ApiClient.ParameterToString(senha)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IsAdministrator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="senha"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task IsAdministratorAsync (string usuario, string senha)
        {
             await IsAdministratorAsyncWithHttpInfo(usuario, senha);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="senha"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> IsAdministratorAsyncWithHttpInfo (string usuario, string senha)
        {
            // verify the required parameter 'usuario' is set
            if (usuario == null)
                throw new ApiException(400, "Missing required parameter 'usuario' when calling AutenticacaoApi->IsAdministrator");
            // verify the required parameter 'senha' is set
            if (senha == null)
                throw new ApiException(400, "Missing required parameter 'senha' when calling AutenticacaoApi->IsAdministrator");

            var localVarPath = "/v1/autenticacao/usuarios/{usuario}/senhas/{senha}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usuario != null) localVarPathParams.Add("usuario", this.Configuration.ApiClient.ParameterToString(usuario)); // path parameter
            if (senha != null) localVarPathParams.Add("senha", this.Configuration.ApiClient.ParameterToString(senha)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IsAdministrator", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Liberação da licença por usuário Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns></returns>
        public void LiberarLicencaUsuario (string usuario, long? sistema)
        {
             LiberarLicencaUsuarioWithHttpInfo(usuario, sistema);
        }

        /// <summary>
        /// Liberação da licença por usuário Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LiberarLicencaUsuarioWithHttpInfo (string usuario, long? sistema)
        {
            // verify the required parameter 'usuario' is set
            if (usuario == null)
                throw new ApiException(400, "Missing required parameter 'usuario' when calling AutenticacaoApi->LiberarLicencaUsuario");
            // verify the required parameter 'sistema' is set
            if (sistema == null)
                throw new ApiException(400, "Missing required parameter 'sistema' when calling AutenticacaoApi->LiberarLicencaUsuario");

            var localVarPath = "/v1/autenticacao/usuarios/{usuario}/sistemas/{sistema}/liberar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usuario != null) localVarPathParams.Add("usuario", this.Configuration.ApiClient.ParameterToString(usuario)); // path parameter
            if (sistema != null) localVarPathParams.Add("sistema", this.Configuration.ApiClient.ParameterToString(sistema)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LiberarLicencaUsuario", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Liberação da licença por usuário Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LiberarLicencaUsuarioAsync (string usuario, long? sistema)
        {
             await LiberarLicencaUsuarioAsyncWithHttpInfo(usuario, sistema);

        }

        /// <summary>
        /// Liberação da licença por usuário Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LiberarLicencaUsuarioAsyncWithHttpInfo (string usuario, long? sistema)
        {
            // verify the required parameter 'usuario' is set
            if (usuario == null)
                throw new ApiException(400, "Missing required parameter 'usuario' when calling AutenticacaoApi->LiberarLicencaUsuario");
            // verify the required parameter 'sistema' is set
            if (sistema == null)
                throw new ApiException(400, "Missing required parameter 'sistema' when calling AutenticacaoApi->LiberarLicencaUsuario");

            var localVarPath = "/v1/autenticacao/usuarios/{usuario}/sistemas/{sistema}/liberar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usuario != null) localVarPathParams.Add("usuario", this.Configuration.ApiClient.ParameterToString(usuario)); // path parameter
            if (sistema != null) localVarPathParams.Add("sistema", this.Configuration.ApiClient.ParameterToString(sistema)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LiberarLicencaUsuario", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Liberação da licença por token Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns></returns>
        public void Logout (string accessToken)
        {
             LogoutWithHttpInfo(accessToken);
        }

        /// <summary>
        /// Liberação da licença por token Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LogoutWithHttpInfo (string accessToken)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling AutenticacaoApi->Logout");

            var localVarPath = "/v1/autenticacao/{accessToken}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessToken != null) localVarPathParams.Add("accessToken", this.Configuration.ApiClient.ParameterToString(accessToken)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Liberação da licença por token Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LogoutAsync (string accessToken)
        {
             await LogoutAsyncWithHttpInfo(accessToken);

        }

        /// <summary>
        /// Liberação da licença por token Recurso responsável por fazer o logout do usuario liberando sua licença.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LogoutAsyncWithHttpInfo (string accessToken)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling AutenticacaoApi->Logout");

            var localVarPath = "/v1/autenticacao/{accessToken}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessToken != null) localVarPathParams.Add("accessToken", this.Configuration.ApiClient.ParameterToString(accessToken)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Troca a licença específica de um CNPJ Na autenticação não é informado o CNPJ do estabelecimento, API deverá ser chamada quando houver a necessidade de troca de licença para o CNPJ fixado no sistema .
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="cnpj"></param>
        /// <returns></returns>
        public void TrocarLicencaByCnpj (string refreshToken, string cnpj)
        {
             TrocarLicencaByCnpjWithHttpInfo(refreshToken, cnpj);
        }

        /// <summary>
        /// Troca a licença específica de um CNPJ Na autenticação não é informado o CNPJ do estabelecimento, API deverá ser chamada quando houver a necessidade de troca de licença para o CNPJ fixado no sistema .
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="cnpj"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TrocarLicencaByCnpjWithHttpInfo (string refreshToken, string cnpj)
        {
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
                throw new ApiException(400, "Missing required parameter 'refreshToken' when calling AutenticacaoApi->TrocarLicencaByCnpj");
            // verify the required parameter 'cnpj' is set
            if (cnpj == null)
                throw new ApiException(400, "Missing required parameter 'cnpj' when calling AutenticacaoApi->TrocarLicencaByCnpj");

            var localVarPath = "/v1/autenticacao/{refreshToken}/CNPJ/{cnpj}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (refreshToken != null) localVarPathParams.Add("refreshToken", this.Configuration.ApiClient.ParameterToString(refreshToken)); // path parameter
            if (cnpj != null) localVarPathParams.Add("cnpj", this.Configuration.ApiClient.ParameterToString(cnpj)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrocarLicencaByCnpj", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Troca a licença específica de um CNPJ Na autenticação não é informado o CNPJ do estabelecimento, API deverá ser chamada quando houver a necessidade de troca de licença para o CNPJ fixado no sistema .
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="cnpj"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TrocarLicencaByCnpjAsync (string refreshToken, string cnpj)
        {
             await TrocarLicencaByCnpjAsyncWithHttpInfo(refreshToken, cnpj);

        }

        /// <summary>
        /// Troca a licença específica de um CNPJ Na autenticação não é informado o CNPJ do estabelecimento, API deverá ser chamada quando houver a necessidade de troca de licença para o CNPJ fixado no sistema .
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshToken"></param>
        /// <param name="cnpj"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TrocarLicencaByCnpjAsyncWithHttpInfo (string refreshToken, string cnpj)
        {
            // verify the required parameter 'refreshToken' is set
            if (refreshToken == null)
                throw new ApiException(400, "Missing required parameter 'refreshToken' when calling AutenticacaoApi->TrocarLicencaByCnpj");
            // verify the required parameter 'cnpj' is set
            if (cnpj == null)
                throw new ApiException(400, "Missing required parameter 'cnpj' when calling AutenticacaoApi->TrocarLicencaByCnpj");

            var localVarPath = "/v1/autenticacao/{refreshToken}/CNPJ/{cnpj}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (refreshToken != null) localVarPathParams.Add("refreshToken", this.Configuration.ApiClient.ParameterToString(refreshToken)); // path parameter
            if (cnpj != null) localVarPathParams.Add("cnpj", this.Configuration.ApiClient.ParameterToString(cnpj)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TrocarLicencaByCnpj", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Valida informações do token Valida a validade do token e retorna as informações contidas no mesmo.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns></returns>
        public void ValidarToken (string accessToken)
        {
             ValidarTokenWithHttpInfo(accessToken);
        }

        /// <summary>
        /// Valida informações do token Valida a validade do token e retorna as informações contidas no mesmo.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ValidarTokenWithHttpInfo (string accessToken)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling AutenticacaoApi->ValidarToken");

            var localVarPath = "/v1/autenticacao/{accessToken}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessToken != null) localVarPathParams.Add("accessToken", this.Configuration.ApiClient.ParameterToString(accessToken)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidarToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Valida informações do token Valida a validade do token e retorna as informações contidas no mesmo.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidarTokenAsync (string accessToken)
        {
             await ValidarTokenAsyncWithHttpInfo(accessToken);

        }

        /// <summary>
        /// Valida informações do token Valida a validade do token e retorna as informações contidas no mesmo.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessToken"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ValidarTokenAsyncWithHttpInfo (string accessToken)
        {
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling AutenticacaoApi->ValidarToken");

            var localVarPath = "/v1/autenticacao/{accessToken}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessToken != null) localVarPathParams.Add("accessToken", this.Configuration.ApiClient.ParameterToString(accessToken)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidarToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Valida token x usuário Validar se o token pertence ao usuário e retorna informações do token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns></returns>
        public void VerificarTokenUsuario (string usuario, long? sistema)
        {
             VerificarTokenUsuarioWithHttpInfo(usuario, sistema);
        }

        /// <summary>
        /// Valida token x usuário Validar se o token pertence ao usuário e retorna informações do token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> VerificarTokenUsuarioWithHttpInfo (string usuario, long? sistema)
        {
            // verify the required parameter 'usuario' is set
            if (usuario == null)
                throw new ApiException(400, "Missing required parameter 'usuario' when calling AutenticacaoApi->VerificarTokenUsuario");
            // verify the required parameter 'sistema' is set
            if (sistema == null)
                throw new ApiException(400, "Missing required parameter 'sistema' when calling AutenticacaoApi->VerificarTokenUsuario");

            var localVarPath = "/v1/autenticacao/usuarios/{usuario}/sistemas/{sistema}/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usuario != null) localVarPathParams.Add("usuario", this.Configuration.ApiClient.ParameterToString(usuario)); // path parameter
            if (sistema != null) localVarPathParams.Add("sistema", this.Configuration.ApiClient.ParameterToString(sistema)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerificarTokenUsuario", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Valida token x usuário Validar se o token pertence ao usuário e retorna informações do token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task VerificarTokenUsuarioAsync (string usuario, long? sistema)
        {
             await VerificarTokenUsuarioAsyncWithHttpInfo(usuario, sistema);

        }

        /// <summary>
        /// Valida token x usuário Validar se o token pertence ao usuário e retorna informações do token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="usuario"></param>
        /// <param name="sistema"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VerificarTokenUsuarioAsyncWithHttpInfo (string usuario, long? sistema)
        {
            // verify the required parameter 'usuario' is set
            if (usuario == null)
                throw new ApiException(400, "Missing required parameter 'usuario' when calling AutenticacaoApi->VerificarTokenUsuario");
            // verify the required parameter 'sistema' is set
            if (sistema == null)
                throw new ApiException(400, "Missing required parameter 'sistema' when calling AutenticacaoApi->VerificarTokenUsuario");

            var localVarPath = "/v1/autenticacao/usuarios/{usuario}/sistemas/{sistema}/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (usuario != null) localVarPathParams.Add("usuario", this.Configuration.ApiClient.ParameterToString(usuario)); // path parameter
            if (sistema != null) localVarPathParams.Add("sistema", this.Configuration.ApiClient.ParameterToString(sistema)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerificarTokenUsuario", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
