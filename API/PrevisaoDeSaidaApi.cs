/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPrevisaoDeSaidaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <returns></returns>
        void CountByQuery (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CountByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa);
        /// <summary>
        /// Adiciona uma nova previsão de saida
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns></returns>
        void CreatePrevisaoSaida (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2);

        /// <summary>
        /// Adiciona uma nova previsão de saida
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreatePrevisaoSaidaWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2);
        /// <summary>
        /// Retorna a divergência de atendimento da previsão de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações.
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns></returns>
        void DivergenciaAtendimento (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida);

        /// <summary>
        /// Retorna a divergência de atendimento da previsão de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações.
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DivergenciaAtendimentoWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns></returns>
        void FindAll (long? codigoEstabelecimento, string codigoDepositante);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FindAllWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante);
        /// <summary>
        /// Retorna previsão de saída por Empresa/Tipo/Série/Número
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>PrevisaoSaidaDTO</returns>
        PrevisaoSaidaDTO FindPrevisaoSaidaByID (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida);

        /// <summary>
        /// Retorna previsão de saída por Empresa/Tipo/Série/Número
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>ApiResponse of PrevisaoSaidaDTO</returns>
        ApiResponse<PrevisaoSaidaDTO> FindPrevisaoSaidaByIDWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoSaida"></param>
        /// <returns></returns>
        void Remove (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoSaida, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoSaida);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoSaida"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoSaida, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoSaida);
        /// <summary>
        /// Exclui uma previsão de saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns></returns>
        void RemovePrevisaoSaida (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida);

        /// <summary>
        /// Exclui uma previsão de saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemovePrevisaoSaidaWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida);
        /// <summary>
        /// Altera uma previsão de saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns></returns>
        void UpdatePrevisaoSaida (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2);

        /// <summary>
        /// Altera uma previsão de saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdatePrevisaoSaidaWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CountByQueryAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CountByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa);
        /// <summary>
        /// Adiciona uma nova previsão de saida
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreatePrevisaoSaidaAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2);

        /// <summary>
        /// Adiciona uma nova previsão de saida
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreatePrevisaoSaidaAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2);
        /// <summary>
        /// Retorna a divergência de atendimento da previsão de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações.
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DivergenciaAtendimentoAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida);

        /// <summary>
        /// Retorna a divergência de atendimento da previsão de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações.
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DivergenciaAtendimentoAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FindAllAsync (long? codigoEstabelecimento, string codigoDepositante);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FindAllAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante);
        /// <summary>
        /// Retorna previsão de saída por Empresa/Tipo/Série/Número
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>Task of PrevisaoSaidaDTO</returns>
        System.Threading.Tasks.Task<PrevisaoSaidaDTO> FindPrevisaoSaidaByIDAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida);

        /// <summary>
        /// Retorna previsão de saída por Empresa/Tipo/Série/Número
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>Task of ApiResponse (PrevisaoSaidaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PrevisaoSaidaDTO>> FindPrevisaoSaidaByIDAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoSaida"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoSaida, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoSaida);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoSaida"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoSaida, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoSaida);
        /// <summary>
        /// Exclui uma previsão de saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemovePrevisaoSaidaAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida);

        /// <summary>
        /// Exclui uma previsão de saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemovePrevisaoSaidaAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida);
        /// <summary>
        /// Altera uma previsão de saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdatePrevisaoSaidaAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2);

        /// <summary>
        /// Altera uma previsão de saída
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePrevisaoSaidaAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PrevisaoDeSaidaApi : IPrevisaoDeSaidaApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PrevisaoDeSaidaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PrevisaoDeSaidaApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrevisaoDeSaidaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PrevisaoDeSaidaApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <returns></returns>
        public void CountByQuery (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa)
        {
             CountByQueryWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CountByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->CountByQuery");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->CountByQuery");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeSaidaApi->CountByQuery");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CountByQueryAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa)
        {
             await CountByQueryAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa);

        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CountByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->CountByQuery");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->CountByQuery");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeSaidaApi->CountByQuery");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adiciona uma nova previsão de saida Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns></returns>
        public void CreatePrevisaoSaida (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2)
        {
             CreatePrevisaoSaidaWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoSaida, previsaoSaida2);
        }

        /// <summary>
        /// Adiciona uma nova previsão de saida Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreatePrevisaoSaidaWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->CreatePrevisaoSaida");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->CreatePrevisaoSaida");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeSaidaApi->CreatePrevisaoSaida");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeSaidaApi->CreatePrevisaoSaida");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeSaidaApi->CreatePrevisaoSaida");
            // verify the required parameter 'previsaoSaida' is set
            if (previsaoSaida == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida' when calling PrevisaoDeSaidaApi->CreatePrevisaoSaida");
            // verify the required parameter 'previsaoSaida2' is set
            if (previsaoSaida2 == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida2' when calling PrevisaoDeSaidaApi->CreatePrevisaoSaida");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoSaida != null) localVarPathParams.Add("previsaoSaida", this.Configuration.ApiClient.ParameterToString(previsaoSaida)); // path parameter
            if (previsaoSaida2 != null && previsaoSaida2.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(previsaoSaida2); // http body (model) parameter
            }
            else
            {
                localVarPostBody = previsaoSaida2; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePrevisaoSaida", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adiciona uma nova previsão de saida Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreatePrevisaoSaidaAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2)
        {
             await CreatePrevisaoSaidaAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoSaida, previsaoSaida2);

        }

        /// <summary>
        /// Adiciona uma nova previsão de saida Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreatePrevisaoSaidaAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->CreatePrevisaoSaida");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->CreatePrevisaoSaida");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeSaidaApi->CreatePrevisaoSaida");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeSaidaApi->CreatePrevisaoSaida");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeSaidaApi->CreatePrevisaoSaida");
            // verify the required parameter 'previsaoSaida' is set
            if (previsaoSaida == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida' when calling PrevisaoDeSaidaApi->CreatePrevisaoSaida");
            // verify the required parameter 'previsaoSaida2' is set
            if (previsaoSaida2 == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida2' when calling PrevisaoDeSaidaApi->CreatePrevisaoSaida");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoSaida != null) localVarPathParams.Add("previsaoSaida", this.Configuration.ApiClient.ParameterToString(previsaoSaida)); // path parameter
            if (previsaoSaida2 != null && previsaoSaida2.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(previsaoSaida2); // http body (model) parameter
            }
            else
            {
                localVarPostBody = previsaoSaida2; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePrevisaoSaida", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna a divergência de atendimento da previsão de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações. Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns></returns>
        public void DivergenciaAtendimento (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida)
        {
             DivergenciaAtendimentoWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoSaida);
        }

        /// <summary>
        /// Retorna a divergência de atendimento da previsão de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações. Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DivergenciaAtendimentoWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'previsaoSaida' is set
            if (previsaoSaida == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida' when calling PrevisaoDeSaidaApi->DivergenciaAtendimento");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}/divergencia-atendimento/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoSaida != null) localVarPathParams.Add("previsaoSaida", this.Configuration.ApiClient.ParameterToString(previsaoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DivergenciaAtendimento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna a divergência de atendimento da previsão de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações. Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DivergenciaAtendimentoAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida)
        {
             await DivergenciaAtendimentoAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoSaida);

        }

        /// <summary>
        /// Retorna a divergência de atendimento da previsão de saída. Considera as reservas realizadas e também o saldo baixado para atendimento das solicitações. Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DivergenciaAtendimentoAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeSaidaApi->DivergenciaAtendimento");
            // verify the required parameter 'previsaoSaida' is set
            if (previsaoSaida == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida' when calling PrevisaoDeSaidaApi->DivergenciaAtendimento");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}/divergencia-atendimento/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoSaida != null) localVarPathParams.Add("previsaoSaida", this.Configuration.ApiClient.ParameterToString(previsaoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DivergenciaAtendimento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns></returns>
        public void FindAll (long? codigoEstabelecimento, string codigoDepositante)
        {
             FindAllWithHttpInfo(codigoEstabelecimento, codigoDepositante);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FindAllWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->FindAll");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->FindAll");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FindAllAsync (long? codigoEstabelecimento, string codigoDepositante)
        {
             await FindAllAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante);

        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FindAllAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->FindAll");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->FindAll");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna previsão de saída por Empresa/Tipo/Série/Número Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>PrevisaoSaidaDTO</returns>
        public PrevisaoSaidaDTO FindPrevisaoSaidaByID (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida)
        {
             ApiResponse<PrevisaoSaidaDTO> localVarResponse = FindPrevisaoSaidaByIDWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoSaida);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna previsão de saída por Empresa/Tipo/Série/Número Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>ApiResponse of PrevisaoSaidaDTO</returns>
        public ApiResponse< PrevisaoSaidaDTO > FindPrevisaoSaidaByIDWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->FindPrevisaoSaidaByID");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->FindPrevisaoSaidaByID");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeSaidaApi->FindPrevisaoSaidaByID");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeSaidaApi->FindPrevisaoSaidaByID");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeSaidaApi->FindPrevisaoSaidaByID");
            // verify the required parameter 'previsaoSaida' is set
            if (previsaoSaida == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida' when calling PrevisaoDeSaidaApi->FindPrevisaoSaidaByID");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoSaida != null) localVarPathParams.Add("previsaoSaida", this.Configuration.ApiClient.ParameterToString(previsaoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindPrevisaoSaidaByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrevisaoSaidaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrevisaoSaidaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrevisaoSaidaDTO)));
        }

        /// <summary>
        /// Retorna previsão de saída por Empresa/Tipo/Série/Número Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>Task of PrevisaoSaidaDTO</returns>
        public async System.Threading.Tasks.Task<PrevisaoSaidaDTO> FindPrevisaoSaidaByIDAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida)
        {
             ApiResponse<PrevisaoSaidaDTO> localVarResponse = await FindPrevisaoSaidaByIDAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoSaida);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna previsão de saída por Empresa/Tipo/Série/Número Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>Task of ApiResponse (PrevisaoSaidaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PrevisaoSaidaDTO>> FindPrevisaoSaidaByIDAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->FindPrevisaoSaidaByID");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->FindPrevisaoSaidaByID");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeSaidaApi->FindPrevisaoSaidaByID");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeSaidaApi->FindPrevisaoSaidaByID");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeSaidaApi->FindPrevisaoSaidaByID");
            // verify the required parameter 'previsaoSaida' is set
            if (previsaoSaida == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida' when calling PrevisaoDeSaidaApi->FindPrevisaoSaidaByID");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoSaida != null) localVarPathParams.Add("previsaoSaida", this.Configuration.ApiClient.ParameterToString(previsaoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindPrevisaoSaidaByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PrevisaoSaidaDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PrevisaoSaidaDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PrevisaoSaidaDTO)));
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoSaida"></param>
        /// <returns></returns>
        public void Remove (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoSaida, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoSaida)
        {
             RemoveWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, previsaoSaida, tipoDocumento, serieDocumento, sequenciaPrevisaoSaida);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoSaida"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoSaida, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->Remove");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->Remove");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeSaidaApi->Remove");
            // verify the required parameter 'previsaoSaida' is set
            if (previsaoSaida == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida' when calling PrevisaoDeSaidaApi->Remove");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeSaidaApi->Remove");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeSaidaApi->Remove");
            // verify the required parameter 'sequenciaPrevisaoSaida' is set
            if (sequenciaPrevisaoSaida == null)
                throw new ApiException(400, "Missing required parameter 'sequenciaPrevisaoSaida' when calling PrevisaoDeSaidaApi->Remove");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoSaida}/{sequenciaPrevisaoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (previsaoSaida != null) localVarPathParams.Add("previsaoSaida", this.Configuration.ApiClient.ParameterToString(previsaoSaida)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (sequenciaPrevisaoSaida != null) localVarPathParams.Add("sequenciaPrevisaoSaida", this.Configuration.ApiClient.ParameterToString(sequenciaPrevisaoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoSaida"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoSaida, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoSaida)
        {
             await RemoveAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, previsaoSaida, tipoDocumento, serieDocumento, sequenciaPrevisaoSaida);

        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoSaida"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoSaida, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->Remove");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->Remove");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeSaidaApi->Remove");
            // verify the required parameter 'previsaoSaida' is set
            if (previsaoSaida == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida' when calling PrevisaoDeSaidaApi->Remove");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeSaidaApi->Remove");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeSaidaApi->Remove");
            // verify the required parameter 'sequenciaPrevisaoSaida' is set
            if (sequenciaPrevisaoSaida == null)
                throw new ApiException(400, "Missing required parameter 'sequenciaPrevisaoSaida' when calling PrevisaoDeSaidaApi->Remove");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoSaida}/{sequenciaPrevisaoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (previsaoSaida != null) localVarPathParams.Add("previsaoSaida", this.Configuration.ApiClient.ParameterToString(previsaoSaida)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (sequenciaPrevisaoSaida != null) localVarPathParams.Add("sequenciaPrevisaoSaida", this.Configuration.ApiClient.ParameterToString(sequenciaPrevisaoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Exclui uma previsão de saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns></returns>
        public void RemovePrevisaoSaida (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida)
        {
             RemovePrevisaoSaidaWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoSaida);
        }

        /// <summary>
        /// Exclui uma previsão de saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemovePrevisaoSaidaWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->RemovePrevisaoSaida");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->RemovePrevisaoSaida");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeSaidaApi->RemovePrevisaoSaida");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeSaidaApi->RemovePrevisaoSaida");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeSaidaApi->RemovePrevisaoSaida");
            // verify the required parameter 'previsaoSaida' is set
            if (previsaoSaida == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida' when calling PrevisaoDeSaidaApi->RemovePrevisaoSaida");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoSaida != null) localVarPathParams.Add("previsaoSaida", this.Configuration.ApiClient.ParameterToString(previsaoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePrevisaoSaida", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Exclui uma previsão de saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemovePrevisaoSaidaAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida)
        {
             await RemovePrevisaoSaidaAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoSaida);

        }

        /// <summary>
        /// Exclui uma previsão de saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemovePrevisaoSaidaAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->RemovePrevisaoSaida");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->RemovePrevisaoSaida");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeSaidaApi->RemovePrevisaoSaida");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeSaidaApi->RemovePrevisaoSaida");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeSaidaApi->RemovePrevisaoSaida");
            // verify the required parameter 'previsaoSaida' is set
            if (previsaoSaida == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida' when calling PrevisaoDeSaidaApi->RemovePrevisaoSaida");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoSaida != null) localVarPathParams.Add("previsaoSaida", this.Configuration.ApiClient.ParameterToString(previsaoSaida)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovePrevisaoSaida", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Altera uma previsão de saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns></returns>
        public void UpdatePrevisaoSaida (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2)
        {
             UpdatePrevisaoSaidaWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoSaida, previsaoSaida2);
        }

        /// <summary>
        /// Altera uma previsão de saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdatePrevisaoSaidaWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->UpdatePrevisaoSaida");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->UpdatePrevisaoSaida");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeSaidaApi->UpdatePrevisaoSaida");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeSaidaApi->UpdatePrevisaoSaida");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeSaidaApi->UpdatePrevisaoSaida");
            // verify the required parameter 'previsaoSaida' is set
            if (previsaoSaida == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida' when calling PrevisaoDeSaidaApi->UpdatePrevisaoSaida");
            // verify the required parameter 'previsaoSaida2' is set
            if (previsaoSaida2 == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida2' when calling PrevisaoDeSaidaApi->UpdatePrevisaoSaida");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoSaida != null) localVarPathParams.Add("previsaoSaida", this.Configuration.ApiClient.ParameterToString(previsaoSaida)); // path parameter
            if (previsaoSaida2 != null && previsaoSaida2.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(previsaoSaida2); // http body (model) parameter
            }
            else
            {
                localVarPostBody = previsaoSaida2; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePrevisaoSaida", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Altera uma previsão de saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdatePrevisaoSaidaAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2)
        {
             await UpdatePrevisaoSaidaAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoSaida, previsaoSaida2);

        }

        /// <summary>
        /// Altera uma previsão de saída Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoSaida"></param>
        /// <param name="previsaoSaida2">previsaoSaida</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdatePrevisaoSaidaAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoSaida, PrevisaoSaidaDTO previsaoSaida2)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeSaidaApi->UpdatePrevisaoSaida");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeSaidaApi->UpdatePrevisaoSaida");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeSaidaApi->UpdatePrevisaoSaida");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeSaidaApi->UpdatePrevisaoSaida");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeSaidaApi->UpdatePrevisaoSaida");
            // verify the required parameter 'previsaoSaida' is set
            if (previsaoSaida == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida' when calling PrevisaoDeSaidaApi->UpdatePrevisaoSaida");
            // verify the required parameter 'previsaoSaida2' is set
            if (previsaoSaida2 == null)
                throw new ApiException(400, "Missing required parameter 'previsaoSaida2' when calling PrevisaoDeSaidaApi->UpdatePrevisaoSaida");

            var localVarPath = "/v1/previsao-saida/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoSaida}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoSaida != null) localVarPathParams.Add("previsaoSaida", this.Configuration.ApiClient.ParameterToString(previsaoSaida)); // path parameter
            if (previsaoSaida2 != null && previsaoSaida2.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(previsaoSaida2); // http body (model) parameter
            }
            else
            {
                localVarPostBody = previsaoSaida2; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePrevisaoSaida", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
