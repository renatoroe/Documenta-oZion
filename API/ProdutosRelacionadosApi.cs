/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProdutosRelacionadosApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Conta os produtos relacionados. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>long?</returns>
        long? CountByQuery ();

        /// <summary>
        /// Conta os produtos relacionados. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of long?</returns>
        ApiResponse<long?> CountByQueryWithHttpInfo ();
        /// <summary>
        /// Relaciona um produto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns></returns>
        void Create (ProdutoRelacionado produtoRelacionado);

        /// <summary>
        /// Relaciona um produto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateWithHttpInfo (ProdutoRelacionado produtoRelacionado);
        /// <summary>
        /// Retorna o produto relacionado através dos atributos identificadores
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns>ProdutoRelacionado</returns>
        ProdutoRelacionado FindById (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado);

        /// <summary>
        /// Retorna o produto relacionado através dos atributos identificadores
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns>ApiResponse of ProdutoRelacionado</returns>
        ApiResponse<ProdutoRelacionado> FindByIdWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado);
        /// <summary>
        /// Retorna os produtos relacionados. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProdutoRelacionado&gt;</returns>
        List<ProdutoRelacionado> FindByQuery ();

        /// <summary>
        /// Retorna os produtos relacionados. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProdutoRelacionado&gt;</returns>
        ApiResponse<List<ProdutoRelacionado>> FindByQueryWithHttpInfo ();
        /// <summary>
        /// Exclui uma relação de produto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns></returns>
        void Remove (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado);

        /// <summary>
        /// Exclui uma relação de produto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado);
        /// <summary>
        /// Altera o relacionamento de um produto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns></returns>
        void Update (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado, ProdutoRelacionado produtoRelacionado);

        /// <summary>
        /// Altera o relacionamento de um produto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado, ProdutoRelacionado produtoRelacionado);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Conta os produtos relacionados. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of long?</returns>
        System.Threading.Tasks.Task<long?> CountByQueryAsync ();

        /// <summary>
        /// Conta os produtos relacionados. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (long?)</returns>
        System.Threading.Tasks.Task<ApiResponse<long?>> CountByQueryAsyncWithHttpInfo ();
        /// <summary>
        /// Relaciona um produto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateAsync (ProdutoRelacionado produtoRelacionado);

        /// <summary>
        /// Relaciona um produto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (ProdutoRelacionado produtoRelacionado);
        /// <summary>
        /// Retorna o produto relacionado através dos atributos identificadores
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns>Task of ProdutoRelacionado</returns>
        System.Threading.Tasks.Task<ProdutoRelacionado> FindByIdAsync (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado);

        /// <summary>
        /// Retorna o produto relacionado através dos atributos identificadores
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns>Task of ApiResponse (ProdutoRelacionado)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProdutoRelacionado>> FindByIdAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado);
        /// <summary>
        /// Retorna os produtos relacionados. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProdutoRelacionado&gt;</returns>
        System.Threading.Tasks.Task<List<ProdutoRelacionado>> FindByQueryAsync ();

        /// <summary>
        /// Retorna os produtos relacionados. Filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProdutoRelacionado&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProdutoRelacionado>>> FindByQueryAsyncWithHttpInfo ();
        /// <summary>
        /// Exclui uma relação de produto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAsync (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado);

        /// <summary>
        /// Exclui uma relação de produto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado);
        /// <summary>
        /// Altera o relacionamento de um produto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAsync (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado, ProdutoRelacionado produtoRelacionado);

        /// <summary>
        /// Altera o relacionamento de um produto
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado, ProdutoRelacionado produtoRelacionado);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProdutosRelacionadosApi : IProdutosRelacionadosApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProdutosRelacionadosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProdutosRelacionadosApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProdutosRelacionadosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProdutosRelacionadosApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Conta os produtos relacionados. Filtrados através de uma query string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>long?</returns>
        public long? CountByQuery ()
        {
             ApiResponse<long?> localVarResponse = CountByQueryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Conta os produtos relacionados. Filtrados através de uma query string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of long?</returns>
        public ApiResponse< long? > CountByQueryWithHttpInfo ()
        {

            var localVarPath = "/v1/produtos-relacionados/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Conta os produtos relacionados. Filtrados através de uma query string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of long?</returns>
        public async System.Threading.Tasks.Task<long?> CountByQueryAsync ()
        {
             ApiResponse<long?> localVarResponse = await CountByQueryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Conta os produtos relacionados. Filtrados através de uma query string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (long?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<long?>> CountByQueryAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/produtos-relacionados/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<long?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (long?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(long?)));
        }

        /// <summary>
        /// Relaciona um produto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns></returns>
        public void Create (ProdutoRelacionado produtoRelacionado)
        {
             CreateWithHttpInfo(produtoRelacionado);
        }

        /// <summary>
        /// Relaciona um produto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateWithHttpInfo (ProdutoRelacionado produtoRelacionado)
        {
            // verify the required parameter 'produtoRelacionado' is set
            if (produtoRelacionado == null)
                throw new ApiException(400, "Missing required parameter 'produtoRelacionado' when calling ProdutosRelacionadosApi->Create");

            var localVarPath = "/v1/produtos-relacionados";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (produtoRelacionado != null && produtoRelacionado.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(produtoRelacionado); // http body (model) parameter
            }
            else
            {
                localVarPostBody = produtoRelacionado; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Relaciona um produto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateAsync (ProdutoRelacionado produtoRelacionado)
        {
             await CreateAsyncWithHttpInfo(produtoRelacionado);

        }

        /// <summary>
        /// Relaciona um produto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (ProdutoRelacionado produtoRelacionado)
        {
            // verify the required parameter 'produtoRelacionado' is set
            if (produtoRelacionado == null)
                throw new ApiException(400, "Missing required parameter 'produtoRelacionado' when calling ProdutosRelacionadosApi->Create");

            var localVarPath = "/v1/produtos-relacionados";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (produtoRelacionado != null && produtoRelacionado.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(produtoRelacionado); // http body (model) parameter
            }
            else
            {
                localVarPostBody = produtoRelacionado; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna o produto relacionado através dos atributos identificadores 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns>ProdutoRelacionado</returns>
        public ProdutoRelacionado FindById (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado)
        {
             ApiResponse<ProdutoRelacionado> localVarResponse = FindByIdWithHttpInfo(codigoEmpresa, codigoProduto, tipoUc, codigoProdutoRelacionado);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna o produto relacionado através dos atributos identificadores 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns>ApiResponse of ProdutoRelacionado</returns>
        public ApiResponse< ProdutoRelacionado > FindByIdWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling ProdutosRelacionadosApi->FindById");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling ProdutosRelacionadosApi->FindById");
            // verify the required parameter 'tipoUc' is set
            if (tipoUc == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc' when calling ProdutosRelacionadosApi->FindById");
            // verify the required parameter 'codigoProdutoRelacionado' is set
            if (codigoProdutoRelacionado == null)
                throw new ApiException(400, "Missing required parameter 'codigoProdutoRelacionado' when calling ProdutosRelacionadosApi->FindById");

            var localVarPath = "/v1/produtos-relacionados/{codigoEmpresa}/{codigoProduto}/{tipoUc}/{codigoProdutoRelacionado}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (tipoUc != null) localVarPathParams.Add("tipoUc", this.Configuration.ApiClient.ParameterToString(tipoUc)); // path parameter
            if (codigoProdutoRelacionado != null) localVarPathParams.Add("codigoProdutoRelacionado", this.Configuration.ApiClient.ParameterToString(codigoProdutoRelacionado)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProdutoRelacionado>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProdutoRelacionado) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProdutoRelacionado)));
        }

        /// <summary>
        /// Retorna o produto relacionado através dos atributos identificadores 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns>Task of ProdutoRelacionado</returns>
        public async System.Threading.Tasks.Task<ProdutoRelacionado> FindByIdAsync (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado)
        {
             ApiResponse<ProdutoRelacionado> localVarResponse = await FindByIdAsyncWithHttpInfo(codigoEmpresa, codigoProduto, tipoUc, codigoProdutoRelacionado);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna o produto relacionado através dos atributos identificadores 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns>Task of ApiResponse (ProdutoRelacionado)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProdutoRelacionado>> FindByIdAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling ProdutosRelacionadosApi->FindById");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling ProdutosRelacionadosApi->FindById");
            // verify the required parameter 'tipoUc' is set
            if (tipoUc == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc' when calling ProdutosRelacionadosApi->FindById");
            // verify the required parameter 'codigoProdutoRelacionado' is set
            if (codigoProdutoRelacionado == null)
                throw new ApiException(400, "Missing required parameter 'codigoProdutoRelacionado' when calling ProdutosRelacionadosApi->FindById");

            var localVarPath = "/v1/produtos-relacionados/{codigoEmpresa}/{codigoProduto}/{tipoUc}/{codigoProdutoRelacionado}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (tipoUc != null) localVarPathParams.Add("tipoUc", this.Configuration.ApiClient.ParameterToString(tipoUc)); // path parameter
            if (codigoProdutoRelacionado != null) localVarPathParams.Add("codigoProdutoRelacionado", this.Configuration.ApiClient.ParameterToString(codigoProdutoRelacionado)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProdutoRelacionado>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProdutoRelacionado) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProdutoRelacionado)));
        }

        /// <summary>
        /// Retorna os produtos relacionados. Filtrados através de uma query string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProdutoRelacionado&gt;</returns>
        public List<ProdutoRelacionado> FindByQuery ()
        {
             ApiResponse<List<ProdutoRelacionado>> localVarResponse = FindByQueryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna os produtos relacionados. Filtrados através de uma query string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProdutoRelacionado&gt;</returns>
        public ApiResponse< List<ProdutoRelacionado> > FindByQueryWithHttpInfo ()
        {

            var localVarPath = "/v1/produtos-relacionados";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProdutoRelacionado>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProdutoRelacionado>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProdutoRelacionado>)));
        }

        /// <summary>
        /// Retorna os produtos relacionados. Filtrados através de uma query string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ProdutoRelacionado&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProdutoRelacionado>> FindByQueryAsync ()
        {
             ApiResponse<List<ProdutoRelacionado>> localVarResponse = await FindByQueryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna os produtos relacionados. Filtrados através de uma query string 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ProdutoRelacionado&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProdutoRelacionado>>> FindByQueryAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/produtos-relacionados";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProdutoRelacionado>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProdutoRelacionado>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProdutoRelacionado>)));
        }

        /// <summary>
        /// Exclui uma relação de produto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns></returns>
        public void Remove (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado)
        {
             RemoveWithHttpInfo(codigoEmpresa, codigoProduto, tipoUc, codigoProdutoRelacionado);
        }

        /// <summary>
        /// Exclui uma relação de produto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling ProdutosRelacionadosApi->Remove");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling ProdutosRelacionadosApi->Remove");
            // verify the required parameter 'tipoUc' is set
            if (tipoUc == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc' when calling ProdutosRelacionadosApi->Remove");
            // verify the required parameter 'codigoProdutoRelacionado' is set
            if (codigoProdutoRelacionado == null)
                throw new ApiException(400, "Missing required parameter 'codigoProdutoRelacionado' when calling ProdutosRelacionadosApi->Remove");

            var localVarPath = "/v1/produtos-relacionados/{codigoEmpresa}/{codigoProduto}/{tipoUc}/{codigoProdutoRelacionado}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (tipoUc != null) localVarPathParams.Add("tipoUc", this.Configuration.ApiClient.ParameterToString(tipoUc)); // path parameter
            if (codigoProdutoRelacionado != null) localVarPathParams.Add("codigoProdutoRelacionado", this.Configuration.ApiClient.ParameterToString(codigoProdutoRelacionado)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Exclui uma relação de produto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAsync (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado)
        {
             await RemoveAsyncWithHttpInfo(codigoEmpresa, codigoProduto, tipoUc, codigoProdutoRelacionado);

        }

        /// <summary>
        /// Exclui uma relação de produto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling ProdutosRelacionadosApi->Remove");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling ProdutosRelacionadosApi->Remove");
            // verify the required parameter 'tipoUc' is set
            if (tipoUc == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc' when calling ProdutosRelacionadosApi->Remove");
            // verify the required parameter 'codigoProdutoRelacionado' is set
            if (codigoProdutoRelacionado == null)
                throw new ApiException(400, "Missing required parameter 'codigoProdutoRelacionado' when calling ProdutosRelacionadosApi->Remove");

            var localVarPath = "/v1/produtos-relacionados/{codigoEmpresa}/{codigoProduto}/{tipoUc}/{codigoProdutoRelacionado}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (tipoUc != null) localVarPathParams.Add("tipoUc", this.Configuration.ApiClient.ParameterToString(tipoUc)); // path parameter
            if (codigoProdutoRelacionado != null) localVarPathParams.Add("codigoProdutoRelacionado", this.Configuration.ApiClient.ParameterToString(codigoProdutoRelacionado)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Altera o relacionamento de um produto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns></returns>
        public void Update (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado, ProdutoRelacionado produtoRelacionado)
        {
             UpdateWithHttpInfo(codigoEmpresa, codigoProduto, tipoUc, codigoProdutoRelacionado, produtoRelacionado);
        }

        /// <summary>
        /// Altera o relacionamento de um produto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado, ProdutoRelacionado produtoRelacionado)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling ProdutosRelacionadosApi->Update");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling ProdutosRelacionadosApi->Update");
            // verify the required parameter 'tipoUc' is set
            if (tipoUc == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc' when calling ProdutosRelacionadosApi->Update");
            // verify the required parameter 'codigoProdutoRelacionado' is set
            if (codigoProdutoRelacionado == null)
                throw new ApiException(400, "Missing required parameter 'codigoProdutoRelacionado' when calling ProdutosRelacionadosApi->Update");
            // verify the required parameter 'produtoRelacionado' is set
            if (produtoRelacionado == null)
                throw new ApiException(400, "Missing required parameter 'produtoRelacionado' when calling ProdutosRelacionadosApi->Update");

            var localVarPath = "/v1/produtos-relacionados/{codigoEmpresa}/{codigoProduto}/{tipoUc}/{codigoProdutoRelacionado}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (tipoUc != null) localVarPathParams.Add("tipoUc", this.Configuration.ApiClient.ParameterToString(tipoUc)); // path parameter
            if (codigoProdutoRelacionado != null) localVarPathParams.Add("codigoProdutoRelacionado", this.Configuration.ApiClient.ParameterToString(codigoProdutoRelacionado)); // path parameter
            if (produtoRelacionado != null && produtoRelacionado.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(produtoRelacionado); // http body (model) parameter
            }
            else
            {
                localVarPostBody = produtoRelacionado; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Altera o relacionamento de um produto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAsync (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado, ProdutoRelacionado produtoRelacionado)
        {
             await UpdateAsyncWithHttpInfo(codigoEmpresa, codigoProduto, tipoUc, codigoProdutoRelacionado, produtoRelacionado);

        }

        /// <summary>
        /// Altera o relacionamento de um produto 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="codigoProdutoRelacionado"></param>
        /// <param name="produtoRelacionado">produtoRelacionado</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, string codigoProdutoRelacionado, ProdutoRelacionado produtoRelacionado)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling ProdutosRelacionadosApi->Update");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling ProdutosRelacionadosApi->Update");
            // verify the required parameter 'tipoUc' is set
            if (tipoUc == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc' when calling ProdutosRelacionadosApi->Update");
            // verify the required parameter 'codigoProdutoRelacionado' is set
            if (codigoProdutoRelacionado == null)
                throw new ApiException(400, "Missing required parameter 'codigoProdutoRelacionado' when calling ProdutosRelacionadosApi->Update");
            // verify the required parameter 'produtoRelacionado' is set
            if (produtoRelacionado == null)
                throw new ApiException(400, "Missing required parameter 'produtoRelacionado' when calling ProdutosRelacionadosApi->Update");

            var localVarPath = "/v1/produtos-relacionados/{codigoEmpresa}/{codigoProduto}/{tipoUc}/{codigoProdutoRelacionado}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (tipoUc != null) localVarPathParams.Add("tipoUc", this.Configuration.ApiClient.ParameterToString(tipoUc)); // path parameter
            if (codigoProdutoRelacionado != null) localVarPathParams.Add("codigoProdutoRelacionado", this.Configuration.ApiClient.ParameterToString(codigoProdutoRelacionado)); // path parameter
            if (produtoRelacionado != null && produtoRelacionado.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(produtoRelacionado); // http body (model) parameter
            }
            else
            {
                localVarPostBody = produtoRelacionado; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
