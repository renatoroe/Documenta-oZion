/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITipoUCApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retorna quantidade de TipoUcs cadastrados
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>TipoUc</returns>
        TipoUc CountByQuery (string codigoEmpresa, string codigoProduto);

        /// <summary>
        /// Retorna quantidade de TipoUcs cadastrados
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>ApiResponse of TipoUc</returns>
        ApiResponse<TipoUc> CountByQueryWithHttpInfo (string codigoEmpresa, string codigoProduto);
        /// <summary>
        /// Adiciona um novo Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc">tipoUc</param>
        /// <returns></returns>
        void Create (string codigoEmpresa, string codigoProduto, TipoUc tipoUc);

        /// <summary>
        /// Adiciona um novo Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc">tipoUc</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateWithHttpInfo (string codigoEmpresa, string codigoProduto, TipoUc tipoUc);
        /// <summary>
        /// Retorna especificamente um Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns>List&lt;TipoUc&gt;</returns>
        List<TipoUc> FindById (string codigoEmpresa, string codigoProduto, string tipoUc);

        /// <summary>
        /// Retorna especificamente um Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns>ApiResponse of List&lt;TipoUc&gt;</returns>
        ApiResponse<List<TipoUc>> FindByIdWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc);
        /// <summary>
        /// Retorna lista de Tipo UC de um produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>List&lt;TipoUc&gt;</returns>
        List<TipoUc> FindByProduto (string codigoEmpresa, string codigoProduto);

        /// <summary>
        /// Retorna lista de Tipo UC de um produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>ApiResponse of List&lt;TipoUc&gt;</returns>
        ApiResponse<List<TipoUc>> FindByProdutoWithHttpInfo (string codigoEmpresa, string codigoProduto);
        /// <summary>
        /// Exclui um Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns></returns>
        void Remove (string codigoEmpresa, string codigoProduto, string tipoUc);

        /// <summary>
        /// Exclui um Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc);
        /// <summary>
        /// Altera um Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="tipoUc2">tipoUc</param>
        /// <returns></returns>
        void Update (string codigoEmpresa, string codigoProduto, string tipoUc, TipoUc tipoUc2);

        /// <summary>
        /// Altera um Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="tipoUc2">tipoUc</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, TipoUc tipoUc2);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retorna quantidade de TipoUcs cadastrados
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of TipoUc</returns>
        System.Threading.Tasks.Task<TipoUc> CountByQueryAsync (string codigoEmpresa, string codigoProduto);

        /// <summary>
        /// Retorna quantidade de TipoUcs cadastrados
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of ApiResponse (TipoUc)</returns>
        System.Threading.Tasks.Task<ApiResponse<TipoUc>> CountByQueryAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto);
        /// <summary>
        /// Adiciona um novo Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc">tipoUc</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateAsync (string codigoEmpresa, string codigoProduto, TipoUc tipoUc);

        /// <summary>
        /// Adiciona um novo Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc">tipoUc</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto, TipoUc tipoUc);
        /// <summary>
        /// Retorna especificamente um Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns>Task of List&lt;TipoUc&gt;</returns>
        System.Threading.Tasks.Task<List<TipoUc>> FindByIdAsync (string codigoEmpresa, string codigoProduto, string tipoUc);

        /// <summary>
        /// Retorna especificamente um Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns>Task of ApiResponse (List&lt;TipoUc&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TipoUc>>> FindByIdAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc);
        /// <summary>
        /// Retorna lista de Tipo UC de um produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of List&lt;TipoUc&gt;</returns>
        System.Threading.Tasks.Task<List<TipoUc>> FindByProdutoAsync (string codigoEmpresa, string codigoProduto);

        /// <summary>
        /// Retorna lista de Tipo UC de um produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of ApiResponse (List&lt;TipoUc&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TipoUc>>> FindByProdutoAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto);
        /// <summary>
        /// Exclui um Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAsync (string codigoEmpresa, string codigoProduto, string tipoUc);

        /// <summary>
        /// Exclui um Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc);
        /// <summary>
        /// Altera um Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="tipoUc2">tipoUc</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAsync (string codigoEmpresa, string codigoProduto, string tipoUc, TipoUc tipoUc2);

        /// <summary>
        /// Altera um Tipo UC
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="tipoUc2">tipoUc</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, TipoUc tipoUc2);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TipoUCApi : ITipoUCApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TipoUCApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TipoUCApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TipoUCApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TipoUCApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retorna quantidade de TipoUcs cadastrados Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>TipoUc</returns>
        public TipoUc CountByQuery (string codigoEmpresa, string codigoProduto)
        {
             ApiResponse<TipoUc> localVarResponse = CountByQueryWithHttpInfo(codigoEmpresa, codigoProduto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna quantidade de TipoUcs cadastrados Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>ApiResponse of TipoUc</returns>
        public ApiResponse< TipoUc > CountByQueryWithHttpInfo (string codigoEmpresa, string codigoProduto)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling TipoUCApi->CountByQuery");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling TipoUCApi->CountByQuery");

            var localVarPath = "/v1/tipoUc/{codigoEmpresa}/{codigoProduto}/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TipoUc>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TipoUc) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TipoUc)));
        }

        /// <summary>
        /// Retorna quantidade de TipoUcs cadastrados Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of TipoUc</returns>
        public async System.Threading.Tasks.Task<TipoUc> CountByQueryAsync (string codigoEmpresa, string codigoProduto)
        {
             ApiResponse<TipoUc> localVarResponse = await CountByQueryAsyncWithHttpInfo(codigoEmpresa, codigoProduto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna quantidade de TipoUcs cadastrados Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of ApiResponse (TipoUc)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TipoUc>> CountByQueryAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling TipoUCApi->CountByQuery");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling TipoUCApi->CountByQuery");

            var localVarPath = "/v1/tipoUc/{codigoEmpresa}/{codigoProduto}/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TipoUc>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TipoUc) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TipoUc)));
        }

        /// <summary>
        /// Adiciona um novo Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc">tipoUc</param>
        /// <returns></returns>
        public void Create (string codigoEmpresa, string codigoProduto, TipoUc tipoUc)
        {
             CreateWithHttpInfo(codigoEmpresa, codigoProduto, tipoUc);
        }

        /// <summary>
        /// Adiciona um novo Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc">tipoUc</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateWithHttpInfo (string codigoEmpresa, string codigoProduto, TipoUc tipoUc)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling TipoUCApi->Create");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling TipoUCApi->Create");
            // verify the required parameter 'tipoUc' is set
            if (tipoUc == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc' when calling TipoUCApi->Create");

            var localVarPath = "/v1/tipoUc/{codigoEmpresa}/{codigoProduto}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (tipoUc != null && tipoUc.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tipoUc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tipoUc; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adiciona um novo Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc">tipoUc</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateAsync (string codigoEmpresa, string codigoProduto, TipoUc tipoUc)
        {
             await CreateAsyncWithHttpInfo(codigoEmpresa, codigoProduto, tipoUc);

        }

        /// <summary>
        /// Adiciona um novo Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc">tipoUc</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto, TipoUc tipoUc)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling TipoUCApi->Create");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling TipoUCApi->Create");
            // verify the required parameter 'tipoUc' is set
            if (tipoUc == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc' when calling TipoUCApi->Create");

            var localVarPath = "/v1/tipoUc/{codigoEmpresa}/{codigoProduto}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (tipoUc != null && tipoUc.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tipoUc); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tipoUc; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna especificamente um Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns>List&lt;TipoUc&gt;</returns>
        public List<TipoUc> FindById (string codigoEmpresa, string codigoProduto, string tipoUc)
        {
             ApiResponse<List<TipoUc>> localVarResponse = FindByIdWithHttpInfo(codigoEmpresa, codigoProduto, tipoUc);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna especificamente um Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns>ApiResponse of List&lt;TipoUc&gt;</returns>
        public ApiResponse< List<TipoUc> > FindByIdWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling TipoUCApi->FindById");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling TipoUCApi->FindById");
            // verify the required parameter 'tipoUc' is set
            if (tipoUc == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc' when calling TipoUCApi->FindById");

            var localVarPath = "/v1/tipoUc/{codigoEmpresa}/{codigoProduto}/{tipoUc}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (tipoUc != null) localVarPathParams.Add("tipoUc", this.Configuration.ApiClient.ParameterToString(tipoUc)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TipoUc>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TipoUc>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TipoUc>)));
        }

        /// <summary>
        /// Retorna especificamente um Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns>Task of List&lt;TipoUc&gt;</returns>
        public async System.Threading.Tasks.Task<List<TipoUc>> FindByIdAsync (string codigoEmpresa, string codigoProduto, string tipoUc)
        {
             ApiResponse<List<TipoUc>> localVarResponse = await FindByIdAsyncWithHttpInfo(codigoEmpresa, codigoProduto, tipoUc);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna especificamente um Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns>Task of ApiResponse (List&lt;TipoUc&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TipoUc>>> FindByIdAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling TipoUCApi->FindById");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling TipoUCApi->FindById");
            // verify the required parameter 'tipoUc' is set
            if (tipoUc == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc' when calling TipoUCApi->FindById");

            var localVarPath = "/v1/tipoUc/{codigoEmpresa}/{codigoProduto}/{tipoUc}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (tipoUc != null) localVarPathParams.Add("tipoUc", this.Configuration.ApiClient.ParameterToString(tipoUc)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TipoUc>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TipoUc>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TipoUc>)));
        }

        /// <summary>
        /// Retorna lista de Tipo UC de um produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>List&lt;TipoUc&gt;</returns>
        public List<TipoUc> FindByProduto (string codigoEmpresa, string codigoProduto)
        {
             ApiResponse<List<TipoUc>> localVarResponse = FindByProdutoWithHttpInfo(codigoEmpresa, codigoProduto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna lista de Tipo UC de um produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>ApiResponse of List&lt;TipoUc&gt;</returns>
        public ApiResponse< List<TipoUc> > FindByProdutoWithHttpInfo (string codigoEmpresa, string codigoProduto)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling TipoUCApi->FindByProduto");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling TipoUCApi->FindByProduto");

            var localVarPath = "/v1/tipoUc/{codigoEmpresa}/{codigoProduto}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByProduto", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TipoUc>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TipoUc>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TipoUc>)));
        }

        /// <summary>
        /// Retorna lista de Tipo UC de um produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of List&lt;TipoUc&gt;</returns>
        public async System.Threading.Tasks.Task<List<TipoUc>> FindByProdutoAsync (string codigoEmpresa, string codigoProduto)
        {
             ApiResponse<List<TipoUc>> localVarResponse = await FindByProdutoAsyncWithHttpInfo(codigoEmpresa, codigoProduto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna lista de Tipo UC de um produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of ApiResponse (List&lt;TipoUc&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TipoUc>>> FindByProdutoAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling TipoUCApi->FindByProduto");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling TipoUCApi->FindByProduto");

            var localVarPath = "/v1/tipoUc/{codigoEmpresa}/{codigoProduto}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByProduto", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TipoUc>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TipoUc>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TipoUc>)));
        }

        /// <summary>
        /// Exclui um Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns></returns>
        public void Remove (string codigoEmpresa, string codigoProduto, string tipoUc)
        {
             RemoveWithHttpInfo(codigoEmpresa, codigoProduto, tipoUc);
        }

        /// <summary>
        /// Exclui um Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling TipoUCApi->Remove");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling TipoUCApi->Remove");
            // verify the required parameter 'tipoUc' is set
            if (tipoUc == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc' when calling TipoUCApi->Remove");

            var localVarPath = "/v1/tipoUc/{codigoEmpresa}/{codigoProduto}/{tipoUc}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (tipoUc != null) localVarPathParams.Add("tipoUc", this.Configuration.ApiClient.ParameterToString(tipoUc)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Exclui um Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAsync (string codigoEmpresa, string codigoProduto, string tipoUc)
        {
             await RemoveAsyncWithHttpInfo(codigoEmpresa, codigoProduto, tipoUc);

        }

        /// <summary>
        /// Exclui um Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling TipoUCApi->Remove");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling TipoUCApi->Remove");
            // verify the required parameter 'tipoUc' is set
            if (tipoUc == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc' when calling TipoUCApi->Remove");

            var localVarPath = "/v1/tipoUc/{codigoEmpresa}/{codigoProduto}/{tipoUc}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (tipoUc != null) localVarPathParams.Add("tipoUc", this.Configuration.ApiClient.ParameterToString(tipoUc)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Altera um Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="tipoUc2">tipoUc</param>
        /// <returns></returns>
        public void Update (string codigoEmpresa, string codigoProduto, string tipoUc, TipoUc tipoUc2)
        {
             UpdateWithHttpInfo(codigoEmpresa, codigoProduto, tipoUc, tipoUc2);
        }

        /// <summary>
        /// Altera um Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="tipoUc2">tipoUc</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, TipoUc tipoUc2)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling TipoUCApi->Update");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling TipoUCApi->Update");
            // verify the required parameter 'tipoUc' is set
            if (tipoUc == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc' when calling TipoUCApi->Update");
            // verify the required parameter 'tipoUc2' is set
            if (tipoUc2 == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc2' when calling TipoUCApi->Update");

            var localVarPath = "/v1/tipoUc/{codigoEmpresa}/{codigoProduto}/{tipoUc}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (tipoUc != null) localVarPathParams.Add("tipoUc", this.Configuration.ApiClient.ParameterToString(tipoUc)); // path parameter
            if (tipoUc2 != null && tipoUc2.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tipoUc2); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tipoUc2; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Altera um Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="tipoUc2">tipoUc</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAsync (string codigoEmpresa, string codigoProduto, string tipoUc, TipoUc tipoUc2)
        {
             await UpdateAsyncWithHttpInfo(codigoEmpresa, codigoProduto, tipoUc, tipoUc2);

        }

        /// <summary>
        /// Altera um Tipo UC Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="tipoUc"></param>
        /// <param name="tipoUc2">tipoUc</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string codigoEmpresa, string codigoProduto, string tipoUc, TipoUc tipoUc2)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling TipoUCApi->Update");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling TipoUCApi->Update");
            // verify the required parameter 'tipoUc' is set
            if (tipoUc == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc' when calling TipoUCApi->Update");
            // verify the required parameter 'tipoUc2' is set
            if (tipoUc2 == null)
                throw new ApiException(400, "Missing required parameter 'tipoUc2' when calling TipoUCApi->Update");

            var localVarPath = "/v1/tipoUc/{codigoEmpresa}/{codigoProduto}/{tipoUc}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (tipoUc != null) localVarPathParams.Add("tipoUc", this.Configuration.ApiClient.ParameterToString(tipoUc)); // path parameter
            if (tipoUc2 != null && tipoUc2.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(tipoUc2); // http body (model) parameter
            }
            else
            {
                localVarPostBody = tipoUc2; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
