/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmpresasApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retorna quantidade das empresas cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>List&lt;Empresa&gt;</returns>
        List<Empresa> CountByQuery (string codigoDepositante = null);

        /// <summary>
        /// Retorna quantidade das empresas cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Empresa&gt;</returns>
        ApiResponse<List<Empresa>> CountByQueryWithHttpInfo (string codigoDepositante = null);
        /// <summary>
        /// Retorna quantidade das transportadoras cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Empresa&gt;</returns>
        List<Empresa> CountTransportadoraByQuery ();

        /// <summary>
        /// Retorna quantidade das transportadoras cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Empresa&gt;</returns>
        ApiResponse<List<Empresa>> CountTransportadoraByQueryWithHttpInfo ();
        /// <summary>
        /// Adiciona uma nova empresa
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="empresa">empresa</param>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns></returns>
        void Create (EmpresaDTO empresa, string codigoDepositante = null);

        /// <summary>
        /// Adiciona uma nova empresa
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="empresa">empresa</param>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateWithHttpInfo (EmpresaDTO empresa, string codigoDepositante = null);
        /// <summary>
        /// Retorna empresa por CNPJ/CPF
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cGCCPFEmpresa"></param>
        /// <returns>Empresa</returns>
        Empresa FindByCNPJ (string cGCCPFEmpresa);

        /// <summary>
        /// Retorna empresa por CNPJ/CPF
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cGCCPFEmpresa"></param>
        /// <returns>ApiResponse of Empresa</returns>
        ApiResponse<Empresa> FindByCNPJWithHttpInfo (string cGCCPFEmpresa);
        /// <summary>
        /// Retorna empresa por código
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns>Empresa</returns>
        Empresa FindById (string codigoEmpresa);

        /// <summary>
        /// Retorna empresa por código
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns>ApiResponse of Empresa</returns>
        ApiResponse<Empresa> FindByIdWithHttpInfo (string codigoEmpresa);
        /// <summary>
        /// Retorna todos as empresas cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>List&lt;EmpresaDTO&gt;</returns>
        List<EmpresaDTO> FindByQuery (string codigoDepositante = null);

        /// <summary>
        /// Retorna todos as empresas cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EmpresaDTO&gt;</returns>
        ApiResponse<List<EmpresaDTO>> FindByQueryWithHttpInfo (string codigoDepositante = null);
        /// <summary>
        /// Retorna todas as transportadoras cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Empresa&gt;</returns>
        List<Empresa> FindTransportadoraByQuery ();

        /// <summary>
        /// Retorna todas as transportadoras cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Empresa&gt;</returns>
        ApiResponse<List<Empresa>> FindTransportadoraByQueryWithHttpInfo ();
        /// <summary>
        /// Exclui uma empresa
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns></returns>
        void Remove (string codigoEmpresa);

        /// <summary>
        /// Exclui uma empresa
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveWithHttpInfo (string codigoEmpresa);
        /// <summary>
        /// Altera uma empresa
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="empresa">empresa</param>
        /// <returns></returns>
        void Update (string codigoEmpresa, EmpresaDTO empresa);

        /// <summary>
        /// Altera uma empresa
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="empresa">empresa</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWithHttpInfo (string codigoEmpresa, EmpresaDTO empresa);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retorna quantidade das empresas cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>Task of List&lt;Empresa&gt;</returns>
        System.Threading.Tasks.Task<List<Empresa>> CountByQueryAsync (string codigoDepositante = null);

        /// <summary>
        /// Retorna quantidade das empresas cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Empresa&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Empresa>>> CountByQueryAsyncWithHttpInfo (string codigoDepositante = null);
        /// <summary>
        /// Retorna quantidade das transportadoras cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Empresa&gt;</returns>
        System.Threading.Tasks.Task<List<Empresa>> CountTransportadoraByQueryAsync ();

        /// <summary>
        /// Retorna quantidade das transportadoras cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Empresa&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Empresa>>> CountTransportadoraByQueryAsyncWithHttpInfo ();
        /// <summary>
        /// Adiciona uma nova empresa
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="empresa">empresa</param>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateAsync (EmpresaDTO empresa, string codigoDepositante = null);

        /// <summary>
        /// Adiciona uma nova empresa
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="empresa">empresa</param>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (EmpresaDTO empresa, string codigoDepositante = null);
        /// <summary>
        /// Retorna empresa por CNPJ/CPF
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cGCCPFEmpresa"></param>
        /// <returns>Task of Empresa</returns>
        System.Threading.Tasks.Task<Empresa> FindByCNPJAsync (string cGCCPFEmpresa);

        /// <summary>
        /// Retorna empresa por CNPJ/CPF
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cGCCPFEmpresa"></param>
        /// <returns>Task of ApiResponse (Empresa)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empresa>> FindByCNPJAsyncWithHttpInfo (string cGCCPFEmpresa);
        /// <summary>
        /// Retorna empresa por código
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns>Task of Empresa</returns>
        System.Threading.Tasks.Task<Empresa> FindByIdAsync (string codigoEmpresa);

        /// <summary>
        /// Retorna empresa por código
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns>Task of ApiResponse (Empresa)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empresa>> FindByIdAsyncWithHttpInfo (string codigoEmpresa);
        /// <summary>
        /// Retorna todos as empresas cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>Task of List&lt;EmpresaDTO&gt;</returns>
        System.Threading.Tasks.Task<List<EmpresaDTO>> FindByQueryAsync (string codigoDepositante = null);

        /// <summary>
        /// Retorna todos as empresas cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmpresaDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EmpresaDTO>>> FindByQueryAsyncWithHttpInfo (string codigoDepositante = null);
        /// <summary>
        /// Retorna todas as transportadoras cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Empresa&gt;</returns>
        System.Threading.Tasks.Task<List<Empresa>> FindTransportadoraByQueryAsync ();

        /// <summary>
        /// Retorna todas as transportadoras cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Empresa&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Empresa>>> FindTransportadoraByQueryAsyncWithHttpInfo ();
        /// <summary>
        /// Exclui uma empresa
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAsync (string codigoEmpresa);

        /// <summary>
        /// Exclui uma empresa
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAsyncWithHttpInfo (string codigoEmpresa);
        /// <summary>
        /// Altera uma empresa
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="empresa">empresa</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAsync (string codigoEmpresa, EmpresaDTO empresa);

        /// <summary>
        /// Altera uma empresa
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="empresa">empresa</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string codigoEmpresa, EmpresaDTO empresa);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmpresasApi : IEmpresasApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmpresasApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmpresasApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmpresasApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmpresasApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retorna quantidade das empresas cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>List&lt;Empresa&gt;</returns>
        public List<Empresa> CountByQuery (string codigoDepositante = null)
        {
             ApiResponse<List<Empresa>> localVarResponse = CountByQueryWithHttpInfo(codigoDepositante);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna quantidade das empresas cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Empresa&gt;</returns>
        public ApiResponse< List<Empresa> > CountByQueryWithHttpInfo (string codigoDepositante = null)
        {

            var localVarPath = "/v1/empresas/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarHeaderParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Empresa>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Empresa>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Empresa>)));
        }

        /// <summary>
        /// Retorna quantidade das empresas cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>Task of List&lt;Empresa&gt;</returns>
        public async System.Threading.Tasks.Task<List<Empresa>> CountByQueryAsync (string codigoDepositante = null)
        {
             ApiResponse<List<Empresa>> localVarResponse = await CountByQueryAsyncWithHttpInfo(codigoDepositante);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna quantidade das empresas cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Empresa&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Empresa>>> CountByQueryAsyncWithHttpInfo (string codigoDepositante = null)
        {

            var localVarPath = "/v1/empresas/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarHeaderParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Empresa>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Empresa>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Empresa>)));
        }

        /// <summary>
        /// Retorna quantidade das transportadoras cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Empresa&gt;</returns>
        public List<Empresa> CountTransportadoraByQuery ()
        {
             ApiResponse<List<Empresa>> localVarResponse = CountTransportadoraByQueryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna quantidade das transportadoras cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Empresa&gt;</returns>
        public ApiResponse< List<Empresa> > CountTransportadoraByQueryWithHttpInfo ()
        {

            var localVarPath = "/v1/empresas/transportadoras/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountTransportadoraByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Empresa>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Empresa>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Empresa>)));
        }

        /// <summary>
        /// Retorna quantidade das transportadoras cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Empresa&gt;</returns>
        public async System.Threading.Tasks.Task<List<Empresa>> CountTransportadoraByQueryAsync ()
        {
             ApiResponse<List<Empresa>> localVarResponse = await CountTransportadoraByQueryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna quantidade das transportadoras cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Empresa&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Empresa>>> CountTransportadoraByQueryAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/empresas/transportadoras/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountTransportadoraByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Empresa>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Empresa>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Empresa>)));
        }

        /// <summary>
        /// Adiciona uma nova empresa Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="empresa">empresa</param>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns></returns>
        public void Create (EmpresaDTO empresa, string codigoDepositante = null)
        {
             CreateWithHttpInfo(empresa, codigoDepositante);
        }

        /// <summary>
        /// Adiciona uma nova empresa Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="empresa">empresa</param>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateWithHttpInfo (EmpresaDTO empresa, string codigoDepositante = null)
        {
            // verify the required parameter 'empresa' is set
            if (empresa == null)
                throw new ApiException(400, "Missing required parameter 'empresa' when calling EmpresasApi->Create");

            var localVarPath = "/v1/empresas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarHeaderParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // header parameter
            if (empresa != null && empresa.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(empresa); // http body (model) parameter
            }
            else
            {
                localVarPostBody = empresa; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adiciona uma nova empresa Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="empresa">empresa</param>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateAsync (EmpresaDTO empresa, string codigoDepositante = null)
        {
             await CreateAsyncWithHttpInfo(empresa, codigoDepositante);

        }

        /// <summary>
        /// Adiciona uma nova empresa Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="empresa">empresa</param>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (EmpresaDTO empresa, string codigoDepositante = null)
        {
            // verify the required parameter 'empresa' is set
            if (empresa == null)
                throw new ApiException(400, "Missing required parameter 'empresa' when calling EmpresasApi->Create");

            var localVarPath = "/v1/empresas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarHeaderParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // header parameter
            if (empresa != null && empresa.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(empresa); // http body (model) parameter
            }
            else
            {
                localVarPostBody = empresa; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna empresa por CNPJ/CPF Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cGCCPFEmpresa"></param>
        /// <returns>Empresa</returns>
        public Empresa FindByCNPJ (string cGCCPFEmpresa)
        {
             ApiResponse<Empresa> localVarResponse = FindByCNPJWithHttpInfo(cGCCPFEmpresa);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna empresa por CNPJ/CPF Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cGCCPFEmpresa"></param>
        /// <returns>ApiResponse of Empresa</returns>
        public ApiResponse< Empresa > FindByCNPJWithHttpInfo (string cGCCPFEmpresa)
        {
            // verify the required parameter 'cGCCPFEmpresa' is set
            if (cGCCPFEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'cGCCPFEmpresa' when calling EmpresasApi->FindByCNPJ");

            var localVarPath = "/v1/empresas/cnpjCpf/{CGCCPFEmpresa}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cGCCPFEmpresa != null) localVarPathParams.Add("CGCCPFEmpresa", this.Configuration.ApiClient.ParameterToString(cGCCPFEmpresa)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByCNPJ", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empresa>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empresa) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empresa)));
        }

        /// <summary>
        /// Retorna empresa por CNPJ/CPF Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cGCCPFEmpresa"></param>
        /// <returns>Task of Empresa</returns>
        public async System.Threading.Tasks.Task<Empresa> FindByCNPJAsync (string cGCCPFEmpresa)
        {
             ApiResponse<Empresa> localVarResponse = await FindByCNPJAsyncWithHttpInfo(cGCCPFEmpresa);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna empresa por CNPJ/CPF Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cGCCPFEmpresa"></param>
        /// <returns>Task of ApiResponse (Empresa)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empresa>> FindByCNPJAsyncWithHttpInfo (string cGCCPFEmpresa)
        {
            // verify the required parameter 'cGCCPFEmpresa' is set
            if (cGCCPFEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'cGCCPFEmpresa' when calling EmpresasApi->FindByCNPJ");

            var localVarPath = "/v1/empresas/cnpjCpf/{CGCCPFEmpresa}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cGCCPFEmpresa != null) localVarPathParams.Add("CGCCPFEmpresa", this.Configuration.ApiClient.ParameterToString(cGCCPFEmpresa)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByCNPJ", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empresa>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empresa) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empresa)));
        }

        /// <summary>
        /// Retorna empresa por código Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns>Empresa</returns>
        public Empresa FindById (string codigoEmpresa)
        {
             ApiResponse<Empresa> localVarResponse = FindByIdWithHttpInfo(codigoEmpresa);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna empresa por código Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns>ApiResponse of Empresa</returns>
        public ApiResponse< Empresa > FindByIdWithHttpInfo (string codigoEmpresa)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling EmpresasApi->FindById");

            var localVarPath = "/v1/empresas/{codigoEmpresa}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empresa>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empresa) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empresa)));
        }

        /// <summary>
        /// Retorna empresa por código Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns>Task of Empresa</returns>
        public async System.Threading.Tasks.Task<Empresa> FindByIdAsync (string codigoEmpresa)
        {
             ApiResponse<Empresa> localVarResponse = await FindByIdAsyncWithHttpInfo(codigoEmpresa);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna empresa por código Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns>Task of ApiResponse (Empresa)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empresa>> FindByIdAsyncWithHttpInfo (string codigoEmpresa)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling EmpresasApi->FindById");

            var localVarPath = "/v1/empresas/{codigoEmpresa}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empresa>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Empresa) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empresa)));
        }

        /// <summary>
        /// Retorna todos as empresas cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>List&lt;EmpresaDTO&gt;</returns>
        public List<EmpresaDTO> FindByQuery (string codigoDepositante = null)
        {
             ApiResponse<List<EmpresaDTO>> localVarResponse = FindByQueryWithHttpInfo(codigoDepositante);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna todos as empresas cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>ApiResponse of List&lt;EmpresaDTO&gt;</returns>
        public ApiResponse< List<EmpresaDTO> > FindByQueryWithHttpInfo (string codigoDepositante = null)
        {

            var localVarPath = "/v1/empresas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarHeaderParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EmpresaDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EmpresaDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EmpresaDTO>)));
        }

        /// <summary>
        /// Retorna todos as empresas cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>Task of List&lt;EmpresaDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<EmpresaDTO>> FindByQueryAsync (string codigoDepositante = null)
        {
             ApiResponse<List<EmpresaDTO>> localVarResponse = await FindByQueryAsyncWithHttpInfo(codigoDepositante);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna todos as empresas cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmpresaDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EmpresaDTO>>> FindByQueryAsyncWithHttpInfo (string codigoDepositante = null)
        {

            var localVarPath = "/v1/empresas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarHeaderParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EmpresaDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EmpresaDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EmpresaDTO>)));
        }

        /// <summary>
        /// Retorna todas as transportadoras cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Empresa&gt;</returns>
        public List<Empresa> FindTransportadoraByQuery ()
        {
             ApiResponse<List<Empresa>> localVarResponse = FindTransportadoraByQueryWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna todas as transportadoras cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Empresa&gt;</returns>
        public ApiResponse< List<Empresa> > FindTransportadoraByQueryWithHttpInfo ()
        {

            var localVarPath = "/v1/empresas/transportadoras";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTransportadoraByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Empresa>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Empresa>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Empresa>)));
        }

        /// <summary>
        /// Retorna todas as transportadoras cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Empresa&gt;</returns>
        public async System.Threading.Tasks.Task<List<Empresa>> FindTransportadoraByQueryAsync ()
        {
             ApiResponse<List<Empresa>> localVarResponse = await FindTransportadoraByQueryAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna todas as transportadoras cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Empresa&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Empresa>>> FindTransportadoraByQueryAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/empresas/transportadoras";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTransportadoraByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Empresa>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Empresa>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Empresa>)));
        }

        /// <summary>
        /// Exclui uma empresa Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns></returns>
        public void Remove (string codigoEmpresa)
        {
             RemoveWithHttpInfo(codigoEmpresa);
        }

        /// <summary>
        /// Exclui uma empresa Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveWithHttpInfo (string codigoEmpresa)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling EmpresasApi->Remove");

            var localVarPath = "/v1/empresas/{codigoEmpresa}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Exclui uma empresa Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAsync (string codigoEmpresa)
        {
             await RemoveAsyncWithHttpInfo(codigoEmpresa);

        }

        /// <summary>
        /// Exclui uma empresa Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAsyncWithHttpInfo (string codigoEmpresa)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling EmpresasApi->Remove");

            var localVarPath = "/v1/empresas/{codigoEmpresa}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Altera uma empresa Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="empresa">empresa</param>
        /// <returns></returns>
        public void Update (string codigoEmpresa, EmpresaDTO empresa)
        {
             UpdateWithHttpInfo(codigoEmpresa, empresa);
        }

        /// <summary>
        /// Altera uma empresa Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="empresa">empresa</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateWithHttpInfo (string codigoEmpresa, EmpresaDTO empresa)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling EmpresasApi->Update");
            // verify the required parameter 'empresa' is set
            if (empresa == null)
                throw new ApiException(400, "Missing required parameter 'empresa' when calling EmpresasApi->Update");

            var localVarPath = "/v1/empresas/{codigoEmpresa}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (empresa != null && empresa.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(empresa); // http body (model) parameter
            }
            else
            {
                localVarPostBody = empresa; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Altera uma empresa Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="empresa">empresa</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAsync (string codigoEmpresa, EmpresaDTO empresa)
        {
             await UpdateAsyncWithHttpInfo(codigoEmpresa, empresa);

        }

        /// <summary>
        /// Altera uma empresa Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEmpresa"></param>
        /// <param name="empresa">empresa</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string codigoEmpresa, EmpresaDTO empresa)
        {
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling EmpresasApi->Update");
            // verify the required parameter 'empresa' is set
            if (empresa == null)
                throw new ApiException(400, "Missing required parameter 'empresa' when calling EmpresasApi->Update");

            var localVarPath = "/v1/empresas/{codigoEmpresa}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (empresa != null && empresa.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(empresa); // http body (model) parameter
            }
            else
            {
                localVarPostBody = empresa; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
