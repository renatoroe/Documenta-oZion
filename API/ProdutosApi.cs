/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProdutosApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retorna quantidade de depositantes cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>ProdutoDTO</returns>
        ProdutoDTO CountByQuery (string codigoDepositante);

        /// <summary>
        /// Retorna quantidade de depositantes cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>ApiResponse of ProdutoDTO</returns>
        ApiResponse<ProdutoDTO> CountByQueryWithHttpInfo (string codigoDepositante);
        /// <summary>
        /// Adiciona um novo produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="produto">produto</param>
        /// <returns></returns>
        void Create (string codigoDepositante, ProdutoDTO produto);

        /// <summary>
        /// Adiciona um novo produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="produto">produto</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateWithHttpInfo (string codigoDepositante, ProdutoDTO produto);
        /// <summary>
        /// Retorna todos os produtos cadastrados de um Depositante
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>List&lt;ProdutoDTO&gt;</returns>
        List<ProdutoDTO> FindByDepositante (string codigoDepositante);

        /// <summary>
        /// Retorna todos os produtos cadastrados de um Depositante
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>ApiResponse of List&lt;ProdutoDTO&gt;</returns>
        ApiResponse<List<ProdutoDTO>> FindByDepositanteWithHttpInfo (string codigoDepositante);
        /// <summary>
        /// Retorna produto de um Depositante
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>ProdutoDTO</returns>
        ProdutoDTO FindById (string codigoDepositante, string codigoProduto);

        /// <summary>
        /// Retorna produto de um Depositante
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>ApiResponse of ProdutoDTO</returns>
        ApiResponse<ProdutoDTO> FindByIdWithHttpInfo (string codigoDepositante, string codigoProduto);
        /// <summary>
        /// Exclui um produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns></returns>
        void Remove (string codigoDepositante, string codigoProduto);

        /// <summary>
        /// Exclui um produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveWithHttpInfo (string codigoDepositante, string codigoProduto);
        /// <summary>
        /// Altera um produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="produto">produto</param>
        /// <returns></returns>
        void Update (string codigoDepositante, string codigoProduto, ProdutoDTO produto);

        /// <summary>
        /// Altera um produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="produto">produto</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWithHttpInfo (string codigoDepositante, string codigoProduto, ProdutoDTO produto);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retorna quantidade de depositantes cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of ProdutoDTO</returns>
        System.Threading.Tasks.Task<ProdutoDTO> CountByQueryAsync (string codigoDepositante);

        /// <summary>
        /// Retorna quantidade de depositantes cadastradas
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of ApiResponse (ProdutoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProdutoDTO>> CountByQueryAsyncWithHttpInfo (string codigoDepositante);
        /// <summary>
        /// Adiciona um novo produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="produto">produto</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateAsync (string codigoDepositante, ProdutoDTO produto);

        /// <summary>
        /// Adiciona um novo produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="produto">produto</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (string codigoDepositante, ProdutoDTO produto);
        /// <summary>
        /// Retorna todos os produtos cadastrados de um Depositante
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of List&lt;ProdutoDTO&gt;</returns>
        System.Threading.Tasks.Task<List<ProdutoDTO>> FindByDepositanteAsync (string codigoDepositante);

        /// <summary>
        /// Retorna todos os produtos cadastrados de um Depositante
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of ApiResponse (List&lt;ProdutoDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProdutoDTO>>> FindByDepositanteAsyncWithHttpInfo (string codigoDepositante);
        /// <summary>
        /// Retorna produto de um Depositante
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of ProdutoDTO</returns>
        System.Threading.Tasks.Task<ProdutoDTO> FindByIdAsync (string codigoDepositante, string codigoProduto);

        /// <summary>
        /// Retorna produto de um Depositante
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of ApiResponse (ProdutoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProdutoDTO>> FindByIdAsyncWithHttpInfo (string codigoDepositante, string codigoProduto);
        /// <summary>
        /// Exclui um produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAsync (string codigoDepositante, string codigoProduto);

        /// <summary>
        /// Exclui um produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAsyncWithHttpInfo (string codigoDepositante, string codigoProduto);
        /// <summary>
        /// Altera um produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="produto">produto</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAsync (string codigoDepositante, string codigoProduto, ProdutoDTO produto);

        /// <summary>
        /// Altera um produto
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="produto">produto</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string codigoDepositante, string codigoProduto, ProdutoDTO produto);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProdutosApi : IProdutosApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProdutosApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProdutosApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProdutosApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProdutosApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retorna quantidade de depositantes cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>ProdutoDTO</returns>
        public ProdutoDTO CountByQuery (string codigoDepositante)
        {
             ApiResponse<ProdutoDTO> localVarResponse = CountByQueryWithHttpInfo(codigoDepositante);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna quantidade de depositantes cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>ApiResponse of ProdutoDTO</returns>
        public ApiResponse< ProdutoDTO > CountByQueryWithHttpInfo (string codigoDepositante)
        {
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling ProdutosApi->CountByQuery");

            var localVarPath = "/v1/produtos/{codigoDepositante}/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProdutoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProdutoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProdutoDTO)));
        }

        /// <summary>
        /// Retorna quantidade de depositantes cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of ProdutoDTO</returns>
        public async System.Threading.Tasks.Task<ProdutoDTO> CountByQueryAsync (string codigoDepositante)
        {
             ApiResponse<ProdutoDTO> localVarResponse = await CountByQueryAsyncWithHttpInfo(codigoDepositante);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna quantidade de depositantes cadastradas Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of ApiResponse (ProdutoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProdutoDTO>> CountByQueryAsyncWithHttpInfo (string codigoDepositante)
        {
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling ProdutosApi->CountByQuery");

            var localVarPath = "/v1/produtos/{codigoDepositante}/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProdutoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProdutoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProdutoDTO)));
        }

        /// <summary>
        /// Adiciona um novo produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="produto">produto</param>
        /// <returns></returns>
        public void Create (string codigoDepositante, ProdutoDTO produto)
        {
             CreateWithHttpInfo(codigoDepositante, produto);
        }

        /// <summary>
        /// Adiciona um novo produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="produto">produto</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateWithHttpInfo (string codigoDepositante, ProdutoDTO produto)
        {
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling ProdutosApi->Create");
            // verify the required parameter 'produto' is set
            if (produto == null)
                throw new ApiException(400, "Missing required parameter 'produto' when calling ProdutosApi->Create");

            var localVarPath = "/v1/produtos/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (produto != null && produto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(produto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = produto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Adiciona um novo produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="produto">produto</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateAsync (string codigoDepositante, ProdutoDTO produto)
        {
             await CreateAsyncWithHttpInfo(codigoDepositante, produto);

        }

        /// <summary>
        /// Adiciona um novo produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="produto">produto</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (string codigoDepositante, ProdutoDTO produto)
        {
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling ProdutosApi->Create");
            // verify the required parameter 'produto' is set
            if (produto == null)
                throw new ApiException(400, "Missing required parameter 'produto' when calling ProdutosApi->Create");

            var localVarPath = "/v1/produtos/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (produto != null && produto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(produto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = produto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna todos os produtos cadastrados de um Depositante Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>List&lt;ProdutoDTO&gt;</returns>
        public List<ProdutoDTO> FindByDepositante (string codigoDepositante)
        {
             ApiResponse<List<ProdutoDTO>> localVarResponse = FindByDepositanteWithHttpInfo(codigoDepositante);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna todos os produtos cadastrados de um Depositante Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>ApiResponse of List&lt;ProdutoDTO&gt;</returns>
        public ApiResponse< List<ProdutoDTO> > FindByDepositanteWithHttpInfo (string codigoDepositante)
        {
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling ProdutosApi->FindByDepositante");

            var localVarPath = "/v1/produtos/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByDepositante", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProdutoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProdutoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProdutoDTO>)));
        }

        /// <summary>
        /// Retorna todos os produtos cadastrados de um Depositante Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of List&lt;ProdutoDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProdutoDTO>> FindByDepositanteAsync (string codigoDepositante)
        {
             ApiResponse<List<ProdutoDTO>> localVarResponse = await FindByDepositanteAsyncWithHttpInfo(codigoDepositante);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna todos os produtos cadastrados de um Depositante Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of ApiResponse (List&lt;ProdutoDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProdutoDTO>>> FindByDepositanteAsyncWithHttpInfo (string codigoDepositante)
        {
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling ProdutosApi->FindByDepositante");

            var localVarPath = "/v1/produtos/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByDepositante", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProdutoDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProdutoDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProdutoDTO>)));
        }

        /// <summary>
        /// Retorna produto de um Depositante Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>ProdutoDTO</returns>
        public ProdutoDTO FindById (string codigoDepositante, string codigoProduto)
        {
             ApiResponse<ProdutoDTO> localVarResponse = FindByIdWithHttpInfo(codigoDepositante, codigoProduto);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna produto de um Depositante Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>ApiResponse of ProdutoDTO</returns>
        public ApiResponse< ProdutoDTO > FindByIdWithHttpInfo (string codigoDepositante, string codigoProduto)
        {
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling ProdutosApi->FindById");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling ProdutosApi->FindById");

            var localVarPath = "/v1/produtos/{codigoDepositante}/{codigoProduto}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProdutoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProdutoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProdutoDTO)));
        }

        /// <summary>
        /// Retorna produto de um Depositante Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of ProdutoDTO</returns>
        public async System.Threading.Tasks.Task<ProdutoDTO> FindByIdAsync (string codigoDepositante, string codigoProduto)
        {
             ApiResponse<ProdutoDTO> localVarResponse = await FindByIdAsyncWithHttpInfo(codigoDepositante, codigoProduto);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna produto de um Depositante Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of ApiResponse (ProdutoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProdutoDTO>> FindByIdAsyncWithHttpInfo (string codigoDepositante, string codigoProduto)
        {
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling ProdutosApi->FindById");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling ProdutosApi->FindById");

            var localVarPath = "/v1/produtos/{codigoDepositante}/{codigoProduto}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProdutoDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProdutoDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProdutoDTO)));
        }

        /// <summary>
        /// Exclui um produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns></returns>
        public void Remove (string codigoDepositante, string codigoProduto)
        {
             RemoveWithHttpInfo(codigoDepositante, codigoProduto);
        }

        /// <summary>
        /// Exclui um produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveWithHttpInfo (string codigoDepositante, string codigoProduto)
        {
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling ProdutosApi->Remove");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling ProdutosApi->Remove");

            var localVarPath = "/v1/produtos/{codigoDepositante}/{codigoProduto}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Exclui um produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAsync (string codigoDepositante, string codigoProduto)
        {
             await RemoveAsyncWithHttpInfo(codigoDepositante, codigoProduto);

        }

        /// <summary>
        /// Exclui um produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAsyncWithHttpInfo (string codigoDepositante, string codigoProduto)
        {
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling ProdutosApi->Remove");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling ProdutosApi->Remove");

            var localVarPath = "/v1/produtos/{codigoDepositante}/{codigoProduto}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Altera um produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="produto">produto</param>
        /// <returns></returns>
        public void Update (string codigoDepositante, string codigoProduto, ProdutoDTO produto)
        {
             UpdateWithHttpInfo(codigoDepositante, codigoProduto, produto);
        }

        /// <summary>
        /// Altera um produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="produto">produto</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateWithHttpInfo (string codigoDepositante, string codigoProduto, ProdutoDTO produto)
        {
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling ProdutosApi->Update");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling ProdutosApi->Update");
            // verify the required parameter 'produto' is set
            if (produto == null)
                throw new ApiException(400, "Missing required parameter 'produto' when calling ProdutosApi->Update");

            var localVarPath = "/v1/produtos/{codigoDepositante}/{codigoProduto}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (produto != null && produto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(produto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = produto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Altera um produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="produto">produto</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAsync (string codigoDepositante, string codigoProduto, ProdutoDTO produto)
        {
             await UpdateAsyncWithHttpInfo(codigoDepositante, codigoProduto, produto);

        }

        /// <summary>
        /// Altera um produto Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoProduto"></param>
        /// <param name="produto">produto</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (string codigoDepositante, string codigoProduto, ProdutoDTO produto)
        {
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling ProdutosApi->Update");
            // verify the required parameter 'codigoProduto' is set
            if (codigoProduto == null)
                throw new ApiException(400, "Missing required parameter 'codigoProduto' when calling ProdutosApi->Update");
            // verify the required parameter 'produto' is set
            if (produto == null)
                throw new ApiException(400, "Missing required parameter 'produto' when calling ProdutosApi->Update");

            var localVarPath = "/v1/produtos/{codigoDepositante}/{codigoProduto}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoProduto != null) localVarPathParams.Add("codigoProduto", this.Configuration.ApiClient.ParameterToString(codigoProduto)); // path parameter
            if (produto != null && produto.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(produto); // http body (model) parameter
            }
            else
            {
                localVarPostBody = produto; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
