/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRcqApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retorna quantidade de RCQs cadastrados
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void CountByQuery ();

        /// <summary>
        /// Retorna quantidade de RCQs cadastrados
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CountByQueryWithHttpInfo ();
        /// <summary>
        /// Retorna uma lista de RCQs emitidos com Data Emissão no dia corrente
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns></returns>
        void FindByEstDep (long? codigoEstabelecimento, string codigoDepositante);

        /// <summary>
        /// Retorna uma lista de RCQs emitidos com Data Emissão no dia corrente
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FindByEstDepWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante);
        /// <summary>
        /// Retorna lista de RCQs pelo Número Movimento
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="numeroMovimento"></param>
        /// <returns></returns>
        void FindByNumeroMovimento (long? codigoEstabelecimento, string codigoDepositante, string numeroMovimento);

        /// <summary>
        /// Retorna lista de RCQs pelo Número Movimento
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="numeroMovimento"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FindByNumeroMovimentoWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string numeroMovimento);
        /// <summary>
        /// Retorna os RCQs filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void FindByQuery ();

        /// <summary>
        /// Retorna os RCQs filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FindByQueryWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Retorna quantidade de RCQs cadastrados
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CountByQueryAsync ();

        /// <summary>
        /// Retorna quantidade de RCQs cadastrados
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CountByQueryAsyncWithHttpInfo ();
        /// <summary>
        /// Retorna uma lista de RCQs emitidos com Data Emissão no dia corrente
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FindByEstDepAsync (long? codigoEstabelecimento, string codigoDepositante);

        /// <summary>
        /// Retorna uma lista de RCQs emitidos com Data Emissão no dia corrente
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FindByEstDepAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante);
        /// <summary>
        /// Retorna lista de RCQs pelo Número Movimento
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="numeroMovimento"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FindByNumeroMovimentoAsync (long? codigoEstabelecimento, string codigoDepositante, string numeroMovimento);

        /// <summary>
        /// Retorna lista de RCQs pelo Número Movimento
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="numeroMovimento"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FindByNumeroMovimentoAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string numeroMovimento);
        /// <summary>
        /// Retorna os RCQs filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FindByQueryAsync ();

        /// <summary>
        /// Retorna os RCQs filtrados através de uma query string
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FindByQueryAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RcqApi : IRcqApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RcqApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RcqApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RcqApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RcqApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Retorna quantidade de RCQs cadastrados Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void CountByQuery ()
        {
             CountByQueryWithHttpInfo();
        }

        /// <summary>
        /// Retorna quantidade de RCQs cadastrados Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CountByQueryWithHttpInfo ()
        {

            var localVarPath = "/v1/rcq/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna quantidade de RCQs cadastrados Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CountByQueryAsync ()
        {
             await CountByQueryAsyncWithHttpInfo();

        }

        /// <summary>
        /// Retorna quantidade de RCQs cadastrados Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CountByQueryAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/rcq/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna uma lista de RCQs emitidos com Data Emissão no dia corrente Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns></returns>
        public void FindByEstDep (long? codigoEstabelecimento, string codigoDepositante)
        {
             FindByEstDepWithHttpInfo(codigoEstabelecimento, codigoDepositante);
        }

        /// <summary>
        /// Retorna uma lista de RCQs emitidos com Data Emissão no dia corrente Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FindByEstDepWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling RcqApi->FindByEstDep");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling RcqApi->FindByEstDep");

            var localVarPath = "/v1/rcq/data-emissao-atual/{codigoEstabelecimento}/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByEstDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna uma lista de RCQs emitidos com Data Emissão no dia corrente Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FindByEstDepAsync (long? codigoEstabelecimento, string codigoDepositante)
        {
             await FindByEstDepAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante);

        }

        /// <summary>
        /// Retorna uma lista de RCQs emitidos com Data Emissão no dia corrente Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FindByEstDepAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling RcqApi->FindByEstDep");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling RcqApi->FindByEstDep");

            var localVarPath = "/v1/rcq/data-emissao-atual/{codigoEstabelecimento}/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByEstDep", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna lista de RCQs pelo Número Movimento Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="numeroMovimento"></param>
        /// <returns></returns>
        public void FindByNumeroMovimento (long? codigoEstabelecimento, string codigoDepositante, string numeroMovimento)
        {
             FindByNumeroMovimentoWithHttpInfo(codigoEstabelecimento, codigoDepositante, numeroMovimento);
        }

        /// <summary>
        /// Retorna lista de RCQs pelo Número Movimento Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="numeroMovimento"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FindByNumeroMovimentoWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string numeroMovimento)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling RcqApi->FindByNumeroMovimento");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling RcqApi->FindByNumeroMovimento");
            // verify the required parameter 'numeroMovimento' is set
            if (numeroMovimento == null)
                throw new ApiException(400, "Missing required parameter 'numeroMovimento' when calling RcqApi->FindByNumeroMovimento");

            var localVarPath = "/v1/rcq/{codigoEstabelecimento}/{codigoDepositante}/{numeroMovimento}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (numeroMovimento != null) localVarPathParams.Add("numeroMovimento", this.Configuration.ApiClient.ParameterToString(numeroMovimento)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByNumeroMovimento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna lista de RCQs pelo Número Movimento Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="numeroMovimento"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FindByNumeroMovimentoAsync (long? codigoEstabelecimento, string codigoDepositante, string numeroMovimento)
        {
             await FindByNumeroMovimentoAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, numeroMovimento);

        }

        /// <summary>
        /// Retorna lista de RCQs pelo Número Movimento Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="numeroMovimento"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FindByNumeroMovimentoAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string numeroMovimento)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling RcqApi->FindByNumeroMovimento");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling RcqApi->FindByNumeroMovimento");
            // verify the required parameter 'numeroMovimento' is set
            if (numeroMovimento == null)
                throw new ApiException(400, "Missing required parameter 'numeroMovimento' when calling RcqApi->FindByNumeroMovimento");

            var localVarPath = "/v1/rcq/{codigoEstabelecimento}/{codigoDepositante}/{numeroMovimento}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (numeroMovimento != null) localVarPathParams.Add("numeroMovimento", this.Configuration.ApiClient.ParameterToString(numeroMovimento)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByNumeroMovimento", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna os RCQs filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void FindByQuery ()
        {
             FindByQueryWithHttpInfo();
        }

        /// <summary>
        /// Retorna os RCQs filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FindByQueryWithHttpInfo ()
        {

            var localVarPath = "/v1/rcq";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna os RCQs filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FindByQueryAsync ()
        {
             await FindByQueryAsyncWithHttpInfo();

        }

        /// <summary>
        /// Retorna os RCQs filtrados através de uma query string Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FindByQueryAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/rcq";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
