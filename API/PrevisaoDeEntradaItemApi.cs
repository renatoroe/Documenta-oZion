/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPrevisaoDeEntradaItemApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns></returns>
        void CountByQuery (long? codigoEstabelecimento, string codigoDepositante);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CountByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns></returns>
        void CountByQuery_0 (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CountByQuery_0WithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns></returns>
        void Create (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, PrevisaoEntradaItemDTO previsaoEntradaItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, PrevisaoEntradaItemDTO previsaoEntradaItem);
        /// <summary>
        /// Retorna todos os itens de uma previsão de entrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns>List&lt;PrevisaoEntradaItemDTO&gt;</returns>
        List<PrevisaoEntradaItemDTO> FindAll (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada);

        /// <summary>
        /// Retorna todos os itens de uma previsão de entrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns>ApiResponse of List&lt;PrevisaoEntradaItemDTO&gt;</returns>
        ApiResponse<List<PrevisaoEntradaItemDTO>> FindAllWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns></returns>
        void FindById (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FindByIdWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns></returns>
        void FindByQuery (long? codigoEstabelecimento, string codigoDepositante);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FindByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns></returns>
        void Remove (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoEntrada, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoEntrada);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoEntrada, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoEntrada);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns></returns>
        void Update (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada, PrevisaoEntradaItemDTO previsaoEntradaItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada, PrevisaoEntradaItemDTO previsaoEntradaItem);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CountByQueryAsync (long? codigoEstabelecimento, string codigoDepositante);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CountByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CountByQuery_0Async (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CountByQuery_0AsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, PrevisaoEntradaItemDTO previsaoEntradaItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, PrevisaoEntradaItemDTO previsaoEntradaItem);
        /// <summary>
        /// Retorna todos os itens de uma previsão de entrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns>Task of List&lt;PrevisaoEntradaItemDTO&gt;</returns>
        System.Threading.Tasks.Task<List<PrevisaoEntradaItemDTO>> FindAllAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada);

        /// <summary>
        /// Retorna todos os itens de uma previsão de entrada
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns>Task of ApiResponse (List&lt;PrevisaoEntradaItemDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PrevisaoEntradaItemDTO>>> FindAllAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FindByIdAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FindByIdAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FindByQueryAsync (long? codigoEstabelecimento, string codigoDepositante);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FindByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoEntrada, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoEntrada);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoEntrada, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoEntrada);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada, PrevisaoEntradaItemDTO previsaoEntradaItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada, PrevisaoEntradaItemDTO previsaoEntradaItem);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PrevisaoDeEntradaItemApi : IPrevisaoDeEntradaItemApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PrevisaoDeEntradaItemApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PrevisaoDeEntradaItemApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PrevisaoDeEntradaItemApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PrevisaoDeEntradaItemApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns></returns>
        public void CountByQuery (long? codigoEstabelecimento, string codigoDepositante)
        {
             CountByQueryWithHttpInfo(codigoEstabelecimento, codigoDepositante);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CountByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->CountByQuery");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->CountByQuery");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CountByQueryAsync (long? codigoEstabelecimento, string codigoDepositante)
        {
             await CountByQueryAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante);

        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CountByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->CountByQuery");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->CountByQuery");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns></returns>
        public void CountByQuery_0 (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada)
        {
             CountByQuery_0WithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoEntrada);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CountByQuery_0WithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->CountByQuery_0");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->CountByQuery_0");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeEntradaItemApi->CountByQuery_0");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeEntradaItemApi->CountByQuery_0");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeEntradaItemApi->CountByQuery_0");
            // verify the required parameter 'previsaoEntrada' is set
            if (previsaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'previsaoEntrada' when calling PrevisaoDeEntradaItemApi->CountByQuery_0");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoEntrada}/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoEntrada != null) localVarPathParams.Add("previsaoEntrada", this.Configuration.ApiClient.ParameterToString(previsaoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CountByQuery_0Async (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada)
        {
             await CountByQuery_0AsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoEntrada);

        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CountByQuery_0AsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->CountByQuery_0");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->CountByQuery_0");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeEntradaItemApi->CountByQuery_0");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeEntradaItemApi->CountByQuery_0");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeEntradaItemApi->CountByQuery_0");
            // verify the required parameter 'previsaoEntrada' is set
            if (previsaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'previsaoEntrada' when calling PrevisaoDeEntradaItemApi->CountByQuery_0");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoEntrada}/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoEntrada != null) localVarPathParams.Add("previsaoEntrada", this.Configuration.ApiClient.ParameterToString(previsaoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountByQuery_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns></returns>
        public void Create (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, PrevisaoEntradaItemDTO previsaoEntradaItem)
        {
             CreateWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, previsaoEntradaItem);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, PrevisaoEntradaItemDTO previsaoEntradaItem)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->Create");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->Create");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeEntradaItemApi->Create");
            // verify the required parameter 'previsaoEntradaItem' is set
            if (previsaoEntradaItem == null)
                throw new ApiException(400, "Missing required parameter 'previsaoEntradaItem' when calling PrevisaoDeEntradaItemApi->Create");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (previsaoEntradaItem != null && previsaoEntradaItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(previsaoEntradaItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = previsaoEntradaItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, PrevisaoEntradaItemDTO previsaoEntradaItem)
        {
             await CreateAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, previsaoEntradaItem);

        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, PrevisaoEntradaItemDTO previsaoEntradaItem)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->Create");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->Create");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeEntradaItemApi->Create");
            // verify the required parameter 'previsaoEntradaItem' is set
            if (previsaoEntradaItem == null)
                throw new ApiException(400, "Missing required parameter 'previsaoEntradaItem' when calling PrevisaoDeEntradaItemApi->Create");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (previsaoEntradaItem != null && previsaoEntradaItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(previsaoEntradaItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = previsaoEntradaItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Retorna todos os itens de uma previsão de entrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns>List&lt;PrevisaoEntradaItemDTO&gt;</returns>
        public List<PrevisaoEntradaItemDTO> FindAll (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada)
        {
             ApiResponse<List<PrevisaoEntradaItemDTO>> localVarResponse = FindAllWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoEntrada);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retorna todos os itens de uma previsão de entrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns>ApiResponse of List&lt;PrevisaoEntradaItemDTO&gt;</returns>
        public ApiResponse< List<PrevisaoEntradaItemDTO> > FindAllWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->FindAll");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->FindAll");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeEntradaItemApi->FindAll");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeEntradaItemApi->FindAll");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeEntradaItemApi->FindAll");
            // verify the required parameter 'previsaoEntrada' is set
            if (previsaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'previsaoEntrada' when calling PrevisaoDeEntradaItemApi->FindAll");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoEntrada != null) localVarPathParams.Add("previsaoEntrada", this.Configuration.ApiClient.ParameterToString(previsaoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PrevisaoEntradaItemDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PrevisaoEntradaItemDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PrevisaoEntradaItemDTO>)));
        }

        /// <summary>
        /// Retorna todos os itens de uma previsão de entrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns>Task of List&lt;PrevisaoEntradaItemDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<PrevisaoEntradaItemDTO>> FindAllAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada)
        {
             ApiResponse<List<PrevisaoEntradaItemDTO>> localVarResponse = await FindAllAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoEntrada);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retorna todos os itens de uma previsão de entrada Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <returns>Task of ApiResponse (List&lt;PrevisaoEntradaItemDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PrevisaoEntradaItemDTO>>> FindAllAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->FindAll");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->FindAll");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeEntradaItemApi->FindAll");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeEntradaItemApi->FindAll");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeEntradaItemApi->FindAll");
            // verify the required parameter 'previsaoEntrada' is set
            if (previsaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'previsaoEntrada' when calling PrevisaoDeEntradaItemApi->FindAll");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoEntrada != null) localVarPathParams.Add("previsaoEntrada", this.Configuration.ApiClient.ParameterToString(previsaoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PrevisaoEntradaItemDTO>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PrevisaoEntradaItemDTO>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PrevisaoEntradaItemDTO>)));
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns></returns>
        public void FindById (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada)
        {
             FindByIdWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoEntrada, sequenciaPrevisaoEntrada);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FindByIdWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->FindById");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->FindById");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeEntradaItemApi->FindById");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeEntradaItemApi->FindById");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeEntradaItemApi->FindById");
            // verify the required parameter 'previsaoEntrada' is set
            if (previsaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'previsaoEntrada' when calling PrevisaoDeEntradaItemApi->FindById");
            // verify the required parameter 'sequenciaPrevisaoEntrada' is set
            if (sequenciaPrevisaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'sequenciaPrevisaoEntrada' when calling PrevisaoDeEntradaItemApi->FindById");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoEntrada}/{sequenciaPrevisaoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoEntrada != null) localVarPathParams.Add("previsaoEntrada", this.Configuration.ApiClient.ParameterToString(previsaoEntrada)); // path parameter
            if (sequenciaPrevisaoEntrada != null) localVarPathParams.Add("sequenciaPrevisaoEntrada", this.Configuration.ApiClient.ParameterToString(sequenciaPrevisaoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FindByIdAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada)
        {
             await FindByIdAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoEntrada, sequenciaPrevisaoEntrada);

        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FindByIdAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->FindById");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->FindById");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeEntradaItemApi->FindById");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeEntradaItemApi->FindById");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeEntradaItemApi->FindById");
            // verify the required parameter 'previsaoEntrada' is set
            if (previsaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'previsaoEntrada' when calling PrevisaoDeEntradaItemApi->FindById");
            // verify the required parameter 'sequenciaPrevisaoEntrada' is set
            if (sequenciaPrevisaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'sequenciaPrevisaoEntrada' when calling PrevisaoDeEntradaItemApi->FindById");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoEntrada}/{sequenciaPrevisaoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoEntrada != null) localVarPathParams.Add("previsaoEntrada", this.Configuration.ApiClient.ParameterToString(previsaoEntrada)); // path parameter
            if (sequenciaPrevisaoEntrada != null) localVarPathParams.Add("sequenciaPrevisaoEntrada", this.Configuration.ApiClient.ParameterToString(sequenciaPrevisaoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns></returns>
        public void FindByQuery (long? codigoEstabelecimento, string codigoDepositante)
        {
             FindByQueryWithHttpInfo(codigoEstabelecimento, codigoDepositante);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FindByQueryWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->FindByQuery");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->FindByQuery");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FindByQueryAsync (long? codigoEstabelecimento, string codigoDepositante)
        {
             await FindByQueryAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante);

        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FindByQueryAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->FindByQuery");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->FindByQuery");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindByQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns></returns>
        public void Remove (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoEntrada, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoEntrada)
        {
             RemoveWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, previsaoEntrada, tipoDocumento, serieDocumento, sequenciaPrevisaoEntrada);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoEntrada, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->Remove");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->Remove");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeEntradaItemApi->Remove");
            // verify the required parameter 'previsaoEntrada' is set
            if (previsaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'previsaoEntrada' when calling PrevisaoDeEntradaItemApi->Remove");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeEntradaItemApi->Remove");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeEntradaItemApi->Remove");
            // verify the required parameter 'sequenciaPrevisaoEntrada' is set
            if (sequenciaPrevisaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'sequenciaPrevisaoEntrada' when calling PrevisaoDeEntradaItemApi->Remove");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoEntrada}/{sequenciaPrevisaoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (previsaoEntrada != null) localVarPathParams.Add("previsaoEntrada", this.Configuration.ApiClient.ParameterToString(previsaoEntrada)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (sequenciaPrevisaoEntrada != null) localVarPathParams.Add("sequenciaPrevisaoEntrada", this.Configuration.ApiClient.ParameterToString(sequenciaPrevisaoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoEntrada, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoEntrada)
        {
             await RemoveAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, previsaoEntrada, tipoDocumento, serieDocumento, sequenciaPrevisaoEntrada);

        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string previsaoEntrada, string tipoDocumento, string serieDocumento, long? sequenciaPrevisaoEntrada)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->Remove");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->Remove");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeEntradaItemApi->Remove");
            // verify the required parameter 'previsaoEntrada' is set
            if (previsaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'previsaoEntrada' when calling PrevisaoDeEntradaItemApi->Remove");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeEntradaItemApi->Remove");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeEntradaItemApi->Remove");
            // verify the required parameter 'sequenciaPrevisaoEntrada' is set
            if (sequenciaPrevisaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'sequenciaPrevisaoEntrada' when calling PrevisaoDeEntradaItemApi->Remove");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoEntrada}/{sequenciaPrevisaoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (previsaoEntrada != null) localVarPathParams.Add("previsaoEntrada", this.Configuration.ApiClient.ParameterToString(previsaoEntrada)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (sequenciaPrevisaoEntrada != null) localVarPathParams.Add("sequenciaPrevisaoEntrada", this.Configuration.ApiClient.ParameterToString(sequenciaPrevisaoEntrada)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Remove", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns></returns>
        public void Update (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada, PrevisaoEntradaItemDTO previsaoEntradaItem)
        {
             UpdateWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoEntrada, sequenciaPrevisaoEntrada, previsaoEntradaItem);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada, PrevisaoEntradaItemDTO previsaoEntradaItem)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->Update");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->Update");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeEntradaItemApi->Update");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeEntradaItemApi->Update");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeEntradaItemApi->Update");
            // verify the required parameter 'previsaoEntrada' is set
            if (previsaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'previsaoEntrada' when calling PrevisaoDeEntradaItemApi->Update");
            // verify the required parameter 'sequenciaPrevisaoEntrada' is set
            if (sequenciaPrevisaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'sequenciaPrevisaoEntrada' when calling PrevisaoDeEntradaItemApi->Update");
            // verify the required parameter 'previsaoEntradaItem' is set
            if (previsaoEntradaItem == null)
                throw new ApiException(400, "Missing required parameter 'previsaoEntradaItem' when calling PrevisaoDeEntradaItemApi->Update");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoEntrada}/{sequenciaPrevisaoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoEntrada != null) localVarPathParams.Add("previsaoEntrada", this.Configuration.ApiClient.ParameterToString(previsaoEntrada)); // path parameter
            if (sequenciaPrevisaoEntrada != null) localVarPathParams.Add("sequenciaPrevisaoEntrada", this.Configuration.ApiClient.ParameterToString(sequenciaPrevisaoEntrada)); // path parameter
            if (previsaoEntradaItem != null && previsaoEntradaItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(previsaoEntradaItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = previsaoEntradaItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAsync (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada, PrevisaoEntradaItemDTO previsaoEntradaItem)
        {
             await UpdateAsyncWithHttpInfo(codigoEstabelecimento, codigoDepositante, codigoEmpresa, tipoDocumento, serieDocumento, previsaoEntrada, sequenciaPrevisaoEntrada, previsaoEntradaItem);

        }

        /// <summary>
        ///  Os tipos de dados string desse método devem ser informados em caixa alta (maiúsculo)
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="codigoEstabelecimento"></param>
        /// <param name="codigoDepositante"></param>
        /// <param name="codigoEmpresa"></param>
        /// <param name="tipoDocumento"></param>
        /// <param name="serieDocumento"></param>
        /// <param name="previsaoEntrada"></param>
        /// <param name="sequenciaPrevisaoEntrada"></param>
        /// <param name="previsaoEntradaItem">previsaoEntradaItem</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAsyncWithHttpInfo (long? codigoEstabelecimento, string codigoDepositante, string codigoEmpresa, string tipoDocumento, string serieDocumento, string previsaoEntrada, long? sequenciaPrevisaoEntrada, PrevisaoEntradaItemDTO previsaoEntradaItem)
        {
            // verify the required parameter 'codigoEstabelecimento' is set
            if (codigoEstabelecimento == null)
                throw new ApiException(400, "Missing required parameter 'codigoEstabelecimento' when calling PrevisaoDeEntradaItemApi->Update");
            // verify the required parameter 'codigoDepositante' is set
            if (codigoDepositante == null)
                throw new ApiException(400, "Missing required parameter 'codigoDepositante' when calling PrevisaoDeEntradaItemApi->Update");
            // verify the required parameter 'codigoEmpresa' is set
            if (codigoEmpresa == null)
                throw new ApiException(400, "Missing required parameter 'codigoEmpresa' when calling PrevisaoDeEntradaItemApi->Update");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PrevisaoDeEntradaItemApi->Update");
            // verify the required parameter 'serieDocumento' is set
            if (serieDocumento == null)
                throw new ApiException(400, "Missing required parameter 'serieDocumento' when calling PrevisaoDeEntradaItemApi->Update");
            // verify the required parameter 'previsaoEntrada' is set
            if (previsaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'previsaoEntrada' when calling PrevisaoDeEntradaItemApi->Update");
            // verify the required parameter 'sequenciaPrevisaoEntrada' is set
            if (sequenciaPrevisaoEntrada == null)
                throw new ApiException(400, "Missing required parameter 'sequenciaPrevisaoEntrada' when calling PrevisaoDeEntradaItemApi->Update");
            // verify the required parameter 'previsaoEntradaItem' is set
            if (previsaoEntradaItem == null)
                throw new ApiException(400, "Missing required parameter 'previsaoEntradaItem' when calling PrevisaoDeEntradaItemApi->Update");

            var localVarPath = "/v1/previsao-entrada-item/{codigoEstabelecimento}/{codigoDepositante}/{codigoEmpresa}/{tipoDocumento}/{serieDocumento}/{previsaoEntrada}/{sequenciaPrevisaoEntrada}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (codigoEstabelecimento != null) localVarPathParams.Add("codigoEstabelecimento", this.Configuration.ApiClient.ParameterToString(codigoEstabelecimento)); // path parameter
            if (codigoDepositante != null) localVarPathParams.Add("codigoDepositante", this.Configuration.ApiClient.ParameterToString(codigoDepositante)); // path parameter
            if (codigoEmpresa != null) localVarPathParams.Add("codigoEmpresa", this.Configuration.ApiClient.ParameterToString(codigoEmpresa)); // path parameter
            if (tipoDocumento != null) localVarPathParams.Add("tipoDocumento", this.Configuration.ApiClient.ParameterToString(tipoDocumento)); // path parameter
            if (serieDocumento != null) localVarPathParams.Add("serieDocumento", this.Configuration.ApiClient.ParameterToString(serieDocumento)); // path parameter
            if (previsaoEntrada != null) localVarPathParams.Add("previsaoEntrada", this.Configuration.ApiClient.ParameterToString(previsaoEntrada)); // path parameter
            if (sequenciaPrevisaoEntrada != null) localVarPathParams.Add("sequenciaPrevisaoEntrada", this.Configuration.ApiClient.ParameterToString(sequenciaPrevisaoEntrada)); // path parameter
            if (previsaoEntradaItem != null && previsaoEntradaItem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(previsaoEntradaItem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = previsaoEntradaItem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
