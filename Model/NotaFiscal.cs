/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// NotaFiscal
    /// </summary>
    [DataContract]
    public partial class NotaFiscal :  IEquatable<NotaFiscal>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotaFiscal" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NotaFiscal() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotaFiscal" /> class.
        /// </summary>
        /// <param name="nuPedidoOrigem">nuPedidoOrigem (required).</param>
        /// <param name="nuChaveNotaFiscal">nuChaveNotaFiscal (required).</param>
        /// <param name="nuNotaFiscal">nuNotaFiscal (required).</param>
        /// <param name="nuSerieNotaFiscal">nuSerieNotaFiscal (required).</param>
        /// <param name="dtDataEmissaoNotaFiscal">dtDataEmissaoNotaFiscal (required).</param>
        /// <param name="txXmlNotaFiscal">txXmlNotaFiscal (required).</param>
        /// <param name="atualizar">Utilize esse parâmetro para habilitar a atualização do valor unitário do item no Store WMAS.</param>
        public NotaFiscal(string nuPedidoOrigem = default(string), string nuChaveNotaFiscal = default(string), string nuNotaFiscal = default(string), string nuSerieNotaFiscal = default(string), DateTime? dtDataEmissaoNotaFiscal = default(DateTime?), List<byte[]> txXmlNotaFiscal = default(List<byte[]>), bool? atualizar = default(bool?))
        {
            // to ensure "nuPedidoOrigem" is required (not null)
            if (nuPedidoOrigem == null)
            {
                throw new InvalidDataException("nuPedidoOrigem is a required property for NotaFiscal and cannot be null");
            }
            else
            {
                this.NuPedidoOrigem = nuPedidoOrigem;
            }
            // to ensure "nuChaveNotaFiscal" is required (not null)
            if (nuChaveNotaFiscal == null)
            {
                throw new InvalidDataException("nuChaveNotaFiscal is a required property for NotaFiscal and cannot be null");
            }
            else
            {
                this.NuChaveNotaFiscal = nuChaveNotaFiscal;
            }
            // to ensure "nuNotaFiscal" is required (not null)
            if (nuNotaFiscal == null)
            {
                throw new InvalidDataException("nuNotaFiscal is a required property for NotaFiscal and cannot be null");
            }
            else
            {
                this.NuNotaFiscal = nuNotaFiscal;
            }
            // to ensure "nuSerieNotaFiscal" is required (not null)
            if (nuSerieNotaFiscal == null)
            {
                throw new InvalidDataException("nuSerieNotaFiscal is a required property for NotaFiscal and cannot be null");
            }
            else
            {
                this.NuSerieNotaFiscal = nuSerieNotaFiscal;
            }
            // to ensure "dtDataEmissaoNotaFiscal" is required (not null)
            if (dtDataEmissaoNotaFiscal == null)
            {
                throw new InvalidDataException("dtDataEmissaoNotaFiscal is a required property for NotaFiscal and cannot be null");
            }
            else
            {
                this.DtDataEmissaoNotaFiscal = dtDataEmissaoNotaFiscal;
            }
            // to ensure "txXmlNotaFiscal" is required (not null)
            if (txXmlNotaFiscal == null)
            {
                throw new InvalidDataException("txXmlNotaFiscal is a required property for NotaFiscal and cannot be null");
            }
            else
            {
                this.TxXmlNotaFiscal = txXmlNotaFiscal;
            }
            this.Atualizar = atualizar;
        }
        
        /// <summary>
        /// Gets or Sets NuPedidoOrigem
        /// </summary>
        [DataMember(Name="nu_pedido_origem", EmitDefaultValue=false)]
        public string NuPedidoOrigem { get; set; }

        /// <summary>
        /// Gets or Sets NuChaveNotaFiscal
        /// </summary>
        [DataMember(Name="nu_chaveNotaFiscal", EmitDefaultValue=false)]
        public string NuChaveNotaFiscal { get; set; }

        /// <summary>
        /// Gets or Sets NuNotaFiscal
        /// </summary>
        [DataMember(Name="nu_NotaFiscal", EmitDefaultValue=false)]
        public string NuNotaFiscal { get; set; }

        /// <summary>
        /// Gets or Sets NuSerieNotaFiscal
        /// </summary>
        [DataMember(Name="nu_serieNotaFiscal", EmitDefaultValue=false)]
        public string NuSerieNotaFiscal { get; set; }

        /// <summary>
        /// Gets or Sets DtDataEmissaoNotaFiscal
        /// </summary>
        [DataMember(Name="dt_dataEmissaoNotaFiscal", EmitDefaultValue=false)]
        public DateTime? DtDataEmissaoNotaFiscal { get; set; }

        /// <summary>
        /// Gets or Sets TxXmlNotaFiscal
        /// </summary>
        [DataMember(Name="tx_xmlNotaFiscal", EmitDefaultValue=false)]
        public List<byte[]> TxXmlNotaFiscal { get; set; }

        /// <summary>
        /// Utilize esse parâmetro para habilitar a atualização do valor unitário do item no Store WMAS
        /// </summary>
        /// <value>Utilize esse parâmetro para habilitar a atualização do valor unitário do item no Store WMAS</value>
        [DataMember(Name="atualizar", EmitDefaultValue=false)]
        public bool? Atualizar { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotaFiscal {\n");
            sb.Append("  NuPedidoOrigem: ").Append(NuPedidoOrigem).Append("\n");
            sb.Append("  NuChaveNotaFiscal: ").Append(NuChaveNotaFiscal).Append("\n");
            sb.Append("  NuNotaFiscal: ").Append(NuNotaFiscal).Append("\n");
            sb.Append("  NuSerieNotaFiscal: ").Append(NuSerieNotaFiscal).Append("\n");
            sb.Append("  DtDataEmissaoNotaFiscal: ").Append(DtDataEmissaoNotaFiscal).Append("\n");
            sb.Append("  TxXmlNotaFiscal: ").Append(TxXmlNotaFiscal).Append("\n");
            sb.Append("  Atualizar: ").Append(Atualizar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotaFiscal);
        }

        /// <summary>
        /// Returns true if NotaFiscal instances are equal
        /// </summary>
        /// <param name="input">Instance of NotaFiscal to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotaFiscal input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NuPedidoOrigem == input.NuPedidoOrigem ||
                    (this.NuPedidoOrigem != null &&
                    this.NuPedidoOrigem.Equals(input.NuPedidoOrigem))
                ) && 
                (
                    this.NuChaveNotaFiscal == input.NuChaveNotaFiscal ||
                    (this.NuChaveNotaFiscal != null &&
                    this.NuChaveNotaFiscal.Equals(input.NuChaveNotaFiscal))
                ) && 
                (
                    this.NuNotaFiscal == input.NuNotaFiscal ||
                    (this.NuNotaFiscal != null &&
                    this.NuNotaFiscal.Equals(input.NuNotaFiscal))
                ) && 
                (
                    this.NuSerieNotaFiscal == input.NuSerieNotaFiscal ||
                    (this.NuSerieNotaFiscal != null &&
                    this.NuSerieNotaFiscal.Equals(input.NuSerieNotaFiscal))
                ) && 
                (
                    this.DtDataEmissaoNotaFiscal == input.DtDataEmissaoNotaFiscal ||
                    (this.DtDataEmissaoNotaFiscal != null &&
                    this.DtDataEmissaoNotaFiscal.Equals(input.DtDataEmissaoNotaFiscal))
                ) && 
                (
                    this.TxXmlNotaFiscal == input.TxXmlNotaFiscal ||
                    this.TxXmlNotaFiscal != null &&
                    this.TxXmlNotaFiscal.SequenceEqual(input.TxXmlNotaFiscal)
                ) && 
                (
                    this.Atualizar == input.Atualizar ||
                    (this.Atualizar != null &&
                    this.Atualizar.Equals(input.Atualizar))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NuPedidoOrigem != null)
                    hashCode = hashCode * 59 + this.NuPedidoOrigem.GetHashCode();
                if (this.NuChaveNotaFiscal != null)
                    hashCode = hashCode * 59 + this.NuChaveNotaFiscal.GetHashCode();
                if (this.NuNotaFiscal != null)
                    hashCode = hashCode * 59 + this.NuNotaFiscal.GetHashCode();
                if (this.NuSerieNotaFiscal != null)
                    hashCode = hashCode * 59 + this.NuSerieNotaFiscal.GetHashCode();
                if (this.DtDataEmissaoNotaFiscal != null)
                    hashCode = hashCode * 59 + this.DtDataEmissaoNotaFiscal.GetHashCode();
                if (this.TxXmlNotaFiscal != null)
                    hashCode = hashCode * 59 + this.TxXmlNotaFiscal.GetHashCode();
                if (this.Atualizar != null)
                    hashCode = hashCode * 59 + this.Atualizar.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
