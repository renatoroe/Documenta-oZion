/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PrevisaoSaidaDTO
    /// </summary>
    [DataContract]
    public partial class PrevisaoSaidaDTO :  IEquatable<PrevisaoSaidaDTO>, IValidatableObject
    {
        /// <summary>
        /// Defines EstadoDocumento
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EstadoDocumentoEnum
        {
            
            /// <summary>
            /// Enum EMESPERA for value: EM_ESPERA
            /// </summary>
            [EnumMember(Value = "EM_ESPERA")]
            EMESPERA = 1,
            
            /// <summary>
            /// Enum PENDENTE for value: PENDENTE
            /// </summary>
            [EnumMember(Value = "PENDENTE")]
            PENDENTE = 2,
            
            /// <summary>
            /// Enum PREVISTO for value: PREVISTO
            /// </summary>
            [EnumMember(Value = "PREVISTO")]
            PREVISTO = 3,
            
            /// <summary>
            /// Enum ATENDIDO for value: ATENDIDO
            /// </summary>
            [EnumMember(Value = "ATENDIDO")]
            ATENDIDO = 4,
            
            /// <summary>
            /// Enum ENCERRADO for value: ENCERRADO
            /// </summary>
            [EnumMember(Value = "ENCERRADO")]
            ENCERRADO = 5,
            
            /// <summary>
            /// Enum CANCELADO for value: CANCELADO
            /// </summary>
            [EnumMember(Value = "CANCELADO")]
            CANCELADO = 6
        }

        /// <summary>
        /// Gets or Sets EstadoDocumento
        /// </summary>
        [DataMember(Name="estadoDocumento", EmitDefaultValue=false)]
        public EstadoDocumentoEnum? EstadoDocumento { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrevisaoSaidaDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PrevisaoSaidaDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrevisaoSaidaDTO" /> class.
        /// </summary>
        /// <param name="codigoEstabelecimento">codigoEstabelecimento.</param>
        /// <param name="codigoEmpresa">codigoEmpresa.</param>
        /// <param name="codigoDepositante">codigoDepositante.</param>
        /// <param name="tipoDocumento">tipoDocumento.</param>
        /// <param name="serieDocumento">serieDocumento.</param>
        /// <param name="previsaoSaida">previsaoSaida.</param>
        /// <param name="codigoDocumento">codigoDocumento.</param>
        /// <param name="documentoRelacionado">documentoRelacionado.</param>
        /// <param name="estadoDocumento">estadoDocumento.</param>
        /// <param name="codigoEmpresaEmitente">codigoEmpresaEmitente.</param>
        /// <param name="dataEmissao">dataEmissao.</param>
        /// <param name="dataMovimento">dataMovimento.</param>
        /// <param name="especieDocumento">especieDocumento.</param>
        /// <param name="especieVolume">especieVolume.</param>
        /// <param name="quantidadeVolume">quantidadeVolume.</param>
        /// <param name="numeroVolume">numeroVolume.</param>
        /// <param name="marcaVolume">marcaVolume.</param>
        /// <param name="tipoFrete">tipoFrete.</param>
        /// <param name="nfeChaveAcesso">nfeChaveAcesso.</param>
        /// <param name="nfeProtocolo">nfeProtocolo.</param>
        /// <param name="nfeDigestValue">nfeDigestValue.</param>
        /// <param name="nfeDataRecebimento">nfeDataRecebimento.</param>
        /// <param name="valorTotalDocumento">valorTotalDocumento.</param>
        /// <param name="valorIcms">valorIcms.</param>
        /// <param name="valorIcmsSub">valorIcmsSub.</param>
        /// <param name="valorIpi">valorIpi.</param>
        /// <param name="valorFrete">valorFrete.</param>
        /// <param name="valorSeguro">valorSeguro.</param>
        /// <param name="valorServico">valorServico.</param>
        /// <param name="valorDesconto">valorDesconto.</param>
        /// <param name="valorTotalProduto">valorTotalProduto.</param>
        /// <param name="valorBaseIcms">valorBaseIcms.</param>
        /// <param name="valorBaseIcmsSub">valorBaseIcmsSub.</param>
        /// <param name="valorBaseIpi">valorBaseIpi.</param>
        /// <param name="pesoBruto">pesoBruto.</param>
        /// <param name="pesoLiquido">pesoLiquido.</param>
        /// <param name="informacaoAdicional1">informacaoAdicional1.</param>
        /// <param name="informacaoAdicional2">informacaoAdicional2.</param>
        /// <param name="informacaoAdicional3">informacaoAdicional3.</param>
        /// <param name="usuario">usuario.</param>
        /// <param name="usuarioGeracao">usuarioGeracao.</param>
        /// <param name="dataHistorico">dataHistorico.</param>
        /// <param name="dataGeracao">dataGeracao.</param>
        /// <param name="placaVeiculo">placaVeiculo.</param>
        /// <param name="ufVeiculo">ufVeiculo.</param>
        /// <param name="nomeMotorista">nomeMotorista.</param>
        /// <param name="documentoMotorista">documentoMotorista.</param>
        /// <param name="numeroDocumento">numeroDocumento.</param>
        /// <param name="observacaoDocumento">observacaoDocumento.</param>
        /// <param name="dataPrevisaoMovimento">dataPrevisaoMovimento.</param>
        /// <param name="estabelecimento">estabelecimento.</param>
        /// <param name="depositante">depositante.</param>
        /// <param name="matriz">matriz.</param>
        /// <param name="empresaDestino">empresaDestino.</param>
        /// <param name="transportadora">transportadora.</param>
        /// <param name="naturezaOperacao">naturezaOperacao (required).</param>
        /// <param name="empresa">empresa.</param>
        /// <param name="nfeAmbiente">nfeAmbiente.</param>
        /// <param name="nfeTipoEmissao">nfeTipoEmissao.</param>
        /// <param name="nfeTipoImpressao">nfeTipoImpressao.</param>
        /// <param name="finalidadeDocumento">finalidadeDocumento.</param>
        /// <param name="previsaoSaidaItens">previsaoSaidaItens.</param>
        public PrevisaoSaidaDTO(long? codigoEstabelecimento = default(long?), string codigoEmpresa = default(string), string codigoDepositante = default(string), string tipoDocumento = default(string), string serieDocumento = default(string), string previsaoSaida = default(string), long? codigoDocumento = default(long?), string documentoRelacionado = default(string), EstadoDocumentoEnum? estadoDocumento = default(EstadoDocumentoEnum?), string codigoEmpresaEmitente = default(string), DateTime? dataEmissao = default(DateTime?), DateTime? dataMovimento = default(DateTime?), string especieDocumento = default(string), string especieVolume = default(string), decimal? quantidadeVolume = default(decimal?), string numeroVolume = default(string), string marcaVolume = default(string), long? tipoFrete = default(long?), string nfeChaveAcesso = default(string), string nfeProtocolo = default(string), string nfeDigestValue = default(string), DateTime? nfeDataRecebimento = default(DateTime?), decimal? valorTotalDocumento = default(decimal?), decimal? valorIcms = default(decimal?), decimal? valorIcmsSub = default(decimal?), decimal? valorIpi = default(decimal?), decimal? valorFrete = default(decimal?), decimal? valorSeguro = default(decimal?), decimal? valorServico = default(decimal?), decimal? valorDesconto = default(decimal?), decimal? valorTotalProduto = default(decimal?), decimal? valorBaseIcms = default(decimal?), decimal? valorBaseIcmsSub = default(decimal?), decimal? valorBaseIpi = default(decimal?), decimal? pesoBruto = default(decimal?), decimal? pesoLiquido = default(decimal?), string informacaoAdicional1 = default(string), string informacaoAdicional2 = default(string), string informacaoAdicional3 = default(string), string usuario = default(string), string usuarioGeracao = default(string), DateTime? dataHistorico = default(DateTime?), DateTime? dataGeracao = default(DateTime?), string placaVeiculo = default(string), string ufVeiculo = default(string), string nomeMotorista = default(string), string documentoMotorista = default(string), string numeroDocumento = default(string), string observacaoDocumento = default(string), DateTime? dataPrevisaoMovimento = default(DateTime?), EstabelecimentoDTO estabelecimento = default(EstabelecimentoDTO), EmpresaDTO depositante = default(EmpresaDTO), EmpresaDTO matriz = default(EmpresaDTO), EmpresaDTO empresaDestino = default(EmpresaDTO), EmpresaDTO transportadora = default(EmpresaDTO), NaturezaOperacaoDTO naturezaOperacao = default(NaturezaOperacaoDTO), EmpresaDTO empresa = default(EmpresaDTO), NfeAmbienteDTO nfeAmbiente = default(NfeAmbienteDTO), NfeTipoEmissaoDTO nfeTipoEmissao = default(NfeTipoEmissaoDTO), NfeTipoImpressaoDTO nfeTipoImpressao = default(NfeTipoImpressaoDTO), FinalidadeDocumentoDTO finalidadeDocumento = default(FinalidadeDocumentoDTO), List<PrevisaoSaidaItemDTO> previsaoSaidaItens = default(List<PrevisaoSaidaItemDTO>))
        {
            // to ensure "naturezaOperacao" is required (not null)
            if (naturezaOperacao == null)
            {
                throw new InvalidDataException("naturezaOperacao is a required property for PrevisaoSaidaDTO and cannot be null");
            }
            else
            {
                this.NaturezaOperacao = naturezaOperacao;
            }
            this.CodigoEstabelecimento = codigoEstabelecimento;
            this.CodigoEmpresa = codigoEmpresa;
            this.CodigoDepositante = codigoDepositante;
            this.TipoDocumento = tipoDocumento;
            this.SerieDocumento = serieDocumento;
            this.PrevisaoSaida = previsaoSaida;
            this.CodigoDocumento = codigoDocumento;
            this.DocumentoRelacionado = documentoRelacionado;
            this.EstadoDocumento = estadoDocumento;
            this.CodigoEmpresaEmitente = codigoEmpresaEmitente;
            this.DataEmissao = dataEmissao;
            this.DataMovimento = dataMovimento;
            this.EspecieDocumento = especieDocumento;
            this.EspecieVolume = especieVolume;
            this.QuantidadeVolume = quantidadeVolume;
            this.NumeroVolume = numeroVolume;
            this.MarcaVolume = marcaVolume;
            this.TipoFrete = tipoFrete;
            this.NfeChaveAcesso = nfeChaveAcesso;
            this.NfeProtocolo = nfeProtocolo;
            this.NfeDigestValue = nfeDigestValue;
            this.NfeDataRecebimento = nfeDataRecebimento;
            this.ValorTotalDocumento = valorTotalDocumento;
            this.ValorIcms = valorIcms;
            this.ValorIcmsSub = valorIcmsSub;
            this.ValorIpi = valorIpi;
            this.ValorFrete = valorFrete;
            this.ValorSeguro = valorSeguro;
            this.ValorServico = valorServico;
            this.ValorDesconto = valorDesconto;
            this.ValorTotalProduto = valorTotalProduto;
            this.ValorBaseIcms = valorBaseIcms;
            this.ValorBaseIcmsSub = valorBaseIcmsSub;
            this.ValorBaseIpi = valorBaseIpi;
            this.PesoBruto = pesoBruto;
            this.PesoLiquido = pesoLiquido;
            this.InformacaoAdicional1 = informacaoAdicional1;
            this.InformacaoAdicional2 = informacaoAdicional2;
            this.InformacaoAdicional3 = informacaoAdicional3;
            this.Usuario = usuario;
            this.UsuarioGeracao = usuarioGeracao;
            this.DataHistorico = dataHistorico;
            this.DataGeracao = dataGeracao;
            this.PlacaVeiculo = placaVeiculo;
            this.UfVeiculo = ufVeiculo;
            this.NomeMotorista = nomeMotorista;
            this.DocumentoMotorista = documentoMotorista;
            this.NumeroDocumento = numeroDocumento;
            this.ObservacaoDocumento = observacaoDocumento;
            this.DataPrevisaoMovimento = dataPrevisaoMovimento;
            this.Estabelecimento = estabelecimento;
            this.Depositante = depositante;
            this.Matriz = matriz;
            this.EmpresaDestino = empresaDestino;
            this.Transportadora = transportadora;
            this.Empresa = empresa;
            this.NfeAmbiente = nfeAmbiente;
            this.NfeTipoEmissao = nfeTipoEmissao;
            this.NfeTipoImpressao = nfeTipoImpressao;
            this.FinalidadeDocumento = finalidadeDocumento;
            this.PrevisaoSaidaItens = previsaoSaidaItens;
        }
        
        /// <summary>
        /// Gets or Sets CodigoEstabelecimento
        /// </summary>
        [DataMember(Name="codigoEstabelecimento", EmitDefaultValue=false)]
        public long? CodigoEstabelecimento { get; set; }

        /// <summary>
        /// Gets or Sets CodigoEmpresa
        /// </summary>
        [DataMember(Name="codigoEmpresa", EmitDefaultValue=false)]
        public string CodigoEmpresa { get; set; }

        /// <summary>
        /// Gets or Sets CodigoDepositante
        /// </summary>
        [DataMember(Name="codigoDepositante", EmitDefaultValue=false)]
        public string CodigoDepositante { get; set; }

        /// <summary>
        /// Gets or Sets TipoDocumento
        /// </summary>
        [DataMember(Name="tipoDocumento", EmitDefaultValue=false)]
        public string TipoDocumento { get; set; }

        /// <summary>
        /// Gets or Sets SerieDocumento
        /// </summary>
        [DataMember(Name="serieDocumento", EmitDefaultValue=false)]
        public string SerieDocumento { get; set; }

        /// <summary>
        /// Gets or Sets PrevisaoSaida
        /// </summary>
        [DataMember(Name="previsaoSaida", EmitDefaultValue=false)]
        public string PrevisaoSaida { get; set; }

        /// <summary>
        /// Gets or Sets CodigoDocumento
        /// </summary>
        [DataMember(Name="codigoDocumento", EmitDefaultValue=false)]
        public long? CodigoDocumento { get; set; }

        /// <summary>
        /// Gets or Sets DocumentoRelacionado
        /// </summary>
        [DataMember(Name="documentoRelacionado", EmitDefaultValue=false)]
        public string DocumentoRelacionado { get; set; }


        /// <summary>
        /// Gets or Sets CodigoEmpresaEmitente
        /// </summary>
        [DataMember(Name="codigoEmpresaEmitente", EmitDefaultValue=false)]
        public string CodigoEmpresaEmitente { get; set; }

        /// <summary>
        /// Gets or Sets DataEmissao
        /// </summary>
        [DataMember(Name="dataEmissao", EmitDefaultValue=false)]
        public DateTime? DataEmissao { get; set; }

        /// <summary>
        /// Gets or Sets DataMovimento
        /// </summary>
        [DataMember(Name="dataMovimento", EmitDefaultValue=false)]
        public DateTime? DataMovimento { get; set; }

        /// <summary>
        /// Gets or Sets EspecieDocumento
        /// </summary>
        [DataMember(Name="especieDocumento", EmitDefaultValue=false)]
        public string EspecieDocumento { get; set; }

        /// <summary>
        /// Gets or Sets EspecieVolume
        /// </summary>
        [DataMember(Name="especieVolume", EmitDefaultValue=false)]
        public string EspecieVolume { get; set; }

        /// <summary>
        /// Gets or Sets QuantidadeVolume
        /// </summary>
        [DataMember(Name="quantidadeVolume", EmitDefaultValue=false)]
        public decimal? QuantidadeVolume { get; set; }

        /// <summary>
        /// Gets or Sets NumeroVolume
        /// </summary>
        [DataMember(Name="numeroVolume", EmitDefaultValue=false)]
        public string NumeroVolume { get; set; }

        /// <summary>
        /// Gets or Sets MarcaVolume
        /// </summary>
        [DataMember(Name="marcaVolume", EmitDefaultValue=false)]
        public string MarcaVolume { get; set; }

        /// <summary>
        /// Gets or Sets TipoFrete
        /// </summary>
        [DataMember(Name="tipoFrete", EmitDefaultValue=false)]
        public long? TipoFrete { get; set; }

        /// <summary>
        /// Gets or Sets NfeChaveAcesso
        /// </summary>
        [DataMember(Name="nfeChaveAcesso", EmitDefaultValue=false)]
        public string NfeChaveAcesso { get; set; }

        /// <summary>
        /// Gets or Sets NfeProtocolo
        /// </summary>
        [DataMember(Name="nfeProtocolo", EmitDefaultValue=false)]
        public string NfeProtocolo { get; set; }

        /// <summary>
        /// Gets or Sets NfeDigestValue
        /// </summary>
        [DataMember(Name="nfeDigestValue", EmitDefaultValue=false)]
        public string NfeDigestValue { get; set; }

        /// <summary>
        /// Gets or Sets NfeDataRecebimento
        /// </summary>
        [DataMember(Name="nfeDataRecebimento", EmitDefaultValue=false)]
        public DateTime? NfeDataRecebimento { get; set; }

        /// <summary>
        /// Gets or Sets ValorTotalDocumento
        /// </summary>
        [DataMember(Name="valorTotalDocumento", EmitDefaultValue=false)]
        public decimal? ValorTotalDocumento { get; set; }

        /// <summary>
        /// Gets or Sets ValorIcms
        /// </summary>
        [DataMember(Name="valorIcms", EmitDefaultValue=false)]
        public decimal? ValorIcms { get; set; }

        /// <summary>
        /// Gets or Sets ValorIcmsSub
        /// </summary>
        [DataMember(Name="valorIcmsSub", EmitDefaultValue=false)]
        public decimal? ValorIcmsSub { get; set; }

        /// <summary>
        /// Gets or Sets ValorIpi
        /// </summary>
        [DataMember(Name="valorIpi", EmitDefaultValue=false)]
        public decimal? ValorIpi { get; set; }

        /// <summary>
        /// Gets or Sets ValorFrete
        /// </summary>
        [DataMember(Name="valorFrete", EmitDefaultValue=false)]
        public decimal? ValorFrete { get; set; }

        /// <summary>
        /// Gets or Sets ValorSeguro
        /// </summary>
        [DataMember(Name="valorSeguro", EmitDefaultValue=false)]
        public decimal? ValorSeguro { get; set; }

        /// <summary>
        /// Gets or Sets ValorServico
        /// </summary>
        [DataMember(Name="valorServico", EmitDefaultValue=false)]
        public decimal? ValorServico { get; set; }

        /// <summary>
        /// Gets or Sets ValorDesconto
        /// </summary>
        [DataMember(Name="valorDesconto", EmitDefaultValue=false)]
        public decimal? ValorDesconto { get; set; }

        /// <summary>
        /// Gets or Sets ValorTotalProduto
        /// </summary>
        [DataMember(Name="valorTotalProduto", EmitDefaultValue=false)]
        public decimal? ValorTotalProduto { get; set; }

        /// <summary>
        /// Gets or Sets ValorBaseIcms
        /// </summary>
        [DataMember(Name="valorBaseIcms", EmitDefaultValue=false)]
        public decimal? ValorBaseIcms { get; set; }

        /// <summary>
        /// Gets or Sets ValorBaseIcmsSub
        /// </summary>
        [DataMember(Name="valorBaseIcmsSub", EmitDefaultValue=false)]
        public decimal? ValorBaseIcmsSub { get; set; }

        /// <summary>
        /// Gets or Sets ValorBaseIpi
        /// </summary>
        [DataMember(Name="valorBaseIpi", EmitDefaultValue=false)]
        public decimal? ValorBaseIpi { get; set; }

        /// <summary>
        /// Gets or Sets PesoBruto
        /// </summary>
        [DataMember(Name="pesoBruto", EmitDefaultValue=false)]
        public decimal? PesoBruto { get; set; }

        /// <summary>
        /// Gets or Sets PesoLiquido
        /// </summary>
        [DataMember(Name="pesoLiquido", EmitDefaultValue=false)]
        public decimal? PesoLiquido { get; set; }

        /// <summary>
        /// Gets or Sets InformacaoAdicional1
        /// </summary>
        [DataMember(Name="informacaoAdicional1", EmitDefaultValue=false)]
        public string InformacaoAdicional1 { get; set; }

        /// <summary>
        /// Gets or Sets InformacaoAdicional2
        /// </summary>
        [DataMember(Name="informacaoAdicional2", EmitDefaultValue=false)]
        public string InformacaoAdicional2 { get; set; }

        /// <summary>
        /// Gets or Sets InformacaoAdicional3
        /// </summary>
        [DataMember(Name="informacaoAdicional3", EmitDefaultValue=false)]
        public string InformacaoAdicional3 { get; set; }

        /// <summary>
        /// Gets or Sets Usuario
        /// </summary>
        [DataMember(Name="usuario", EmitDefaultValue=false)]
        public string Usuario { get; set; }

        /// <summary>
        /// Gets or Sets UsuarioGeracao
        /// </summary>
        [DataMember(Name="usuarioGeracao", EmitDefaultValue=false)]
        public string UsuarioGeracao { get; set; }

        /// <summary>
        /// Gets or Sets DataHistorico
        /// </summary>
        [DataMember(Name="dataHistorico", EmitDefaultValue=false)]
        public DateTime? DataHistorico { get; set; }

        /// <summary>
        /// Gets or Sets DataGeracao
        /// </summary>
        [DataMember(Name="dataGeracao", EmitDefaultValue=false)]
        public DateTime? DataGeracao { get; set; }

        /// <summary>
        /// Gets or Sets PlacaVeiculo
        /// </summary>
        [DataMember(Name="placaVeiculo", EmitDefaultValue=false)]
        public string PlacaVeiculo { get; set; }

        /// <summary>
        /// Gets or Sets UfVeiculo
        /// </summary>
        [DataMember(Name="ufVeiculo", EmitDefaultValue=false)]
        public string UfVeiculo { get; set; }

        /// <summary>
        /// Gets or Sets NomeMotorista
        /// </summary>
        [DataMember(Name="nomeMotorista", EmitDefaultValue=false)]
        public string NomeMotorista { get; set; }

        /// <summary>
        /// Gets or Sets DocumentoMotorista
        /// </summary>
        [DataMember(Name="documentoMotorista", EmitDefaultValue=false)]
        public string DocumentoMotorista { get; set; }

        /// <summary>
        /// Gets or Sets NumeroDocumento
        /// </summary>
        [DataMember(Name="numeroDocumento", EmitDefaultValue=false)]
        public string NumeroDocumento { get; set; }

        /// <summary>
        /// Gets or Sets ObservacaoDocumento
        /// </summary>
        [DataMember(Name="observacaoDocumento", EmitDefaultValue=false)]
        public string ObservacaoDocumento { get; set; }

        /// <summary>
        /// Gets or Sets DataPrevisaoMovimento
        /// </summary>
        [DataMember(Name="dataPrevisaoMovimento", EmitDefaultValue=false)]
        public DateTime? DataPrevisaoMovimento { get; set; }

        /// <summary>
        /// Gets or Sets Estabelecimento
        /// </summary>
        [DataMember(Name="estabelecimento", EmitDefaultValue=false)]
        public EstabelecimentoDTO Estabelecimento { get; set; }

        /// <summary>
        /// Gets or Sets Depositante
        /// </summary>
        [DataMember(Name="depositante", EmitDefaultValue=false)]
        public EmpresaDTO Depositante { get; set; }

        /// <summary>
        /// Gets or Sets Matriz
        /// </summary>
        [DataMember(Name="matriz", EmitDefaultValue=false)]
        public EmpresaDTO Matriz { get; set; }

        /// <summary>
        /// Gets or Sets EmpresaDestino
        /// </summary>
        [DataMember(Name="empresaDestino", EmitDefaultValue=false)]
        public EmpresaDTO EmpresaDestino { get; set; }

        /// <summary>
        /// Gets or Sets Transportadora
        /// </summary>
        [DataMember(Name="transportadora", EmitDefaultValue=false)]
        public EmpresaDTO Transportadora { get; set; }

        /// <summary>
        /// Gets or Sets NaturezaOperacao
        /// </summary>
        [DataMember(Name="naturezaOperacao", EmitDefaultValue=false)]
        public NaturezaOperacaoDTO NaturezaOperacao { get; set; }

        /// <summary>
        /// Gets or Sets Empresa
        /// </summary>
        [DataMember(Name="empresa", EmitDefaultValue=false)]
        public EmpresaDTO Empresa { get; set; }

        /// <summary>
        /// Gets or Sets NfeAmbiente
        /// </summary>
        [DataMember(Name="nfeAmbiente", EmitDefaultValue=false)]
        public NfeAmbienteDTO NfeAmbiente { get; set; }

        /// <summary>
        /// Gets or Sets NfeTipoEmissao
        /// </summary>
        [DataMember(Name="nfeTipoEmissao", EmitDefaultValue=false)]
        public NfeTipoEmissaoDTO NfeTipoEmissao { get; set; }

        /// <summary>
        /// Gets or Sets NfeTipoImpressao
        /// </summary>
        [DataMember(Name="nfeTipoImpressao", EmitDefaultValue=false)]
        public NfeTipoImpressaoDTO NfeTipoImpressao { get; set; }

        /// <summary>
        /// Gets or Sets FinalidadeDocumento
        /// </summary>
        [DataMember(Name="finalidadeDocumento", EmitDefaultValue=false)]
        public FinalidadeDocumentoDTO FinalidadeDocumento { get; set; }

        /// <summary>
        /// Gets or Sets PrevisaoSaidaItens
        /// </summary>
        [DataMember(Name="previsaoSaidaItens", EmitDefaultValue=false)]
        public List<PrevisaoSaidaItemDTO> PrevisaoSaidaItens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrevisaoSaidaDTO {\n");
            sb.Append("  CodigoEstabelecimento: ").Append(CodigoEstabelecimento).Append("\n");
            sb.Append("  CodigoEmpresa: ").Append(CodigoEmpresa).Append("\n");
            sb.Append("  CodigoDepositante: ").Append(CodigoDepositante).Append("\n");
            sb.Append("  TipoDocumento: ").Append(TipoDocumento).Append("\n");
            sb.Append("  SerieDocumento: ").Append(SerieDocumento).Append("\n");
            sb.Append("  PrevisaoSaida: ").Append(PrevisaoSaida).Append("\n");
            sb.Append("  CodigoDocumento: ").Append(CodigoDocumento).Append("\n");
            sb.Append("  DocumentoRelacionado: ").Append(DocumentoRelacionado).Append("\n");
            sb.Append("  EstadoDocumento: ").Append(EstadoDocumento).Append("\n");
            sb.Append("  CodigoEmpresaEmitente: ").Append(CodigoEmpresaEmitente).Append("\n");
            sb.Append("  DataEmissao: ").Append(DataEmissao).Append("\n");
            sb.Append("  DataMovimento: ").Append(DataMovimento).Append("\n");
            sb.Append("  EspecieDocumento: ").Append(EspecieDocumento).Append("\n");
            sb.Append("  EspecieVolume: ").Append(EspecieVolume).Append("\n");
            sb.Append("  QuantidadeVolume: ").Append(QuantidadeVolume).Append("\n");
            sb.Append("  NumeroVolume: ").Append(NumeroVolume).Append("\n");
            sb.Append("  MarcaVolume: ").Append(MarcaVolume).Append("\n");
            sb.Append("  TipoFrete: ").Append(TipoFrete).Append("\n");
            sb.Append("  NfeChaveAcesso: ").Append(NfeChaveAcesso).Append("\n");
            sb.Append("  NfeProtocolo: ").Append(NfeProtocolo).Append("\n");
            sb.Append("  NfeDigestValue: ").Append(NfeDigestValue).Append("\n");
            sb.Append("  NfeDataRecebimento: ").Append(NfeDataRecebimento).Append("\n");
            sb.Append("  ValorTotalDocumento: ").Append(ValorTotalDocumento).Append("\n");
            sb.Append("  ValorIcms: ").Append(ValorIcms).Append("\n");
            sb.Append("  ValorIcmsSub: ").Append(ValorIcmsSub).Append("\n");
            sb.Append("  ValorIpi: ").Append(ValorIpi).Append("\n");
            sb.Append("  ValorFrete: ").Append(ValorFrete).Append("\n");
            sb.Append("  ValorSeguro: ").Append(ValorSeguro).Append("\n");
            sb.Append("  ValorServico: ").Append(ValorServico).Append("\n");
            sb.Append("  ValorDesconto: ").Append(ValorDesconto).Append("\n");
            sb.Append("  ValorTotalProduto: ").Append(ValorTotalProduto).Append("\n");
            sb.Append("  ValorBaseIcms: ").Append(ValorBaseIcms).Append("\n");
            sb.Append("  ValorBaseIcmsSub: ").Append(ValorBaseIcmsSub).Append("\n");
            sb.Append("  ValorBaseIpi: ").Append(ValorBaseIpi).Append("\n");
            sb.Append("  PesoBruto: ").Append(PesoBruto).Append("\n");
            sb.Append("  PesoLiquido: ").Append(PesoLiquido).Append("\n");
            sb.Append("  InformacaoAdicional1: ").Append(InformacaoAdicional1).Append("\n");
            sb.Append("  InformacaoAdicional2: ").Append(InformacaoAdicional2).Append("\n");
            sb.Append("  InformacaoAdicional3: ").Append(InformacaoAdicional3).Append("\n");
            sb.Append("  Usuario: ").Append(Usuario).Append("\n");
            sb.Append("  UsuarioGeracao: ").Append(UsuarioGeracao).Append("\n");
            sb.Append("  DataHistorico: ").Append(DataHistorico).Append("\n");
            sb.Append("  DataGeracao: ").Append(DataGeracao).Append("\n");
            sb.Append("  PlacaVeiculo: ").Append(PlacaVeiculo).Append("\n");
            sb.Append("  UfVeiculo: ").Append(UfVeiculo).Append("\n");
            sb.Append("  NomeMotorista: ").Append(NomeMotorista).Append("\n");
            sb.Append("  DocumentoMotorista: ").Append(DocumentoMotorista).Append("\n");
            sb.Append("  NumeroDocumento: ").Append(NumeroDocumento).Append("\n");
            sb.Append("  ObservacaoDocumento: ").Append(ObservacaoDocumento).Append("\n");
            sb.Append("  DataPrevisaoMovimento: ").Append(DataPrevisaoMovimento).Append("\n");
            sb.Append("  Estabelecimento: ").Append(Estabelecimento).Append("\n");
            sb.Append("  Depositante: ").Append(Depositante).Append("\n");
            sb.Append("  Matriz: ").Append(Matriz).Append("\n");
            sb.Append("  EmpresaDestino: ").Append(EmpresaDestino).Append("\n");
            sb.Append("  Transportadora: ").Append(Transportadora).Append("\n");
            sb.Append("  NaturezaOperacao: ").Append(NaturezaOperacao).Append("\n");
            sb.Append("  Empresa: ").Append(Empresa).Append("\n");
            sb.Append("  NfeAmbiente: ").Append(NfeAmbiente).Append("\n");
            sb.Append("  NfeTipoEmissao: ").Append(NfeTipoEmissao).Append("\n");
            sb.Append("  NfeTipoImpressao: ").Append(NfeTipoImpressao).Append("\n");
            sb.Append("  FinalidadeDocumento: ").Append(FinalidadeDocumento).Append("\n");
            sb.Append("  PrevisaoSaidaItens: ").Append(PrevisaoSaidaItens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrevisaoSaidaDTO);
        }

        /// <summary>
        /// Returns true if PrevisaoSaidaDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of PrevisaoSaidaDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrevisaoSaidaDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CodigoEstabelecimento == input.CodigoEstabelecimento ||
                    (this.CodigoEstabelecimento != null &&
                    this.CodigoEstabelecimento.Equals(input.CodigoEstabelecimento))
                ) && 
                (
                    this.CodigoEmpresa == input.CodigoEmpresa ||
                    (this.CodigoEmpresa != null &&
                    this.CodigoEmpresa.Equals(input.CodigoEmpresa))
                ) && 
                (
                    this.CodigoDepositante == input.CodigoDepositante ||
                    (this.CodigoDepositante != null &&
                    this.CodigoDepositante.Equals(input.CodigoDepositante))
                ) && 
                (
                    this.TipoDocumento == input.TipoDocumento ||
                    (this.TipoDocumento != null &&
                    this.TipoDocumento.Equals(input.TipoDocumento))
                ) && 
                (
                    this.SerieDocumento == input.SerieDocumento ||
                    (this.SerieDocumento != null &&
                    this.SerieDocumento.Equals(input.SerieDocumento))
                ) && 
                (
                    this.PrevisaoSaida == input.PrevisaoSaida ||
                    (this.PrevisaoSaida != null &&
                    this.PrevisaoSaida.Equals(input.PrevisaoSaida))
                ) && 
                (
                    this.CodigoDocumento == input.CodigoDocumento ||
                    (this.CodigoDocumento != null &&
                    this.CodigoDocumento.Equals(input.CodigoDocumento))
                ) && 
                (
                    this.DocumentoRelacionado == input.DocumentoRelacionado ||
                    (this.DocumentoRelacionado != null &&
                    this.DocumentoRelacionado.Equals(input.DocumentoRelacionado))
                ) && 
                (
                    this.EstadoDocumento == input.EstadoDocumento ||
                    (this.EstadoDocumento != null &&
                    this.EstadoDocumento.Equals(input.EstadoDocumento))
                ) && 
                (
                    this.CodigoEmpresaEmitente == input.CodigoEmpresaEmitente ||
                    (this.CodigoEmpresaEmitente != null &&
                    this.CodigoEmpresaEmitente.Equals(input.CodigoEmpresaEmitente))
                ) && 
                (
                    this.DataEmissao == input.DataEmissao ||
                    (this.DataEmissao != null &&
                    this.DataEmissao.Equals(input.DataEmissao))
                ) && 
                (
                    this.DataMovimento == input.DataMovimento ||
                    (this.DataMovimento != null &&
                    this.DataMovimento.Equals(input.DataMovimento))
                ) && 
                (
                    this.EspecieDocumento == input.EspecieDocumento ||
                    (this.EspecieDocumento != null &&
                    this.EspecieDocumento.Equals(input.EspecieDocumento))
                ) && 
                (
                    this.EspecieVolume == input.EspecieVolume ||
                    (this.EspecieVolume != null &&
                    this.EspecieVolume.Equals(input.EspecieVolume))
                ) && 
                (
                    this.QuantidadeVolume == input.QuantidadeVolume ||
                    (this.QuantidadeVolume != null &&
                    this.QuantidadeVolume.Equals(input.QuantidadeVolume))
                ) && 
                (
                    this.NumeroVolume == input.NumeroVolume ||
                    (this.NumeroVolume != null &&
                    this.NumeroVolume.Equals(input.NumeroVolume))
                ) && 
                (
                    this.MarcaVolume == input.MarcaVolume ||
                    (this.MarcaVolume != null &&
                    this.MarcaVolume.Equals(input.MarcaVolume))
                ) && 
                (
                    this.TipoFrete == input.TipoFrete ||
                    (this.TipoFrete != null &&
                    this.TipoFrete.Equals(input.TipoFrete))
                ) && 
                (
                    this.NfeChaveAcesso == input.NfeChaveAcesso ||
                    (this.NfeChaveAcesso != null &&
                    this.NfeChaveAcesso.Equals(input.NfeChaveAcesso))
                ) && 
                (
                    this.NfeProtocolo == input.NfeProtocolo ||
                    (this.NfeProtocolo != null &&
                    this.NfeProtocolo.Equals(input.NfeProtocolo))
                ) && 
                (
                    this.NfeDigestValue == input.NfeDigestValue ||
                    (this.NfeDigestValue != null &&
                    this.NfeDigestValue.Equals(input.NfeDigestValue))
                ) && 
                (
                    this.NfeDataRecebimento == input.NfeDataRecebimento ||
                    (this.NfeDataRecebimento != null &&
                    this.NfeDataRecebimento.Equals(input.NfeDataRecebimento))
                ) && 
                (
                    this.ValorTotalDocumento == input.ValorTotalDocumento ||
                    (this.ValorTotalDocumento != null &&
                    this.ValorTotalDocumento.Equals(input.ValorTotalDocumento))
                ) && 
                (
                    this.ValorIcms == input.ValorIcms ||
                    (this.ValorIcms != null &&
                    this.ValorIcms.Equals(input.ValorIcms))
                ) && 
                (
                    this.ValorIcmsSub == input.ValorIcmsSub ||
                    (this.ValorIcmsSub != null &&
                    this.ValorIcmsSub.Equals(input.ValorIcmsSub))
                ) && 
                (
                    this.ValorIpi == input.ValorIpi ||
                    (this.ValorIpi != null &&
                    this.ValorIpi.Equals(input.ValorIpi))
                ) && 
                (
                    this.ValorFrete == input.ValorFrete ||
                    (this.ValorFrete != null &&
                    this.ValorFrete.Equals(input.ValorFrete))
                ) && 
                (
                    this.ValorSeguro == input.ValorSeguro ||
                    (this.ValorSeguro != null &&
                    this.ValorSeguro.Equals(input.ValorSeguro))
                ) && 
                (
                    this.ValorServico == input.ValorServico ||
                    (this.ValorServico != null &&
                    this.ValorServico.Equals(input.ValorServico))
                ) && 
                (
                    this.ValorDesconto == input.ValorDesconto ||
                    (this.ValorDesconto != null &&
                    this.ValorDesconto.Equals(input.ValorDesconto))
                ) && 
                (
                    this.ValorTotalProduto == input.ValorTotalProduto ||
                    (this.ValorTotalProduto != null &&
                    this.ValorTotalProduto.Equals(input.ValorTotalProduto))
                ) && 
                (
                    this.ValorBaseIcms == input.ValorBaseIcms ||
                    (this.ValorBaseIcms != null &&
                    this.ValorBaseIcms.Equals(input.ValorBaseIcms))
                ) && 
                (
                    this.ValorBaseIcmsSub == input.ValorBaseIcmsSub ||
                    (this.ValorBaseIcmsSub != null &&
                    this.ValorBaseIcmsSub.Equals(input.ValorBaseIcmsSub))
                ) && 
                (
                    this.ValorBaseIpi == input.ValorBaseIpi ||
                    (this.ValorBaseIpi != null &&
                    this.ValorBaseIpi.Equals(input.ValorBaseIpi))
                ) && 
                (
                    this.PesoBruto == input.PesoBruto ||
                    (this.PesoBruto != null &&
                    this.PesoBruto.Equals(input.PesoBruto))
                ) && 
                (
                    this.PesoLiquido == input.PesoLiquido ||
                    (this.PesoLiquido != null &&
                    this.PesoLiquido.Equals(input.PesoLiquido))
                ) && 
                (
                    this.InformacaoAdicional1 == input.InformacaoAdicional1 ||
                    (this.InformacaoAdicional1 != null &&
                    this.InformacaoAdicional1.Equals(input.InformacaoAdicional1))
                ) && 
                (
                    this.InformacaoAdicional2 == input.InformacaoAdicional2 ||
                    (this.InformacaoAdicional2 != null &&
                    this.InformacaoAdicional2.Equals(input.InformacaoAdicional2))
                ) && 
                (
                    this.InformacaoAdicional3 == input.InformacaoAdicional3 ||
                    (this.InformacaoAdicional3 != null &&
                    this.InformacaoAdicional3.Equals(input.InformacaoAdicional3))
                ) && 
                (
                    this.Usuario == input.Usuario ||
                    (this.Usuario != null &&
                    this.Usuario.Equals(input.Usuario))
                ) && 
                (
                    this.UsuarioGeracao == input.UsuarioGeracao ||
                    (this.UsuarioGeracao != null &&
                    this.UsuarioGeracao.Equals(input.UsuarioGeracao))
                ) && 
                (
                    this.DataHistorico == input.DataHistorico ||
                    (this.DataHistorico != null &&
                    this.DataHistorico.Equals(input.DataHistorico))
                ) && 
                (
                    this.DataGeracao == input.DataGeracao ||
                    (this.DataGeracao != null &&
                    this.DataGeracao.Equals(input.DataGeracao))
                ) && 
                (
                    this.PlacaVeiculo == input.PlacaVeiculo ||
                    (this.PlacaVeiculo != null &&
                    this.PlacaVeiculo.Equals(input.PlacaVeiculo))
                ) && 
                (
                    this.UfVeiculo == input.UfVeiculo ||
                    (this.UfVeiculo != null &&
                    this.UfVeiculo.Equals(input.UfVeiculo))
                ) && 
                (
                    this.NomeMotorista == input.NomeMotorista ||
                    (this.NomeMotorista != null &&
                    this.NomeMotorista.Equals(input.NomeMotorista))
                ) && 
                (
                    this.DocumentoMotorista == input.DocumentoMotorista ||
                    (this.DocumentoMotorista != null &&
                    this.DocumentoMotorista.Equals(input.DocumentoMotorista))
                ) && 
                (
                    this.NumeroDocumento == input.NumeroDocumento ||
                    (this.NumeroDocumento != null &&
                    this.NumeroDocumento.Equals(input.NumeroDocumento))
                ) && 
                (
                    this.ObservacaoDocumento == input.ObservacaoDocumento ||
                    (this.ObservacaoDocumento != null &&
                    this.ObservacaoDocumento.Equals(input.ObservacaoDocumento))
                ) && 
                (
                    this.DataPrevisaoMovimento == input.DataPrevisaoMovimento ||
                    (this.DataPrevisaoMovimento != null &&
                    this.DataPrevisaoMovimento.Equals(input.DataPrevisaoMovimento))
                ) && 
                (
                    this.Estabelecimento == input.Estabelecimento ||
                    (this.Estabelecimento != null &&
                    this.Estabelecimento.Equals(input.Estabelecimento))
                ) && 
                (
                    this.Depositante == input.Depositante ||
                    (this.Depositante != null &&
                    this.Depositante.Equals(input.Depositante))
                ) && 
                (
                    this.Matriz == input.Matriz ||
                    (this.Matriz != null &&
                    this.Matriz.Equals(input.Matriz))
                ) && 
                (
                    this.EmpresaDestino == input.EmpresaDestino ||
                    (this.EmpresaDestino != null &&
                    this.EmpresaDestino.Equals(input.EmpresaDestino))
                ) && 
                (
                    this.Transportadora == input.Transportadora ||
                    (this.Transportadora != null &&
                    this.Transportadora.Equals(input.Transportadora))
                ) && 
                (
                    this.NaturezaOperacao == input.NaturezaOperacao ||
                    (this.NaturezaOperacao != null &&
                    this.NaturezaOperacao.Equals(input.NaturezaOperacao))
                ) && 
                (
                    this.Empresa == input.Empresa ||
                    (this.Empresa != null &&
                    this.Empresa.Equals(input.Empresa))
                ) && 
                (
                    this.NfeAmbiente == input.NfeAmbiente ||
                    (this.NfeAmbiente != null &&
                    this.NfeAmbiente.Equals(input.NfeAmbiente))
                ) && 
                (
                    this.NfeTipoEmissao == input.NfeTipoEmissao ||
                    (this.NfeTipoEmissao != null &&
                    this.NfeTipoEmissao.Equals(input.NfeTipoEmissao))
                ) && 
                (
                    this.NfeTipoImpressao == input.NfeTipoImpressao ||
                    (this.NfeTipoImpressao != null &&
                    this.NfeTipoImpressao.Equals(input.NfeTipoImpressao))
                ) && 
                (
                    this.FinalidadeDocumento == input.FinalidadeDocumento ||
                    (this.FinalidadeDocumento != null &&
                    this.FinalidadeDocumento.Equals(input.FinalidadeDocumento))
                ) && 
                (
                    this.PrevisaoSaidaItens == input.PrevisaoSaidaItens ||
                    this.PrevisaoSaidaItens != null &&
                    this.PrevisaoSaidaItens.SequenceEqual(input.PrevisaoSaidaItens)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodigoEstabelecimento != null)
                    hashCode = hashCode * 59 + this.CodigoEstabelecimento.GetHashCode();
                if (this.CodigoEmpresa != null)
                    hashCode = hashCode * 59 + this.CodigoEmpresa.GetHashCode();
                if (this.CodigoDepositante != null)
                    hashCode = hashCode * 59 + this.CodigoDepositante.GetHashCode();
                if (this.TipoDocumento != null)
                    hashCode = hashCode * 59 + this.TipoDocumento.GetHashCode();
                if (this.SerieDocumento != null)
                    hashCode = hashCode * 59 + this.SerieDocumento.GetHashCode();
                if (this.PrevisaoSaida != null)
                    hashCode = hashCode * 59 + this.PrevisaoSaida.GetHashCode();
                if (this.CodigoDocumento != null)
                    hashCode = hashCode * 59 + this.CodigoDocumento.GetHashCode();
                if (this.DocumentoRelacionado != null)
                    hashCode = hashCode * 59 + this.DocumentoRelacionado.GetHashCode();
                if (this.EstadoDocumento != null)
                    hashCode = hashCode * 59 + this.EstadoDocumento.GetHashCode();
                if (this.CodigoEmpresaEmitente != null)
                    hashCode = hashCode * 59 + this.CodigoEmpresaEmitente.GetHashCode();
                if (this.DataEmissao != null)
                    hashCode = hashCode * 59 + this.DataEmissao.GetHashCode();
                if (this.DataMovimento != null)
                    hashCode = hashCode * 59 + this.DataMovimento.GetHashCode();
                if (this.EspecieDocumento != null)
                    hashCode = hashCode * 59 + this.EspecieDocumento.GetHashCode();
                if (this.EspecieVolume != null)
                    hashCode = hashCode * 59 + this.EspecieVolume.GetHashCode();
                if (this.QuantidadeVolume != null)
                    hashCode = hashCode * 59 + this.QuantidadeVolume.GetHashCode();
                if (this.NumeroVolume != null)
                    hashCode = hashCode * 59 + this.NumeroVolume.GetHashCode();
                if (this.MarcaVolume != null)
                    hashCode = hashCode * 59 + this.MarcaVolume.GetHashCode();
                if (this.TipoFrete != null)
                    hashCode = hashCode * 59 + this.TipoFrete.GetHashCode();
                if (this.NfeChaveAcesso != null)
                    hashCode = hashCode * 59 + this.NfeChaveAcesso.GetHashCode();
                if (this.NfeProtocolo != null)
                    hashCode = hashCode * 59 + this.NfeProtocolo.GetHashCode();
                if (this.NfeDigestValue != null)
                    hashCode = hashCode * 59 + this.NfeDigestValue.GetHashCode();
                if (this.NfeDataRecebimento != null)
                    hashCode = hashCode * 59 + this.NfeDataRecebimento.GetHashCode();
                if (this.ValorTotalDocumento != null)
                    hashCode = hashCode * 59 + this.ValorTotalDocumento.GetHashCode();
                if (this.ValorIcms != null)
                    hashCode = hashCode * 59 + this.ValorIcms.GetHashCode();
                if (this.ValorIcmsSub != null)
                    hashCode = hashCode * 59 + this.ValorIcmsSub.GetHashCode();
                if (this.ValorIpi != null)
                    hashCode = hashCode * 59 + this.ValorIpi.GetHashCode();
                if (this.ValorFrete != null)
                    hashCode = hashCode * 59 + this.ValorFrete.GetHashCode();
                if (this.ValorSeguro != null)
                    hashCode = hashCode * 59 + this.ValorSeguro.GetHashCode();
                if (this.ValorServico != null)
                    hashCode = hashCode * 59 + this.ValorServico.GetHashCode();
                if (this.ValorDesconto != null)
                    hashCode = hashCode * 59 + this.ValorDesconto.GetHashCode();
                if (this.ValorTotalProduto != null)
                    hashCode = hashCode * 59 + this.ValorTotalProduto.GetHashCode();
                if (this.ValorBaseIcms != null)
                    hashCode = hashCode * 59 + this.ValorBaseIcms.GetHashCode();
                if (this.ValorBaseIcmsSub != null)
                    hashCode = hashCode * 59 + this.ValorBaseIcmsSub.GetHashCode();
                if (this.ValorBaseIpi != null)
                    hashCode = hashCode * 59 + this.ValorBaseIpi.GetHashCode();
                if (this.PesoBruto != null)
                    hashCode = hashCode * 59 + this.PesoBruto.GetHashCode();
                if (this.PesoLiquido != null)
                    hashCode = hashCode * 59 + this.PesoLiquido.GetHashCode();
                if (this.InformacaoAdicional1 != null)
                    hashCode = hashCode * 59 + this.InformacaoAdicional1.GetHashCode();
                if (this.InformacaoAdicional2 != null)
                    hashCode = hashCode * 59 + this.InformacaoAdicional2.GetHashCode();
                if (this.InformacaoAdicional3 != null)
                    hashCode = hashCode * 59 + this.InformacaoAdicional3.GetHashCode();
                if (this.Usuario != null)
                    hashCode = hashCode * 59 + this.Usuario.GetHashCode();
                if (this.UsuarioGeracao != null)
                    hashCode = hashCode * 59 + this.UsuarioGeracao.GetHashCode();
                if (this.DataHistorico != null)
                    hashCode = hashCode * 59 + this.DataHistorico.GetHashCode();
                if (this.DataGeracao != null)
                    hashCode = hashCode * 59 + this.DataGeracao.GetHashCode();
                if (this.PlacaVeiculo != null)
                    hashCode = hashCode * 59 + this.PlacaVeiculo.GetHashCode();
                if (this.UfVeiculo != null)
                    hashCode = hashCode * 59 + this.UfVeiculo.GetHashCode();
                if (this.NomeMotorista != null)
                    hashCode = hashCode * 59 + this.NomeMotorista.GetHashCode();
                if (this.DocumentoMotorista != null)
                    hashCode = hashCode * 59 + this.DocumentoMotorista.GetHashCode();
                if (this.NumeroDocumento != null)
                    hashCode = hashCode * 59 + this.NumeroDocumento.GetHashCode();
                if (this.ObservacaoDocumento != null)
                    hashCode = hashCode * 59 + this.ObservacaoDocumento.GetHashCode();
                if (this.DataPrevisaoMovimento != null)
                    hashCode = hashCode * 59 + this.DataPrevisaoMovimento.GetHashCode();
                if (this.Estabelecimento != null)
                    hashCode = hashCode * 59 + this.Estabelecimento.GetHashCode();
                if (this.Depositante != null)
                    hashCode = hashCode * 59 + this.Depositante.GetHashCode();
                if (this.Matriz != null)
                    hashCode = hashCode * 59 + this.Matriz.GetHashCode();
                if (this.EmpresaDestino != null)
                    hashCode = hashCode * 59 + this.EmpresaDestino.GetHashCode();
                if (this.Transportadora != null)
                    hashCode = hashCode * 59 + this.Transportadora.GetHashCode();
                if (this.NaturezaOperacao != null)
                    hashCode = hashCode * 59 + this.NaturezaOperacao.GetHashCode();
                if (this.Empresa != null)
                    hashCode = hashCode * 59 + this.Empresa.GetHashCode();
                if (this.NfeAmbiente != null)
                    hashCode = hashCode * 59 + this.NfeAmbiente.GetHashCode();
                if (this.NfeTipoEmissao != null)
                    hashCode = hashCode * 59 + this.NfeTipoEmissao.GetHashCode();
                if (this.NfeTipoImpressao != null)
                    hashCode = hashCode * 59 + this.NfeTipoImpressao.GetHashCode();
                if (this.FinalidadeDocumento != null)
                    hashCode = hashCode * 59 + this.FinalidadeDocumento.GetHashCode();
                if (this.PrevisaoSaidaItens != null)
                    hashCode = hashCode * 59 + this.PrevisaoSaidaItens.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
