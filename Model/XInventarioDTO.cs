/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// XInventarioDTO
    /// </summary>
    [DataContract]
    public partial class XInventarioDTO :  IEquatable<XInventarioDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="XInventarioDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected XInventarioDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="XInventarioDTO" /> class.
        /// </summary>
        /// <param name="sequenciaIntegracao">Sequencia identificadora da integração (required).</param>
        /// <param name="codigoInventario">Código do Inventário (required).</param>
        /// <param name="sequenciaEtiqueta">Sequencia identificadora de cada linha (required).</param>
        /// <param name="codigoProduto">Código do Produto do WMS (required).</param>
        /// <param name="tipoUc">Tipo UC do Produto do WMS.</param>
        /// <param name="fatorTipoUC">Fator Tipo UC do Produto do WMS.</param>
        /// <param name="classeProduto">Classe Produto.</param>
        /// <param name="loteFabricacao">Lote Fabricação.</param>
        /// <param name="dataFabricacao">Data Fabricação.</param>
        /// <param name="dataVencimento">Data Vencimento.</param>
        /// <param name="loteGeral">Lote Geral.</param>
        /// <param name="quantidadeInventario">Quantidade que inventariada (fator sempre 1, ou seja, a quantidade de produtos e não do Tipo UC).</param>
        /// <param name="dataInicio">Data Inicio do inventário.</param>
        /// <param name="dataFim">Data Fim do inventário.</param>
        /// <param name="quantidadeEstoque">Quantidade Anterior (fator sempre 1, ou seja, a quantidade de produtos e não do Tipo UC).</param>
        /// <param name="inventarioParcial">Inventário Parcial.</param>
        /// <param name="endereco">Código do Endereço do WMS.</param>
        /// <param name="etiquetaEndereco">Etiqueta do Endereço do WMS.</param>
        /// <param name="codigoUA">Código da Ua do WMS.</param>
        /// <param name="etiquetaUA">Etiqueta da UA do WMS.</param>
        /// <param name="tipoUA">Tipo da Ua do WMS.</param>
        /// <param name="idTipoUA">ID do Tipo da Ua do WMS.</param>
        /// <param name="codigoVolume">Código do Volume do WMS.</param>
        /// <param name="identificadorVolume">Identificador do Volume do WMS.</param>
        /// <param name="codigoEmpresaEntrada">Código Empresa do Documento Entrada.</param>
        /// <param name="tipoDocumentoEntrada">Tipo do Documento Entrada.</param>
        /// <param name="serieDocumentoEntrada">Série do Documento Entrada.</param>
        /// <param name="numeroDocumentoEntrada">Número do Documento Entrada.</param>
        public XInventarioDTO(long? sequenciaIntegracao = default(long?), long? codigoInventario = default(long?), long? sequenciaEtiqueta = default(long?), string codigoProduto = default(string), string tipoUc = default(string), decimal? fatorTipoUC = default(decimal?), string classeProduto = default(string), string loteFabricacao = default(string), DateTime? dataFabricacao = default(DateTime?), DateTime? dataVencimento = default(DateTime?), string loteGeral = default(string), decimal? quantidadeInventario = default(decimal?), DateTime? dataInicio = default(DateTime?), DateTime? dataFim = default(DateTime?), decimal? quantidadeEstoque = default(decimal?), long? inventarioParcial = default(long?), long? endereco = default(long?), string etiquetaEndereco = default(string), long? codigoUA = default(long?), string etiquetaUA = default(string), string tipoUA = default(string), string idTipoUA = default(string), long? codigoVolume = default(long?), string identificadorVolume = default(string), string codigoEmpresaEntrada = default(string), string tipoDocumentoEntrada = default(string), string serieDocumentoEntrada = default(string), string numeroDocumentoEntrada = default(string))
        {
            // to ensure "sequenciaIntegracao" is required (not null)
            if (sequenciaIntegracao == null)
            {
                throw new InvalidDataException("sequenciaIntegracao is a required property for XInventarioDTO and cannot be null");
            }
            else
            {
                this.SequenciaIntegracao = sequenciaIntegracao;
            }
            // to ensure "codigoInventario" is required (not null)
            if (codigoInventario == null)
            {
                throw new InvalidDataException("codigoInventario is a required property for XInventarioDTO and cannot be null");
            }
            else
            {
                this.CodigoInventario = codigoInventario;
            }
            // to ensure "sequenciaEtiqueta" is required (not null)
            if (sequenciaEtiqueta == null)
            {
                throw new InvalidDataException("sequenciaEtiqueta is a required property for XInventarioDTO and cannot be null");
            }
            else
            {
                this.SequenciaEtiqueta = sequenciaEtiqueta;
            }
            // to ensure "codigoProduto" is required (not null)
            if (codigoProduto == null)
            {
                throw new InvalidDataException("codigoProduto is a required property for XInventarioDTO and cannot be null");
            }
            else
            {
                this.CodigoProduto = codigoProduto;
            }
            this.TipoUc = tipoUc;
            this.FatorTipoUC = fatorTipoUC;
            this.ClasseProduto = classeProduto;
            this.LoteFabricacao = loteFabricacao;
            this.DataFabricacao = dataFabricacao;
            this.DataVencimento = dataVencimento;
            this.LoteGeral = loteGeral;
            this.QuantidadeInventario = quantidadeInventario;
            this.DataInicio = dataInicio;
            this.DataFim = dataFim;
            this.QuantidadeEstoque = quantidadeEstoque;
            this.InventarioParcial = inventarioParcial;
            this.Endereco = endereco;
            this.EtiquetaEndereco = etiquetaEndereco;
            this.CodigoUA = codigoUA;
            this.EtiquetaUA = etiquetaUA;
            this.TipoUA = tipoUA;
            this.IdTipoUA = idTipoUA;
            this.CodigoVolume = codigoVolume;
            this.IdentificadorVolume = identificadorVolume;
            this.CodigoEmpresaEntrada = codigoEmpresaEntrada;
            this.TipoDocumentoEntrada = tipoDocumentoEntrada;
            this.SerieDocumentoEntrada = serieDocumentoEntrada;
            this.NumeroDocumentoEntrada = numeroDocumentoEntrada;
        }
        
        /// <summary>
        /// Sequencia identificadora da integração
        /// </summary>
        /// <value>Sequencia identificadora da integração</value>
        [DataMember(Name="sequenciaIntegracao", EmitDefaultValue=false)]
        public long? SequenciaIntegracao { get; set; }

        /// <summary>
        /// Código do Inventário
        /// </summary>
        /// <value>Código do Inventário</value>
        [DataMember(Name="codigoInventario", EmitDefaultValue=false)]
        public long? CodigoInventario { get; set; }

        /// <summary>
        /// Sequencia identificadora de cada linha
        /// </summary>
        /// <value>Sequencia identificadora de cada linha</value>
        [DataMember(Name="sequenciaEtiqueta", EmitDefaultValue=false)]
        public long? SequenciaEtiqueta { get; set; }

        /// <summary>
        /// Código do Produto do WMS
        /// </summary>
        /// <value>Código do Produto do WMS</value>
        [DataMember(Name="codigoProduto", EmitDefaultValue=false)]
        public string CodigoProduto { get; set; }

        /// <summary>
        /// Tipo UC do Produto do WMS
        /// </summary>
        /// <value>Tipo UC do Produto do WMS</value>
        [DataMember(Name="tipoUc", EmitDefaultValue=false)]
        public string TipoUc { get; set; }

        /// <summary>
        /// Fator Tipo UC do Produto do WMS
        /// </summary>
        /// <value>Fator Tipo UC do Produto do WMS</value>
        [DataMember(Name="fatorTipoUC", EmitDefaultValue=false)]
        public decimal? FatorTipoUC { get; set; }

        /// <summary>
        /// Classe Produto
        /// </summary>
        /// <value>Classe Produto</value>
        [DataMember(Name="classeProduto", EmitDefaultValue=false)]
        public string ClasseProduto { get; set; }

        /// <summary>
        /// Lote Fabricação
        /// </summary>
        /// <value>Lote Fabricação</value>
        [DataMember(Name="loteFabricacao", EmitDefaultValue=false)]
        public string LoteFabricacao { get; set; }

        /// <summary>
        /// Data Fabricação
        /// </summary>
        /// <value>Data Fabricação</value>
        [DataMember(Name="dataFabricacao", EmitDefaultValue=false)]
        public DateTime? DataFabricacao { get; set; }

        /// <summary>
        /// Data Vencimento
        /// </summary>
        /// <value>Data Vencimento</value>
        [DataMember(Name="dataVencimento", EmitDefaultValue=false)]
        public DateTime? DataVencimento { get; set; }

        /// <summary>
        /// Lote Geral
        /// </summary>
        /// <value>Lote Geral</value>
        [DataMember(Name="loteGeral", EmitDefaultValue=false)]
        public string LoteGeral { get; set; }

        /// <summary>
        /// Quantidade que inventariada (fator sempre 1, ou seja, a quantidade de produtos e não do Tipo UC)
        /// </summary>
        /// <value>Quantidade que inventariada (fator sempre 1, ou seja, a quantidade de produtos e não do Tipo UC)</value>
        [DataMember(Name="quantidadeInventario", EmitDefaultValue=false)]
        public decimal? QuantidadeInventario { get; set; }

        /// <summary>
        /// Data Inicio do inventário
        /// </summary>
        /// <value>Data Inicio do inventário</value>
        [DataMember(Name="dataInicio", EmitDefaultValue=false)]
        public DateTime? DataInicio { get; set; }

        /// <summary>
        /// Data Fim do inventário
        /// </summary>
        /// <value>Data Fim do inventário</value>
        [DataMember(Name="dataFim", EmitDefaultValue=false)]
        public DateTime? DataFim { get; set; }

        /// <summary>
        /// Quantidade Anterior (fator sempre 1, ou seja, a quantidade de produtos e não do Tipo UC)
        /// </summary>
        /// <value>Quantidade Anterior (fator sempre 1, ou seja, a quantidade de produtos e não do Tipo UC)</value>
        [DataMember(Name="quantidadeEstoque", EmitDefaultValue=false)]
        public decimal? QuantidadeEstoque { get; set; }

        /// <summary>
        /// Inventário Parcial
        /// </summary>
        /// <value>Inventário Parcial</value>
        [DataMember(Name="inventarioParcial", EmitDefaultValue=false)]
        public long? InventarioParcial { get; set; }

        /// <summary>
        /// Código do Endereço do WMS
        /// </summary>
        /// <value>Código do Endereço do WMS</value>
        [DataMember(Name="endereco", EmitDefaultValue=false)]
        public long? Endereco { get; set; }

        /// <summary>
        /// Etiqueta do Endereço do WMS
        /// </summary>
        /// <value>Etiqueta do Endereço do WMS</value>
        [DataMember(Name="etiquetaEndereco", EmitDefaultValue=false)]
        public string EtiquetaEndereco { get; set; }

        /// <summary>
        /// Código da Ua do WMS
        /// </summary>
        /// <value>Código da Ua do WMS</value>
        [DataMember(Name="codigoUA", EmitDefaultValue=false)]
        public long? CodigoUA { get; set; }

        /// <summary>
        /// Etiqueta da UA do WMS
        /// </summary>
        /// <value>Etiqueta da UA do WMS</value>
        [DataMember(Name="etiquetaUA", EmitDefaultValue=false)]
        public string EtiquetaUA { get; set; }

        /// <summary>
        /// Tipo da Ua do WMS
        /// </summary>
        /// <value>Tipo da Ua do WMS</value>
        [DataMember(Name="tipoUA", EmitDefaultValue=false)]
        public string TipoUA { get; set; }

        /// <summary>
        /// ID do Tipo da Ua do WMS
        /// </summary>
        /// <value>ID do Tipo da Ua do WMS</value>
        [DataMember(Name="idTipoUA", EmitDefaultValue=false)]
        public string IdTipoUA { get; set; }

        /// <summary>
        /// Código do Volume do WMS
        /// </summary>
        /// <value>Código do Volume do WMS</value>
        [DataMember(Name="codigoVolume", EmitDefaultValue=false)]
        public long? CodigoVolume { get; set; }

        /// <summary>
        /// Identificador do Volume do WMS
        /// </summary>
        /// <value>Identificador do Volume do WMS</value>
        [DataMember(Name="identificadorVolume", EmitDefaultValue=false)]
        public string IdentificadorVolume { get; set; }

        /// <summary>
        /// Código Empresa do Documento Entrada
        /// </summary>
        /// <value>Código Empresa do Documento Entrada</value>
        [DataMember(Name="codigoEmpresaEntrada", EmitDefaultValue=false)]
        public string CodigoEmpresaEntrada { get; set; }

        /// <summary>
        /// Tipo do Documento Entrada
        /// </summary>
        /// <value>Tipo do Documento Entrada</value>
        [DataMember(Name="tipoDocumentoEntrada", EmitDefaultValue=false)]
        public string TipoDocumentoEntrada { get; set; }

        /// <summary>
        /// Série do Documento Entrada
        /// </summary>
        /// <value>Série do Documento Entrada</value>
        [DataMember(Name="serieDocumentoEntrada", EmitDefaultValue=false)]
        public string SerieDocumentoEntrada { get; set; }

        /// <summary>
        /// Número do Documento Entrada
        /// </summary>
        /// <value>Número do Documento Entrada</value>
        [DataMember(Name="numeroDocumentoEntrada", EmitDefaultValue=false)]
        public string NumeroDocumentoEntrada { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class XInventarioDTO {\n");
            sb.Append("  SequenciaIntegracao: ").Append(SequenciaIntegracao).Append("\n");
            sb.Append("  CodigoInventario: ").Append(CodigoInventario).Append("\n");
            sb.Append("  SequenciaEtiqueta: ").Append(SequenciaEtiqueta).Append("\n");
            sb.Append("  CodigoProduto: ").Append(CodigoProduto).Append("\n");
            sb.Append("  TipoUc: ").Append(TipoUc).Append("\n");
            sb.Append("  FatorTipoUC: ").Append(FatorTipoUC).Append("\n");
            sb.Append("  ClasseProduto: ").Append(ClasseProduto).Append("\n");
            sb.Append("  LoteFabricacao: ").Append(LoteFabricacao).Append("\n");
            sb.Append("  DataFabricacao: ").Append(DataFabricacao).Append("\n");
            sb.Append("  DataVencimento: ").Append(DataVencimento).Append("\n");
            sb.Append("  LoteGeral: ").Append(LoteGeral).Append("\n");
            sb.Append("  QuantidadeInventario: ").Append(QuantidadeInventario).Append("\n");
            sb.Append("  DataInicio: ").Append(DataInicio).Append("\n");
            sb.Append("  DataFim: ").Append(DataFim).Append("\n");
            sb.Append("  QuantidadeEstoque: ").Append(QuantidadeEstoque).Append("\n");
            sb.Append("  InventarioParcial: ").Append(InventarioParcial).Append("\n");
            sb.Append("  Endereco: ").Append(Endereco).Append("\n");
            sb.Append("  EtiquetaEndereco: ").Append(EtiquetaEndereco).Append("\n");
            sb.Append("  CodigoUA: ").Append(CodigoUA).Append("\n");
            sb.Append("  EtiquetaUA: ").Append(EtiquetaUA).Append("\n");
            sb.Append("  TipoUA: ").Append(TipoUA).Append("\n");
            sb.Append("  IdTipoUA: ").Append(IdTipoUA).Append("\n");
            sb.Append("  CodigoVolume: ").Append(CodigoVolume).Append("\n");
            sb.Append("  IdentificadorVolume: ").Append(IdentificadorVolume).Append("\n");
            sb.Append("  CodigoEmpresaEntrada: ").Append(CodigoEmpresaEntrada).Append("\n");
            sb.Append("  TipoDocumentoEntrada: ").Append(TipoDocumentoEntrada).Append("\n");
            sb.Append("  SerieDocumentoEntrada: ").Append(SerieDocumentoEntrada).Append("\n");
            sb.Append("  NumeroDocumentoEntrada: ").Append(NumeroDocumentoEntrada).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as XInventarioDTO);
        }

        /// <summary>
        /// Returns true if XInventarioDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of XInventarioDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(XInventarioDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SequenciaIntegracao == input.SequenciaIntegracao ||
                    (this.SequenciaIntegracao != null &&
                    this.SequenciaIntegracao.Equals(input.SequenciaIntegracao))
                ) && 
                (
                    this.CodigoInventario == input.CodigoInventario ||
                    (this.CodigoInventario != null &&
                    this.CodigoInventario.Equals(input.CodigoInventario))
                ) && 
                (
                    this.SequenciaEtiqueta == input.SequenciaEtiqueta ||
                    (this.SequenciaEtiqueta != null &&
                    this.SequenciaEtiqueta.Equals(input.SequenciaEtiqueta))
                ) && 
                (
                    this.CodigoProduto == input.CodigoProduto ||
                    (this.CodigoProduto != null &&
                    this.CodigoProduto.Equals(input.CodigoProduto))
                ) && 
                (
                    this.TipoUc == input.TipoUc ||
                    (this.TipoUc != null &&
                    this.TipoUc.Equals(input.TipoUc))
                ) && 
                (
                    this.FatorTipoUC == input.FatorTipoUC ||
                    (this.FatorTipoUC != null &&
                    this.FatorTipoUC.Equals(input.FatorTipoUC))
                ) && 
                (
                    this.ClasseProduto == input.ClasseProduto ||
                    (this.ClasseProduto != null &&
                    this.ClasseProduto.Equals(input.ClasseProduto))
                ) && 
                (
                    this.LoteFabricacao == input.LoteFabricacao ||
                    (this.LoteFabricacao != null &&
                    this.LoteFabricacao.Equals(input.LoteFabricacao))
                ) && 
                (
                    this.DataFabricacao == input.DataFabricacao ||
                    (this.DataFabricacao != null &&
                    this.DataFabricacao.Equals(input.DataFabricacao))
                ) && 
                (
                    this.DataVencimento == input.DataVencimento ||
                    (this.DataVencimento != null &&
                    this.DataVencimento.Equals(input.DataVencimento))
                ) && 
                (
                    this.LoteGeral == input.LoteGeral ||
                    (this.LoteGeral != null &&
                    this.LoteGeral.Equals(input.LoteGeral))
                ) && 
                (
                    this.QuantidadeInventario == input.QuantidadeInventario ||
                    (this.QuantidadeInventario != null &&
                    this.QuantidadeInventario.Equals(input.QuantidadeInventario))
                ) && 
                (
                    this.DataInicio == input.DataInicio ||
                    (this.DataInicio != null &&
                    this.DataInicio.Equals(input.DataInicio))
                ) && 
                (
                    this.DataFim == input.DataFim ||
                    (this.DataFim != null &&
                    this.DataFim.Equals(input.DataFim))
                ) && 
                (
                    this.QuantidadeEstoque == input.QuantidadeEstoque ||
                    (this.QuantidadeEstoque != null &&
                    this.QuantidadeEstoque.Equals(input.QuantidadeEstoque))
                ) && 
                (
                    this.InventarioParcial == input.InventarioParcial ||
                    (this.InventarioParcial != null &&
                    this.InventarioParcial.Equals(input.InventarioParcial))
                ) && 
                (
                    this.Endereco == input.Endereco ||
                    (this.Endereco != null &&
                    this.Endereco.Equals(input.Endereco))
                ) && 
                (
                    this.EtiquetaEndereco == input.EtiquetaEndereco ||
                    (this.EtiquetaEndereco != null &&
                    this.EtiquetaEndereco.Equals(input.EtiquetaEndereco))
                ) && 
                (
                    this.CodigoUA == input.CodigoUA ||
                    (this.CodigoUA != null &&
                    this.CodigoUA.Equals(input.CodigoUA))
                ) && 
                (
                    this.EtiquetaUA == input.EtiquetaUA ||
                    (this.EtiquetaUA != null &&
                    this.EtiquetaUA.Equals(input.EtiquetaUA))
                ) && 
                (
                    this.TipoUA == input.TipoUA ||
                    (this.TipoUA != null &&
                    this.TipoUA.Equals(input.TipoUA))
                ) && 
                (
                    this.IdTipoUA == input.IdTipoUA ||
                    (this.IdTipoUA != null &&
                    this.IdTipoUA.Equals(input.IdTipoUA))
                ) && 
                (
                    this.CodigoVolume == input.CodigoVolume ||
                    (this.CodigoVolume != null &&
                    this.CodigoVolume.Equals(input.CodigoVolume))
                ) && 
                (
                    this.IdentificadorVolume == input.IdentificadorVolume ||
                    (this.IdentificadorVolume != null &&
                    this.IdentificadorVolume.Equals(input.IdentificadorVolume))
                ) && 
                (
                    this.CodigoEmpresaEntrada == input.CodigoEmpresaEntrada ||
                    (this.CodigoEmpresaEntrada != null &&
                    this.CodigoEmpresaEntrada.Equals(input.CodigoEmpresaEntrada))
                ) && 
                (
                    this.TipoDocumentoEntrada == input.TipoDocumentoEntrada ||
                    (this.TipoDocumentoEntrada != null &&
                    this.TipoDocumentoEntrada.Equals(input.TipoDocumentoEntrada))
                ) && 
                (
                    this.SerieDocumentoEntrada == input.SerieDocumentoEntrada ||
                    (this.SerieDocumentoEntrada != null &&
                    this.SerieDocumentoEntrada.Equals(input.SerieDocumentoEntrada))
                ) && 
                (
                    this.NumeroDocumentoEntrada == input.NumeroDocumentoEntrada ||
                    (this.NumeroDocumentoEntrada != null &&
                    this.NumeroDocumentoEntrada.Equals(input.NumeroDocumentoEntrada))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SequenciaIntegracao != null)
                    hashCode = hashCode * 59 + this.SequenciaIntegracao.GetHashCode();
                if (this.CodigoInventario != null)
                    hashCode = hashCode * 59 + this.CodigoInventario.GetHashCode();
                if (this.SequenciaEtiqueta != null)
                    hashCode = hashCode * 59 + this.SequenciaEtiqueta.GetHashCode();
                if (this.CodigoProduto != null)
                    hashCode = hashCode * 59 + this.CodigoProduto.GetHashCode();
                if (this.TipoUc != null)
                    hashCode = hashCode * 59 + this.TipoUc.GetHashCode();
                if (this.FatorTipoUC != null)
                    hashCode = hashCode * 59 + this.FatorTipoUC.GetHashCode();
                if (this.ClasseProduto != null)
                    hashCode = hashCode * 59 + this.ClasseProduto.GetHashCode();
                if (this.LoteFabricacao != null)
                    hashCode = hashCode * 59 + this.LoteFabricacao.GetHashCode();
                if (this.DataFabricacao != null)
                    hashCode = hashCode * 59 + this.DataFabricacao.GetHashCode();
                if (this.DataVencimento != null)
                    hashCode = hashCode * 59 + this.DataVencimento.GetHashCode();
                if (this.LoteGeral != null)
                    hashCode = hashCode * 59 + this.LoteGeral.GetHashCode();
                if (this.QuantidadeInventario != null)
                    hashCode = hashCode * 59 + this.QuantidadeInventario.GetHashCode();
                if (this.DataInicio != null)
                    hashCode = hashCode * 59 + this.DataInicio.GetHashCode();
                if (this.DataFim != null)
                    hashCode = hashCode * 59 + this.DataFim.GetHashCode();
                if (this.QuantidadeEstoque != null)
                    hashCode = hashCode * 59 + this.QuantidadeEstoque.GetHashCode();
                if (this.InventarioParcial != null)
                    hashCode = hashCode * 59 + this.InventarioParcial.GetHashCode();
                if (this.Endereco != null)
                    hashCode = hashCode * 59 + this.Endereco.GetHashCode();
                if (this.EtiquetaEndereco != null)
                    hashCode = hashCode * 59 + this.EtiquetaEndereco.GetHashCode();
                if (this.CodigoUA != null)
                    hashCode = hashCode * 59 + this.CodigoUA.GetHashCode();
                if (this.EtiquetaUA != null)
                    hashCode = hashCode * 59 + this.EtiquetaUA.GetHashCode();
                if (this.TipoUA != null)
                    hashCode = hashCode * 59 + this.TipoUA.GetHashCode();
                if (this.IdTipoUA != null)
                    hashCode = hashCode * 59 + this.IdTipoUA.GetHashCode();
                if (this.CodigoVolume != null)
                    hashCode = hashCode * 59 + this.CodigoVolume.GetHashCode();
                if (this.IdentificadorVolume != null)
                    hashCode = hashCode * 59 + this.IdentificadorVolume.GetHashCode();
                if (this.CodigoEmpresaEntrada != null)
                    hashCode = hashCode * 59 + this.CodigoEmpresaEntrada.GetHashCode();
                if (this.TipoDocumentoEntrada != null)
                    hashCode = hashCode * 59 + this.TipoDocumentoEntrada.GetHashCode();
                if (this.SerieDocumentoEntrada != null)
                    hashCode = hashCode * 59 + this.SerieDocumentoEntrada.GetHashCode();
                if (this.NumeroDocumentoEntrada != null)
                    hashCode = hashCode * 59 + this.NumeroDocumentoEntrada.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
