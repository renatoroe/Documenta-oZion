/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MovimentoEstoqueDTO
    /// </summary>
    [DataContract]
    public partial class MovimentoEstoqueDTO :  IEquatable<MovimentoEstoqueDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MovimentoEstoqueDTO" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MovimentoEstoqueDTO() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MovimentoEstoqueDTO" /> class.
        /// </summary>
        /// <param name="sequenciaMovimentoEstoque">Sequencia identificadora de cada linha (required).</param>
        /// <param name="codigoProduto">Código do Produto do Store WMAS (required).</param>
        /// <param name="tipoUc">Tipo UC do Produto do Store WMAS.</param>
        /// <param name="fatorTipoUC">Fator Tipo UC do Produto do Store WMAS.</param>
        /// <param name="loteFabricacaoOrigem">Lote Fabricação Origem.</param>
        /// <param name="loteFabricacaoDestino">Lote Fabricação Destino.</param>
        /// <param name="dataFabricacaoOrigem">Data Fabricação Origem.</param>
        /// <param name="dataFabricacaoDestino">Data Fabricação Destino.</param>
        /// <param name="dataVencimentoOrigem">Data Vencimento Origem.</param>
        /// <param name="dataVencimentoDestino">Data Vencimento Destino.</param>
        /// <param name="loteGeralOrigem">Lote Geral Origem.</param>
        /// <param name="loteGeralDestino">Lote Geral Destino.</param>
        /// <param name="classeProdutoOrigem">Classe Produto Origem.</param>
        /// <param name="classeProdutoDestino">Classe Produto Destino.</param>
        /// <param name="quantidade">Quantidade a ser movimentada (fator sempre 1, ou seja, a quantidade de produtos e não do Tipo UC).</param>
        /// <param name="bloqueioSequencia">Bloquear Sequencia Saldo.</param>
        /// <param name="numeroMovimento">Número Movimento.</param>
        /// <param name="codigoEmpresa">Código Empresa do Documento Entrada.</param>
        /// <param name="tipoDocumento">Tipo do Documento Entrada.</param>
        /// <param name="serieDocumento">Série do Documento Entrada.</param>
        /// <param name="numeroDocumento">Número do Documento Entrada.</param>
        public MovimentoEstoqueDTO(long? sequenciaMovimentoEstoque = default(long?), string codigoProduto = default(string), string tipoUc = default(string), decimal? fatorTipoUC = default(decimal?), string loteFabricacaoOrigem = default(string), string loteFabricacaoDestino = default(string), DateTime? dataFabricacaoOrigem = default(DateTime?), DateTime? dataFabricacaoDestino = default(DateTime?), DateTime? dataVencimentoOrigem = default(DateTime?), DateTime? dataVencimentoDestino = default(DateTime?), string loteGeralOrigem = default(string), string loteGeralDestino = default(string), string classeProdutoOrigem = default(string), string classeProdutoDestino = default(string), decimal? quantidade = default(decimal?), long? bloqueioSequencia = default(long?), long? numeroMovimento = default(long?), string codigoEmpresa = default(string), string tipoDocumento = default(string), string serieDocumento = default(string), string numeroDocumento = default(string))
        {
            // to ensure "sequenciaMovimentoEstoque" is required (not null)
            if (sequenciaMovimentoEstoque == null)
            {
                throw new InvalidDataException("sequenciaMovimentoEstoque is a required property for MovimentoEstoqueDTO and cannot be null");
            }
            else
            {
                this.SequenciaMovimentoEstoque = sequenciaMovimentoEstoque;
            }
            // to ensure "codigoProduto" is required (not null)
            if (codigoProduto == null)
            {
                throw new InvalidDataException("codigoProduto is a required property for MovimentoEstoqueDTO and cannot be null");
            }
            else
            {
                this.CodigoProduto = codigoProduto;
            }
            this.TipoUc = tipoUc;
            this.FatorTipoUC = fatorTipoUC;
            this.LoteFabricacaoOrigem = loteFabricacaoOrigem;
            this.LoteFabricacaoDestino = loteFabricacaoDestino;
            this.DataFabricacaoOrigem = dataFabricacaoOrigem;
            this.DataFabricacaoDestino = dataFabricacaoDestino;
            this.DataVencimentoOrigem = dataVencimentoOrigem;
            this.DataVencimentoDestino = dataVencimentoDestino;
            this.LoteGeralOrigem = loteGeralOrigem;
            this.LoteGeralDestino = loteGeralDestino;
            this.ClasseProdutoOrigem = classeProdutoOrigem;
            this.ClasseProdutoDestino = classeProdutoDestino;
            this.Quantidade = quantidade;
            this.BloqueioSequencia = bloqueioSequencia;
            this.NumeroMovimento = numeroMovimento;
            this.CodigoEmpresa = codigoEmpresa;
            this.TipoDocumento = tipoDocumento;
            this.SerieDocumento = serieDocumento;
            this.NumeroDocumento = numeroDocumento;
        }
        
        /// <summary>
        /// Sequencia identificadora de cada linha
        /// </summary>
        /// <value>Sequencia identificadora de cada linha</value>
        [DataMember(Name="sequenciaMovimentoEstoque", EmitDefaultValue=false)]
        public long? SequenciaMovimentoEstoque { get; set; }

        /// <summary>
        /// Código do Produto do Store WMAS
        /// </summary>
        /// <value>Código do Produto do Store WMAS</value>
        [DataMember(Name="codigoProduto", EmitDefaultValue=false)]
        public string CodigoProduto { get; set; }

        /// <summary>
        /// Tipo UC do Produto do Store WMAS
        /// </summary>
        /// <value>Tipo UC do Produto do Store WMAS</value>
        [DataMember(Name="tipoUc", EmitDefaultValue=false)]
        public string TipoUc { get; set; }

        /// <summary>
        /// Fator Tipo UC do Produto do Store WMAS
        /// </summary>
        /// <value>Fator Tipo UC do Produto do Store WMAS</value>
        [DataMember(Name="fatorTipoUC", EmitDefaultValue=false)]
        public decimal? FatorTipoUC { get; set; }

        /// <summary>
        /// Lote Fabricação Origem
        /// </summary>
        /// <value>Lote Fabricação Origem</value>
        [DataMember(Name="loteFabricacaoOrigem", EmitDefaultValue=false)]
        public string LoteFabricacaoOrigem { get; set; }

        /// <summary>
        /// Lote Fabricação Destino
        /// </summary>
        /// <value>Lote Fabricação Destino</value>
        [DataMember(Name="loteFabricacaoDestino", EmitDefaultValue=false)]
        public string LoteFabricacaoDestino { get; set; }

        /// <summary>
        /// Data Fabricação Origem
        /// </summary>
        /// <value>Data Fabricação Origem</value>
        [DataMember(Name="dataFabricacaoOrigem", EmitDefaultValue=false)]
        public DateTime? DataFabricacaoOrigem { get; set; }

        /// <summary>
        /// Data Fabricação Destino
        /// </summary>
        /// <value>Data Fabricação Destino</value>
        [DataMember(Name="dataFabricacaoDestino", EmitDefaultValue=false)]
        public DateTime? DataFabricacaoDestino { get; set; }

        /// <summary>
        /// Data Vencimento Origem
        /// </summary>
        /// <value>Data Vencimento Origem</value>
        [DataMember(Name="dataVencimentoOrigem", EmitDefaultValue=false)]
        public DateTime? DataVencimentoOrigem { get; set; }

        /// <summary>
        /// Data Vencimento Destino
        /// </summary>
        /// <value>Data Vencimento Destino</value>
        [DataMember(Name="dataVencimentoDestino", EmitDefaultValue=false)]
        public DateTime? DataVencimentoDestino { get; set; }

        /// <summary>
        /// Lote Geral Origem
        /// </summary>
        /// <value>Lote Geral Origem</value>
        [DataMember(Name="loteGeralOrigem", EmitDefaultValue=false)]
        public string LoteGeralOrigem { get; set; }

        /// <summary>
        /// Lote Geral Destino
        /// </summary>
        /// <value>Lote Geral Destino</value>
        [DataMember(Name="loteGeralDestino", EmitDefaultValue=false)]
        public string LoteGeralDestino { get; set; }

        /// <summary>
        /// Classe Produto Origem
        /// </summary>
        /// <value>Classe Produto Origem</value>
        [DataMember(Name="classeProdutoOrigem", EmitDefaultValue=false)]
        public string ClasseProdutoOrigem { get; set; }

        /// <summary>
        /// Classe Produto Destino
        /// </summary>
        /// <value>Classe Produto Destino</value>
        [DataMember(Name="classeProdutoDestino", EmitDefaultValue=false)]
        public string ClasseProdutoDestino { get; set; }

        /// <summary>
        /// Quantidade a ser movimentada (fator sempre 1, ou seja, a quantidade de produtos e não do Tipo UC)
        /// </summary>
        /// <value>Quantidade a ser movimentada (fator sempre 1, ou seja, a quantidade de produtos e não do Tipo UC)</value>
        [DataMember(Name="quantidade", EmitDefaultValue=false)]
        public decimal? Quantidade { get; set; }

        /// <summary>
        /// Bloquear Sequencia Saldo
        /// </summary>
        /// <value>Bloquear Sequencia Saldo</value>
        [DataMember(Name="bloqueioSequencia", EmitDefaultValue=false)]
        public long? BloqueioSequencia { get; set; }

        /// <summary>
        /// Número Movimento
        /// </summary>
        /// <value>Número Movimento</value>
        [DataMember(Name="numeroMovimento", EmitDefaultValue=false)]
        public long? NumeroMovimento { get; set; }

        /// <summary>
        /// Código Empresa do Documento Entrada
        /// </summary>
        /// <value>Código Empresa do Documento Entrada</value>
        [DataMember(Name="codigoEmpresa", EmitDefaultValue=false)]
        public string CodigoEmpresa { get; set; }

        /// <summary>
        /// Tipo do Documento Entrada
        /// </summary>
        /// <value>Tipo do Documento Entrada</value>
        [DataMember(Name="tipoDocumento", EmitDefaultValue=false)]
        public string TipoDocumento { get; set; }

        /// <summary>
        /// Série do Documento Entrada
        /// </summary>
        /// <value>Série do Documento Entrada</value>
        [DataMember(Name="serieDocumento", EmitDefaultValue=false)]
        public string SerieDocumento { get; set; }

        /// <summary>
        /// Número do Documento Entrada
        /// </summary>
        /// <value>Número do Documento Entrada</value>
        [DataMember(Name="numeroDocumento", EmitDefaultValue=false)]
        public string NumeroDocumento { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MovimentoEstoqueDTO {\n");
            sb.Append("  SequenciaMovimentoEstoque: ").Append(SequenciaMovimentoEstoque).Append("\n");
            sb.Append("  CodigoProduto: ").Append(CodigoProduto).Append("\n");
            sb.Append("  TipoUc: ").Append(TipoUc).Append("\n");
            sb.Append("  FatorTipoUC: ").Append(FatorTipoUC).Append("\n");
            sb.Append("  LoteFabricacaoOrigem: ").Append(LoteFabricacaoOrigem).Append("\n");
            sb.Append("  LoteFabricacaoDestino: ").Append(LoteFabricacaoDestino).Append("\n");
            sb.Append("  DataFabricacaoOrigem: ").Append(DataFabricacaoOrigem).Append("\n");
            sb.Append("  DataFabricacaoDestino: ").Append(DataFabricacaoDestino).Append("\n");
            sb.Append("  DataVencimentoOrigem: ").Append(DataVencimentoOrigem).Append("\n");
            sb.Append("  DataVencimentoDestino: ").Append(DataVencimentoDestino).Append("\n");
            sb.Append("  LoteGeralOrigem: ").Append(LoteGeralOrigem).Append("\n");
            sb.Append("  LoteGeralDestino: ").Append(LoteGeralDestino).Append("\n");
            sb.Append("  ClasseProdutoOrigem: ").Append(ClasseProdutoOrigem).Append("\n");
            sb.Append("  ClasseProdutoDestino: ").Append(ClasseProdutoDestino).Append("\n");
            sb.Append("  Quantidade: ").Append(Quantidade).Append("\n");
            sb.Append("  BloqueioSequencia: ").Append(BloqueioSequencia).Append("\n");
            sb.Append("  NumeroMovimento: ").Append(NumeroMovimento).Append("\n");
            sb.Append("  CodigoEmpresa: ").Append(CodigoEmpresa).Append("\n");
            sb.Append("  TipoDocumento: ").Append(TipoDocumento).Append("\n");
            sb.Append("  SerieDocumento: ").Append(SerieDocumento).Append("\n");
            sb.Append("  NumeroDocumento: ").Append(NumeroDocumento).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MovimentoEstoqueDTO);
        }

        /// <summary>
        /// Returns true if MovimentoEstoqueDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of MovimentoEstoqueDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MovimentoEstoqueDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SequenciaMovimentoEstoque == input.SequenciaMovimentoEstoque ||
                    (this.SequenciaMovimentoEstoque != null &&
                    this.SequenciaMovimentoEstoque.Equals(input.SequenciaMovimentoEstoque))
                ) && 
                (
                    this.CodigoProduto == input.CodigoProduto ||
                    (this.CodigoProduto != null &&
                    this.CodigoProduto.Equals(input.CodigoProduto))
                ) && 
                (
                    this.TipoUc == input.TipoUc ||
                    (this.TipoUc != null &&
                    this.TipoUc.Equals(input.TipoUc))
                ) && 
                (
                    this.FatorTipoUC == input.FatorTipoUC ||
                    (this.FatorTipoUC != null &&
                    this.FatorTipoUC.Equals(input.FatorTipoUC))
                ) && 
                (
                    this.LoteFabricacaoOrigem == input.LoteFabricacaoOrigem ||
                    (this.LoteFabricacaoOrigem != null &&
                    this.LoteFabricacaoOrigem.Equals(input.LoteFabricacaoOrigem))
                ) && 
                (
                    this.LoteFabricacaoDestino == input.LoteFabricacaoDestino ||
                    (this.LoteFabricacaoDestino != null &&
                    this.LoteFabricacaoDestino.Equals(input.LoteFabricacaoDestino))
                ) && 
                (
                    this.DataFabricacaoOrigem == input.DataFabricacaoOrigem ||
                    (this.DataFabricacaoOrigem != null &&
                    this.DataFabricacaoOrigem.Equals(input.DataFabricacaoOrigem))
                ) && 
                (
                    this.DataFabricacaoDestino == input.DataFabricacaoDestino ||
                    (this.DataFabricacaoDestino != null &&
                    this.DataFabricacaoDestino.Equals(input.DataFabricacaoDestino))
                ) && 
                (
                    this.DataVencimentoOrigem == input.DataVencimentoOrigem ||
                    (this.DataVencimentoOrigem != null &&
                    this.DataVencimentoOrigem.Equals(input.DataVencimentoOrigem))
                ) && 
                (
                    this.DataVencimentoDestino == input.DataVencimentoDestino ||
                    (this.DataVencimentoDestino != null &&
                    this.DataVencimentoDestino.Equals(input.DataVencimentoDestino))
                ) && 
                (
                    this.LoteGeralOrigem == input.LoteGeralOrigem ||
                    (this.LoteGeralOrigem != null &&
                    this.LoteGeralOrigem.Equals(input.LoteGeralOrigem))
                ) && 
                (
                    this.LoteGeralDestino == input.LoteGeralDestino ||
                    (this.LoteGeralDestino != null &&
                    this.LoteGeralDestino.Equals(input.LoteGeralDestino))
                ) && 
                (
                    this.ClasseProdutoOrigem == input.ClasseProdutoOrigem ||
                    (this.ClasseProdutoOrigem != null &&
                    this.ClasseProdutoOrigem.Equals(input.ClasseProdutoOrigem))
                ) && 
                (
                    this.ClasseProdutoDestino == input.ClasseProdutoDestino ||
                    (this.ClasseProdutoDestino != null &&
                    this.ClasseProdutoDestino.Equals(input.ClasseProdutoDestino))
                ) && 
                (
                    this.Quantidade == input.Quantidade ||
                    (this.Quantidade != null &&
                    this.Quantidade.Equals(input.Quantidade))
                ) && 
                (
                    this.BloqueioSequencia == input.BloqueioSequencia ||
                    (this.BloqueioSequencia != null &&
                    this.BloqueioSequencia.Equals(input.BloqueioSequencia))
                ) && 
                (
                    this.NumeroMovimento == input.NumeroMovimento ||
                    (this.NumeroMovimento != null &&
                    this.NumeroMovimento.Equals(input.NumeroMovimento))
                ) && 
                (
                    this.CodigoEmpresa == input.CodigoEmpresa ||
                    (this.CodigoEmpresa != null &&
                    this.CodigoEmpresa.Equals(input.CodigoEmpresa))
                ) && 
                (
                    this.TipoDocumento == input.TipoDocumento ||
                    (this.TipoDocumento != null &&
                    this.TipoDocumento.Equals(input.TipoDocumento))
                ) && 
                (
                    this.SerieDocumento == input.SerieDocumento ||
                    (this.SerieDocumento != null &&
                    this.SerieDocumento.Equals(input.SerieDocumento))
                ) && 
                (
                    this.NumeroDocumento == input.NumeroDocumento ||
                    (this.NumeroDocumento != null &&
                    this.NumeroDocumento.Equals(input.NumeroDocumento))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SequenciaMovimentoEstoque != null)
                    hashCode = hashCode * 59 + this.SequenciaMovimentoEstoque.GetHashCode();
                if (this.CodigoProduto != null)
                    hashCode = hashCode * 59 + this.CodigoProduto.GetHashCode();
                if (this.TipoUc != null)
                    hashCode = hashCode * 59 + this.TipoUc.GetHashCode();
                if (this.FatorTipoUC != null)
                    hashCode = hashCode * 59 + this.FatorTipoUC.GetHashCode();
                if (this.LoteFabricacaoOrigem != null)
                    hashCode = hashCode * 59 + this.LoteFabricacaoOrigem.GetHashCode();
                if (this.LoteFabricacaoDestino != null)
                    hashCode = hashCode * 59 + this.LoteFabricacaoDestino.GetHashCode();
                if (this.DataFabricacaoOrigem != null)
                    hashCode = hashCode * 59 + this.DataFabricacaoOrigem.GetHashCode();
                if (this.DataFabricacaoDestino != null)
                    hashCode = hashCode * 59 + this.DataFabricacaoDestino.GetHashCode();
                if (this.DataVencimentoOrigem != null)
                    hashCode = hashCode * 59 + this.DataVencimentoOrigem.GetHashCode();
                if (this.DataVencimentoDestino != null)
                    hashCode = hashCode * 59 + this.DataVencimentoDestino.GetHashCode();
                if (this.LoteGeralOrigem != null)
                    hashCode = hashCode * 59 + this.LoteGeralOrigem.GetHashCode();
                if (this.LoteGeralDestino != null)
                    hashCode = hashCode * 59 + this.LoteGeralDestino.GetHashCode();
                if (this.ClasseProdutoOrigem != null)
                    hashCode = hashCode * 59 + this.ClasseProdutoOrigem.GetHashCode();
                if (this.ClasseProdutoDestino != null)
                    hashCode = hashCode * 59 + this.ClasseProdutoDestino.GetHashCode();
                if (this.Quantidade != null)
                    hashCode = hashCode * 59 + this.Quantidade.GetHashCode();
                if (this.BloqueioSequencia != null)
                    hashCode = hashCode * 59 + this.BloqueioSequencia.GetHashCode();
                if (this.NumeroMovimento != null)
                    hashCode = hashCode * 59 + this.NumeroMovimento.GetHashCode();
                if (this.CodigoEmpresa != null)
                    hashCode = hashCode * 59 + this.CodigoEmpresa.GetHashCode();
                if (this.TipoDocumento != null)
                    hashCode = hashCode * 59 + this.TipoDocumento.GetHashCode();
                if (this.SerieDocumento != null)
                    hashCode = hashCode * 59 + this.SerieDocumento.GetHashCode();
                if (this.NumeroDocumento != null)
                    hashCode = hashCode * 59 + this.NumeroDocumento.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
