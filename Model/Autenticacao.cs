/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Informações enviadas no resource de autenticação
    /// </summary>
    [DataContract]
    public partial class Autenticacao :  IEquatable<Autenticacao>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Autenticacao" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Autenticacao() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Autenticacao" /> class.
        /// </summary>
        /// <param name="usuario">usuario (required).</param>
        /// <param name="senha">senha (required).</param>
        /// <param name="cnpj">CNPJ licenciado a utilizar os sistemas Store.</param>
        /// <param name="ambiente">Ambiente de utilização da licença(0 - Homologação, 1 - Produção) (required).</param>
        /// <param name="sistema">Sistema de utilização da licença(2 - Store WMAS, 3 - Store Coletor, 4 - Store Designer, 5 - Store Web, 6 - Store Redex) (required).</param>
        /// <param name="ip">IP da máquina solicitante da licença.</param>
        /// <param name="tipoLicenca">0 - Usuário Aplicação, 1 - Usuário Externo, 2 Usuário Integracao.</param>
        public Autenticacao(string usuario = default(string), string senha = default(string), string cnpj = default(string), int? ambiente = default(int?), long? sistema = default(long?), string ip = default(string), int? tipoLicenca = default(int?))
        {
            // to ensure "usuario" is required (not null)
            if (usuario == null)
            {
                throw new InvalidDataException("usuario is a required property for Autenticacao and cannot be null");
            }
            else
            {
                this.Usuario = usuario;
            }
            // to ensure "senha" is required (not null)
            if (senha == null)
            {
                throw new InvalidDataException("senha is a required property for Autenticacao and cannot be null");
            }
            else
            {
                this.Senha = senha;
            }
            // to ensure "ambiente" is required (not null)
            if (ambiente == null)
            {
                throw new InvalidDataException("ambiente is a required property for Autenticacao and cannot be null");
            }
            else
            {
                this.Ambiente = ambiente;
            }
            // to ensure "sistema" is required (not null)
            if (sistema == null)
            {
                throw new InvalidDataException("sistema is a required property for Autenticacao and cannot be null");
            }
            else
            {
                this.Sistema = sistema;
            }
            this.Cnpj = cnpj;
            this.Ip = ip;
            this.TipoLicenca = tipoLicenca;
        }
        
        /// <summary>
        /// Gets or Sets Usuario
        /// </summary>
        [DataMember(Name="usuario", EmitDefaultValue=false)]
        public string Usuario { get; set; }

        /// <summary>
        /// Gets or Sets Senha
        /// </summary>
        [DataMember(Name="senha", EmitDefaultValue=false)]
        public string Senha { get; set; }

        /// <summary>
        /// CNPJ licenciado a utilizar os sistemas Store
        /// </summary>
        /// <value>CNPJ licenciado a utilizar os sistemas Store</value>
        [DataMember(Name="cnpj", EmitDefaultValue=false)]
        public string Cnpj { get; set; }

        /// <summary>
        /// Ambiente de utilização da licença(0 - Homologação, 1 - Produção)
        /// </summary>
        /// <value>Ambiente de utilização da licença(0 - Homologação, 1 - Produção)</value>
        [DataMember(Name="ambiente", EmitDefaultValue=false)]
        public int? Ambiente { get; set; }

        /// <summary>
        /// Sistema de utilização da licença(2 - Store WMAS, 3 - Store Coletor, 4 - Store Designer, 5 - Store Web, 6 - Store Redex)
        /// </summary>
        /// <value>Sistema de utilização da licença(2 - Store WMAS, 3 - Store Coletor, 4 - Store Designer, 5 - Store Web, 6 - Store Redex)</value>
        [DataMember(Name="sistema", EmitDefaultValue=false)]
        public long? Sistema { get; set; }

        /// <summary>
        /// IP da máquina solicitante da licença
        /// </summary>
        /// <value>IP da máquina solicitante da licença</value>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public string Ip { get; set; }

        /// <summary>
        /// 0 - Usuário Aplicação, 1 - Usuário Externo, 2 Usuário Integracao
        /// </summary>
        /// <value>0 - Usuário Aplicação, 1 - Usuário Externo, 2 Usuário Integracao</value>
        [DataMember(Name="tipoLicenca", EmitDefaultValue=false)]
        public int? TipoLicenca { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Autenticacao {\n");
            sb.Append("  Usuario: ").Append(Usuario).Append("\n");
            sb.Append("  Senha: ").Append(Senha).Append("\n");
            sb.Append("  Cnpj: ").Append(Cnpj).Append("\n");
            sb.Append("  Ambiente: ").Append(Ambiente).Append("\n");
            sb.Append("  Sistema: ").Append(Sistema).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  TipoLicenca: ").Append(TipoLicenca).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Autenticacao);
        }

        /// <summary>
        /// Returns true if Autenticacao instances are equal
        /// </summary>
        /// <param name="input">Instance of Autenticacao to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Autenticacao input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Usuario == input.Usuario ||
                    (this.Usuario != null &&
                    this.Usuario.Equals(input.Usuario))
                ) && 
                (
                    this.Senha == input.Senha ||
                    (this.Senha != null &&
                    this.Senha.Equals(input.Senha))
                ) && 
                (
                    this.Cnpj == input.Cnpj ||
                    (this.Cnpj != null &&
                    this.Cnpj.Equals(input.Cnpj))
                ) && 
                (
                    this.Ambiente == input.Ambiente ||
                    (this.Ambiente != null &&
                    this.Ambiente.Equals(input.Ambiente))
                ) && 
                (
                    this.Sistema == input.Sistema ||
                    (this.Sistema != null &&
                    this.Sistema.Equals(input.Sistema))
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.TipoLicenca == input.TipoLicenca ||
                    (this.TipoLicenca != null &&
                    this.TipoLicenca.Equals(input.TipoLicenca))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Usuario != null)
                    hashCode = hashCode * 59 + this.Usuario.GetHashCode();
                if (this.Senha != null)
                    hashCode = hashCode * 59 + this.Senha.GetHashCode();
                if (this.Cnpj != null)
                    hashCode = hashCode * 59 + this.Cnpj.GetHashCode();
                if (this.Ambiente != null)
                    hashCode = hashCode * 59 + this.Ambiente.GetHashCode();
                if (this.Sistema != null)
                    hashCode = hashCode * 59 + this.Sistema.GetHashCode();
                if (this.Ip != null)
                    hashCode = hashCode * 59 + this.Ip.GetHashCode();
                if (this.TipoLicenca != null)
                    hashCode = hashCode * 59 + this.TipoLicenca.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Usuario (string) maxLength
            if(this.Usuario != null && this.Usuario.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Usuario, length must be less than 50.", new [] { "Usuario" });
            }

            // Usuario (string) minLength
            if(this.Usuario != null && this.Usuario.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Usuario, length must be greater than 0.", new [] { "Usuario" });
            }

            // Senha (string) maxLength
            if(this.Senha != null && this.Senha.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Senha, length must be less than 255.", new [] { "Senha" });
            }

            // Senha (string) minLength
            if(this.Senha != null && this.Senha.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Senha, length must be greater than 0.", new [] { "Senha" });
            }

            yield break;
        }
    }

}
