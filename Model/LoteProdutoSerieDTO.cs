/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// LoteProdutoSerieDTO
    /// </summary>
    [DataContract]
    public partial class LoteProdutoSerieDTO :  IEquatable<LoteProdutoSerieDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoteProdutoSerieDTO" /> class.
        /// </summary>
        /// <param name="codigoEstabelecimento">codigoEstabelecimento.</param>
        /// <param name="codigoDepositante">codigoDepositante.</param>
        /// <param name="lote">lote.</param>
        /// <param name="codigoProduto">codigoProduto.</param>
        /// <param name="tipoUc">tipoUc.</param>
        /// <param name="fatorTipoUc">fatorTipoUc.</param>
        /// <param name="classeProduto">classeProduto.</param>
        /// <param name="quantidade">quantidade.</param>
        /// <param name="loteGeral">loteGeral.</param>
        /// <param name="loteFabricacao">loteFabricacao.</param>
        /// <param name="dataFabricacao">dataFabricacao.</param>
        /// <param name="dataVencimento">dataVencimento.</param>
        /// <param name="series">series.</param>
        public LoteProdutoSerieDTO(long? codigoEstabelecimento = default(long?), string codigoDepositante = default(string), long? lote = default(long?), string codigoProduto = default(string), string tipoUc = default(string), decimal? fatorTipoUc = default(decimal?), string classeProduto = default(string), decimal? quantidade = default(decimal?), string loteGeral = default(string), string loteFabricacao = default(string), DateTime? dataFabricacao = default(DateTime?), DateTime? dataVencimento = default(DateTime?), List<ProdutoSerieDTO> series = default(List<ProdutoSerieDTO>))
        {
            this.CodigoEstabelecimento = codigoEstabelecimento;
            this.CodigoDepositante = codigoDepositante;
            this.Lote = lote;
            this.CodigoProduto = codigoProduto;
            this.TipoUc = tipoUc;
            this.FatorTipoUc = fatorTipoUc;
            this.ClasseProduto = classeProduto;
            this.Quantidade = quantidade;
            this.LoteGeral = loteGeral;
            this.LoteFabricacao = loteFabricacao;
            this.DataFabricacao = dataFabricacao;
            this.DataVencimento = dataVencimento;
            this.Series = series;
        }
        
        /// <summary>
        /// Gets or Sets CodigoEstabelecimento
        /// </summary>
        [DataMember(Name="codigoEstabelecimento", EmitDefaultValue=false)]
        public long? CodigoEstabelecimento { get; set; }

        /// <summary>
        /// Gets or Sets CodigoDepositante
        /// </summary>
        [DataMember(Name="codigoDepositante", EmitDefaultValue=false)]
        public string CodigoDepositante { get; set; }

        /// <summary>
        /// Gets or Sets Lote
        /// </summary>
        [DataMember(Name="lote", EmitDefaultValue=false)]
        public long? Lote { get; set; }

        /// <summary>
        /// Gets or Sets CodigoProduto
        /// </summary>
        [DataMember(Name="codigoProduto", EmitDefaultValue=false)]
        public string CodigoProduto { get; set; }

        /// <summary>
        /// Gets or Sets TipoUc
        /// </summary>
        [DataMember(Name="tipoUc", EmitDefaultValue=false)]
        public string TipoUc { get; set; }

        /// <summary>
        /// Gets or Sets FatorTipoUc
        /// </summary>
        [DataMember(Name="fatorTipoUc", EmitDefaultValue=false)]
        public decimal? FatorTipoUc { get; set; }

        /// <summary>
        /// Gets or Sets ClasseProduto
        /// </summary>
        [DataMember(Name="classeProduto", EmitDefaultValue=false)]
        public string ClasseProduto { get; set; }

        /// <summary>
        /// Gets or Sets Quantidade
        /// </summary>
        [DataMember(Name="quantidade", EmitDefaultValue=false)]
        public decimal? Quantidade { get; set; }

        /// <summary>
        /// Gets or Sets LoteGeral
        /// </summary>
        [DataMember(Name="loteGeral", EmitDefaultValue=false)]
        public string LoteGeral { get; set; }

        /// <summary>
        /// Gets or Sets LoteFabricacao
        /// </summary>
        [DataMember(Name="loteFabricacao", EmitDefaultValue=false)]
        public string LoteFabricacao { get; set; }

        /// <summary>
        /// Gets or Sets DataFabricacao
        /// </summary>
        [DataMember(Name="dataFabricacao", EmitDefaultValue=false)]
        public DateTime? DataFabricacao { get; set; }

        /// <summary>
        /// Gets or Sets DataVencimento
        /// </summary>
        [DataMember(Name="dataVencimento", EmitDefaultValue=false)]
        public DateTime? DataVencimento { get; set; }

        /// <summary>
        /// Gets or Sets Series
        /// </summary>
        [DataMember(Name="series", EmitDefaultValue=false)]
        public List<ProdutoSerieDTO> Series { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoteProdutoSerieDTO {\n");
            sb.Append("  CodigoEstabelecimento: ").Append(CodigoEstabelecimento).Append("\n");
            sb.Append("  CodigoDepositante: ").Append(CodigoDepositante).Append("\n");
            sb.Append("  Lote: ").Append(Lote).Append("\n");
            sb.Append("  CodigoProduto: ").Append(CodigoProduto).Append("\n");
            sb.Append("  TipoUc: ").Append(TipoUc).Append("\n");
            sb.Append("  FatorTipoUc: ").Append(FatorTipoUc).Append("\n");
            sb.Append("  ClasseProduto: ").Append(ClasseProduto).Append("\n");
            sb.Append("  Quantidade: ").Append(Quantidade).Append("\n");
            sb.Append("  LoteGeral: ").Append(LoteGeral).Append("\n");
            sb.Append("  LoteFabricacao: ").Append(LoteFabricacao).Append("\n");
            sb.Append("  DataFabricacao: ").Append(DataFabricacao).Append("\n");
            sb.Append("  DataVencimento: ").Append(DataVencimento).Append("\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoteProdutoSerieDTO);
        }

        /// <summary>
        /// Returns true if LoteProdutoSerieDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of LoteProdutoSerieDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoteProdutoSerieDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CodigoEstabelecimento == input.CodigoEstabelecimento ||
                    (this.CodigoEstabelecimento != null &&
                    this.CodigoEstabelecimento.Equals(input.CodigoEstabelecimento))
                ) && 
                (
                    this.CodigoDepositante == input.CodigoDepositante ||
                    (this.CodigoDepositante != null &&
                    this.CodigoDepositante.Equals(input.CodigoDepositante))
                ) && 
                (
                    this.Lote == input.Lote ||
                    (this.Lote != null &&
                    this.Lote.Equals(input.Lote))
                ) && 
                (
                    this.CodigoProduto == input.CodigoProduto ||
                    (this.CodigoProduto != null &&
                    this.CodigoProduto.Equals(input.CodigoProduto))
                ) && 
                (
                    this.TipoUc == input.TipoUc ||
                    (this.TipoUc != null &&
                    this.TipoUc.Equals(input.TipoUc))
                ) && 
                (
                    this.FatorTipoUc == input.FatorTipoUc ||
                    (this.FatorTipoUc != null &&
                    this.FatorTipoUc.Equals(input.FatorTipoUc))
                ) && 
                (
                    this.ClasseProduto == input.ClasseProduto ||
                    (this.ClasseProduto != null &&
                    this.ClasseProduto.Equals(input.ClasseProduto))
                ) && 
                (
                    this.Quantidade == input.Quantidade ||
                    (this.Quantidade != null &&
                    this.Quantidade.Equals(input.Quantidade))
                ) && 
                (
                    this.LoteGeral == input.LoteGeral ||
                    (this.LoteGeral != null &&
                    this.LoteGeral.Equals(input.LoteGeral))
                ) && 
                (
                    this.LoteFabricacao == input.LoteFabricacao ||
                    (this.LoteFabricacao != null &&
                    this.LoteFabricacao.Equals(input.LoteFabricacao))
                ) && 
                (
                    this.DataFabricacao == input.DataFabricacao ||
                    (this.DataFabricacao != null &&
                    this.DataFabricacao.Equals(input.DataFabricacao))
                ) && 
                (
                    this.DataVencimento == input.DataVencimento ||
                    (this.DataVencimento != null &&
                    this.DataVencimento.Equals(input.DataVencimento))
                ) && 
                (
                    this.Series == input.Series ||
                    this.Series != null &&
                    this.Series.SequenceEqual(input.Series)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodigoEstabelecimento != null)
                    hashCode = hashCode * 59 + this.CodigoEstabelecimento.GetHashCode();
                if (this.CodigoDepositante != null)
                    hashCode = hashCode * 59 + this.CodigoDepositante.GetHashCode();
                if (this.Lote != null)
                    hashCode = hashCode * 59 + this.Lote.GetHashCode();
                if (this.CodigoProduto != null)
                    hashCode = hashCode * 59 + this.CodigoProduto.GetHashCode();
                if (this.TipoUc != null)
                    hashCode = hashCode * 59 + this.TipoUc.GetHashCode();
                if (this.FatorTipoUc != null)
                    hashCode = hashCode * 59 + this.FatorTipoUc.GetHashCode();
                if (this.ClasseProduto != null)
                    hashCode = hashCode * 59 + this.ClasseProduto.GetHashCode();
                if (this.Quantidade != null)
                    hashCode = hashCode * 59 + this.Quantidade.GetHashCode();
                if (this.LoteGeral != null)
                    hashCode = hashCode * 59 + this.LoteGeral.GetHashCode();
                if (this.LoteFabricacao != null)
                    hashCode = hashCode * 59 + this.LoteFabricacao.GetHashCode();
                if (this.DataFabricacao != null)
                    hashCode = hashCode * 59 + this.DataFabricacao.GetHashCode();
                if (this.DataVencimento != null)
                    hashCode = hashCode * 59 + this.DataVencimento.GetHashCode();
                if (this.Series != null)
                    hashCode = hashCode * 59 + this.Series.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
