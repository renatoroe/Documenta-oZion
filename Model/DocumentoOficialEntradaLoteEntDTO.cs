/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DocumentoOficialEntradaLoteEntDTO
    /// </summary>
    [DataContract]
    public partial class DocumentoOficialEntradaLoteEntDTO :  IEquatable<DocumentoOficialEntradaLoteEntDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentoOficialEntradaLoteEntDTO" /> class.
        /// </summary>
        /// <param name="codigoEstabelecimento">codigoEstabelecimento.</param>
        /// <param name="loteEntrada">loteEntrada.</param>
        /// <param name="codigoEmpresa">codigoEmpresa.</param>
        /// <param name="tipoDocumento">tipoDocumento.</param>
        /// <param name="serieDocumento">serieDocumento.</param>
        /// <param name="documentoOficialEntrada">documentoOficialEntrada.</param>
        /// <param name="sequenciaOficialEntrada">sequenciaOficialEntrada.</param>
        /// <param name="quantidadeAtendida">quantidadeAtendida.</param>
        /// <param name="quantidadeAtual">quantidadeAtual.</param>
        /// <param name="loteEntradaObj">loteEntradaObj.</param>
        /// <param name="documentooficialentradaitem">documentooficialentradaitem.</param>
        public DocumentoOficialEntradaLoteEntDTO(long? codigoEstabelecimento = default(long?), long? loteEntrada = default(long?), string codigoEmpresa = default(string), string tipoDocumento = default(string), string serieDocumento = default(string), string documentoOficialEntrada = default(string), long? sequenciaOficialEntrada = default(long?), decimal? quantidadeAtendida = default(decimal?), decimal? quantidadeAtual = default(decimal?), LoteEntradaDTO loteEntradaObj = default(LoteEntradaDTO), DocumentoOficialEntradaItemDTO documentooficialentradaitem = default(DocumentoOficialEntradaItemDTO))
        {
            this.CodigoEstabelecimento = codigoEstabelecimento;
            this.LoteEntrada = loteEntrada;
            this.CodigoEmpresa = codigoEmpresa;
            this.TipoDocumento = tipoDocumento;
            this.SerieDocumento = serieDocumento;
            this.DocumentoOficialEntrada = documentoOficialEntrada;
            this.SequenciaOficialEntrada = sequenciaOficialEntrada;
            this.QuantidadeAtendida = quantidadeAtendida;
            this.QuantidadeAtual = quantidadeAtual;
            this.LoteEntradaObj = loteEntradaObj;
            this.Documentooficialentradaitem = documentooficialentradaitem;
        }
        
        /// <summary>
        /// Gets or Sets CodigoEstabelecimento
        /// </summary>
        [DataMember(Name="codigoEstabelecimento", EmitDefaultValue=false)]
        public long? CodigoEstabelecimento { get; set; }

        /// <summary>
        /// Gets or Sets LoteEntrada
        /// </summary>
        [DataMember(Name="loteEntrada", EmitDefaultValue=false)]
        public long? LoteEntrada { get; set; }

        /// <summary>
        /// Gets or Sets CodigoEmpresa
        /// </summary>
        [DataMember(Name="codigoEmpresa", EmitDefaultValue=false)]
        public string CodigoEmpresa { get; set; }

        /// <summary>
        /// Gets or Sets TipoDocumento
        /// </summary>
        [DataMember(Name="tipoDocumento", EmitDefaultValue=false)]
        public string TipoDocumento { get; set; }

        /// <summary>
        /// Gets or Sets SerieDocumento
        /// </summary>
        [DataMember(Name="serieDocumento", EmitDefaultValue=false)]
        public string SerieDocumento { get; set; }

        /// <summary>
        /// Gets or Sets DocumentoOficialEntrada
        /// </summary>
        [DataMember(Name="documentoOficialEntrada", EmitDefaultValue=false)]
        public string DocumentoOficialEntrada { get; set; }

        /// <summary>
        /// Gets or Sets SequenciaOficialEntrada
        /// </summary>
        [DataMember(Name="sequenciaOficialEntrada", EmitDefaultValue=false)]
        public long? SequenciaOficialEntrada { get; set; }

        /// <summary>
        /// Gets or Sets QuantidadeAtendida
        /// </summary>
        [DataMember(Name="quantidadeAtendida", EmitDefaultValue=false)]
        public decimal? QuantidadeAtendida { get; set; }

        /// <summary>
        /// Gets or Sets QuantidadeAtual
        /// </summary>
        [DataMember(Name="quantidadeAtual", EmitDefaultValue=false)]
        public decimal? QuantidadeAtual { get; set; }

        /// <summary>
        /// Gets or Sets LoteEntradaObj
        /// </summary>
        [DataMember(Name="loteEntradaObj", EmitDefaultValue=false)]
        public LoteEntradaDTO LoteEntradaObj { get; set; }

        /// <summary>
        /// Gets or Sets Documentooficialentradaitem
        /// </summary>
        [DataMember(Name="documentooficialentradaitem", EmitDefaultValue=false)]
        public DocumentoOficialEntradaItemDTO Documentooficialentradaitem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentoOficialEntradaLoteEntDTO {\n");
            sb.Append("  CodigoEstabelecimento: ").Append(CodigoEstabelecimento).Append("\n");
            sb.Append("  LoteEntrada: ").Append(LoteEntrada).Append("\n");
            sb.Append("  CodigoEmpresa: ").Append(CodigoEmpresa).Append("\n");
            sb.Append("  TipoDocumento: ").Append(TipoDocumento).Append("\n");
            sb.Append("  SerieDocumento: ").Append(SerieDocumento).Append("\n");
            sb.Append("  DocumentoOficialEntrada: ").Append(DocumentoOficialEntrada).Append("\n");
            sb.Append("  SequenciaOficialEntrada: ").Append(SequenciaOficialEntrada).Append("\n");
            sb.Append("  QuantidadeAtendida: ").Append(QuantidadeAtendida).Append("\n");
            sb.Append("  QuantidadeAtual: ").Append(QuantidadeAtual).Append("\n");
            sb.Append("  LoteEntradaObj: ").Append(LoteEntradaObj).Append("\n");
            sb.Append("  Documentooficialentradaitem: ").Append(Documentooficialentradaitem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentoOficialEntradaLoteEntDTO);
        }

        /// <summary>
        /// Returns true if DocumentoOficialEntradaLoteEntDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentoOficialEntradaLoteEntDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentoOficialEntradaLoteEntDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CodigoEstabelecimento == input.CodigoEstabelecimento ||
                    (this.CodigoEstabelecimento != null &&
                    this.CodigoEstabelecimento.Equals(input.CodigoEstabelecimento))
                ) && 
                (
                    this.LoteEntrada == input.LoteEntrada ||
                    (this.LoteEntrada != null &&
                    this.LoteEntrada.Equals(input.LoteEntrada))
                ) && 
                (
                    this.CodigoEmpresa == input.CodigoEmpresa ||
                    (this.CodigoEmpresa != null &&
                    this.CodigoEmpresa.Equals(input.CodigoEmpresa))
                ) && 
                (
                    this.TipoDocumento == input.TipoDocumento ||
                    (this.TipoDocumento != null &&
                    this.TipoDocumento.Equals(input.TipoDocumento))
                ) && 
                (
                    this.SerieDocumento == input.SerieDocumento ||
                    (this.SerieDocumento != null &&
                    this.SerieDocumento.Equals(input.SerieDocumento))
                ) && 
                (
                    this.DocumentoOficialEntrada == input.DocumentoOficialEntrada ||
                    (this.DocumentoOficialEntrada != null &&
                    this.DocumentoOficialEntrada.Equals(input.DocumentoOficialEntrada))
                ) && 
                (
                    this.SequenciaOficialEntrada == input.SequenciaOficialEntrada ||
                    (this.SequenciaOficialEntrada != null &&
                    this.SequenciaOficialEntrada.Equals(input.SequenciaOficialEntrada))
                ) && 
                (
                    this.QuantidadeAtendida == input.QuantidadeAtendida ||
                    (this.QuantidadeAtendida != null &&
                    this.QuantidadeAtendida.Equals(input.QuantidadeAtendida))
                ) && 
                (
                    this.QuantidadeAtual == input.QuantidadeAtual ||
                    (this.QuantidadeAtual != null &&
                    this.QuantidadeAtual.Equals(input.QuantidadeAtual))
                ) && 
                (
                    this.LoteEntradaObj == input.LoteEntradaObj ||
                    (this.LoteEntradaObj != null &&
                    this.LoteEntradaObj.Equals(input.LoteEntradaObj))
                ) && 
                (
                    this.Documentooficialentradaitem == input.Documentooficialentradaitem ||
                    (this.Documentooficialentradaitem != null &&
                    this.Documentooficialentradaitem.Equals(input.Documentooficialentradaitem))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodigoEstabelecimento != null)
                    hashCode = hashCode * 59 + this.CodigoEstabelecimento.GetHashCode();
                if (this.LoteEntrada != null)
                    hashCode = hashCode * 59 + this.LoteEntrada.GetHashCode();
                if (this.CodigoEmpresa != null)
                    hashCode = hashCode * 59 + this.CodigoEmpresa.GetHashCode();
                if (this.TipoDocumento != null)
                    hashCode = hashCode * 59 + this.TipoDocumento.GetHashCode();
                if (this.SerieDocumento != null)
                    hashCode = hashCode * 59 + this.SerieDocumento.GetHashCode();
                if (this.DocumentoOficialEntrada != null)
                    hashCode = hashCode * 59 + this.DocumentoOficialEntrada.GetHashCode();
                if (this.SequenciaOficialEntrada != null)
                    hashCode = hashCode * 59 + this.SequenciaOficialEntrada.GetHashCode();
                if (this.QuantidadeAtendida != null)
                    hashCode = hashCode * 59 + this.QuantidadeAtendida.GetHashCode();
                if (this.QuantidadeAtual != null)
                    hashCode = hashCode * 59 + this.QuantidadeAtual.GetHashCode();
                if (this.LoteEntradaObj != null)
                    hashCode = hashCode * 59 + this.LoteEntradaObj.GetHashCode();
                if (this.Documentooficialentradaitem != null)
                    hashCode = hashCode * 59 + this.Documentooficialentradaitem.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
