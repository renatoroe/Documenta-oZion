/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Localidade
    /// </summary>
    [DataContract]
    public partial class Localidade :  IEquatable<Localidade>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Localidade" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Localidade() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Localidade" /> class.
        /// </summary>
        /// <param name="codigoLocalidade">codigoLocalidade (required).</param>
        /// <param name="descricaoLocalidade">descricaoLocalidade.</param>
        /// <param name="ufLocalidade">ufLocalidade.</param>
        /// <param name="tipoLocalidade">tipoLocalidade.</param>
        /// <param name="pais">pais.</param>
        /// <param name="iata">iata.</param>
        /// <param name="codigoFiscalLocalidade">codigoFiscalLocalidade.</param>
        /// <param name="usuario">usuario.</param>
        /// <param name="dataAtualizacao">dataAtualizacao.</param>
        /// <param name="codigoIbge">codigoIbge.</param>
        /// <param name="codigosIafi">codigosIafi.</param>
        public Localidade(string codigoLocalidade = default(string), string descricaoLocalidade = default(string), string ufLocalidade = default(string), TipoLocalidade tipoLocalidade = default(TipoLocalidade), Pais pais = default(Pais), Iata iata = default(Iata), string codigoFiscalLocalidade = default(string), string usuario = default(string), DateTime? dataAtualizacao = default(DateTime?), long? codigoIbge = default(long?), string codigosIafi = default(string))
        {
            // to ensure "codigoLocalidade" is required (not null)
            if (codigoLocalidade == null)
            {
                throw new InvalidDataException("codigoLocalidade is a required property for Localidade and cannot be null");
            }
            else
            {
                this.CodigoLocalidade = codigoLocalidade;
            }
            this.DescricaoLocalidade = descricaoLocalidade;
            this.UfLocalidade = ufLocalidade;
            this.TipoLocalidade = tipoLocalidade;
            this.Pais = pais;
            this.Iata = iata;
            this.CodigoFiscalLocalidade = codigoFiscalLocalidade;
            this.Usuario = usuario;
            this.DataAtualizacao = dataAtualizacao;
            this.CodigoIbge = codigoIbge;
            this.CodigosIafi = codigosIafi;
        }
        
        /// <summary>
        /// Gets or Sets CodigoLocalidade
        /// </summary>
        [DataMember(Name="codigoLocalidade", EmitDefaultValue=false)]
        public string CodigoLocalidade { get; set; }

        /// <summary>
        /// Gets or Sets DescricaoLocalidade
        /// </summary>
        [DataMember(Name="descricaoLocalidade", EmitDefaultValue=false)]
        public string DescricaoLocalidade { get; set; }

        /// <summary>
        /// Gets or Sets UfLocalidade
        /// </summary>
        [DataMember(Name="ufLocalidade", EmitDefaultValue=false)]
        public string UfLocalidade { get; set; }

        /// <summary>
        /// Gets or Sets TipoLocalidade
        /// </summary>
        [DataMember(Name="tipoLocalidade", EmitDefaultValue=false)]
        public TipoLocalidade TipoLocalidade { get; set; }

        /// <summary>
        /// Gets or Sets Pais
        /// </summary>
        [DataMember(Name="pais", EmitDefaultValue=false)]
        public Pais Pais { get; set; }

        /// <summary>
        /// Gets or Sets Iata
        /// </summary>
        [DataMember(Name="iata", EmitDefaultValue=false)]
        public Iata Iata { get; set; }

        /// <summary>
        /// Gets or Sets CodigoFiscalLocalidade
        /// </summary>
        [DataMember(Name="codigoFiscalLocalidade", EmitDefaultValue=false)]
        public string CodigoFiscalLocalidade { get; set; }

        /// <summary>
        /// Gets or Sets Usuario
        /// </summary>
        [DataMember(Name="usuario", EmitDefaultValue=false)]
        public string Usuario { get; set; }

        /// <summary>
        /// Gets or Sets DataAtualizacao
        /// </summary>
        [DataMember(Name="dataAtualizacao", EmitDefaultValue=false)]
        public DateTime? DataAtualizacao { get; set; }

        /// <summary>
        /// Gets or Sets CodigoIbge
        /// </summary>
        [DataMember(Name="codigoIbge", EmitDefaultValue=false)]
        public long? CodigoIbge { get; set; }

        /// <summary>
        /// Gets or Sets CodigosIafi
        /// </summary>
        [DataMember(Name="codigosIafi", EmitDefaultValue=false)]
        public string CodigosIafi { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Localidade {\n");
            sb.Append("  CodigoLocalidade: ").Append(CodigoLocalidade).Append("\n");
            sb.Append("  DescricaoLocalidade: ").Append(DescricaoLocalidade).Append("\n");
            sb.Append("  UfLocalidade: ").Append(UfLocalidade).Append("\n");
            sb.Append("  TipoLocalidade: ").Append(TipoLocalidade).Append("\n");
            sb.Append("  Pais: ").Append(Pais).Append("\n");
            sb.Append("  Iata: ").Append(Iata).Append("\n");
            sb.Append("  CodigoFiscalLocalidade: ").Append(CodigoFiscalLocalidade).Append("\n");
            sb.Append("  Usuario: ").Append(Usuario).Append("\n");
            sb.Append("  DataAtualizacao: ").Append(DataAtualizacao).Append("\n");
            sb.Append("  CodigoIbge: ").Append(CodigoIbge).Append("\n");
            sb.Append("  CodigosIafi: ").Append(CodigosIafi).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Localidade);
        }

        /// <summary>
        /// Returns true if Localidade instances are equal
        /// </summary>
        /// <param name="input">Instance of Localidade to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Localidade input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CodigoLocalidade == input.CodigoLocalidade ||
                    (this.CodigoLocalidade != null &&
                    this.CodigoLocalidade.Equals(input.CodigoLocalidade))
                ) && 
                (
                    this.DescricaoLocalidade == input.DescricaoLocalidade ||
                    (this.DescricaoLocalidade != null &&
                    this.DescricaoLocalidade.Equals(input.DescricaoLocalidade))
                ) && 
                (
                    this.UfLocalidade == input.UfLocalidade ||
                    (this.UfLocalidade != null &&
                    this.UfLocalidade.Equals(input.UfLocalidade))
                ) && 
                (
                    this.TipoLocalidade == input.TipoLocalidade ||
                    (this.TipoLocalidade != null &&
                    this.TipoLocalidade.Equals(input.TipoLocalidade))
                ) && 
                (
                    this.Pais == input.Pais ||
                    (this.Pais != null &&
                    this.Pais.Equals(input.Pais))
                ) && 
                (
                    this.Iata == input.Iata ||
                    (this.Iata != null &&
                    this.Iata.Equals(input.Iata))
                ) && 
                (
                    this.CodigoFiscalLocalidade == input.CodigoFiscalLocalidade ||
                    (this.CodigoFiscalLocalidade != null &&
                    this.CodigoFiscalLocalidade.Equals(input.CodigoFiscalLocalidade))
                ) && 
                (
                    this.Usuario == input.Usuario ||
                    (this.Usuario != null &&
                    this.Usuario.Equals(input.Usuario))
                ) && 
                (
                    this.DataAtualizacao == input.DataAtualizacao ||
                    (this.DataAtualizacao != null &&
                    this.DataAtualizacao.Equals(input.DataAtualizacao))
                ) && 
                (
                    this.CodigoIbge == input.CodigoIbge ||
                    (this.CodigoIbge != null &&
                    this.CodigoIbge.Equals(input.CodigoIbge))
                ) && 
                (
                    this.CodigosIafi == input.CodigosIafi ||
                    (this.CodigosIafi != null &&
                    this.CodigosIafi.Equals(input.CodigosIafi))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodigoLocalidade != null)
                    hashCode = hashCode * 59 + this.CodigoLocalidade.GetHashCode();
                if (this.DescricaoLocalidade != null)
                    hashCode = hashCode * 59 + this.DescricaoLocalidade.GetHashCode();
                if (this.UfLocalidade != null)
                    hashCode = hashCode * 59 + this.UfLocalidade.GetHashCode();
                if (this.TipoLocalidade != null)
                    hashCode = hashCode * 59 + this.TipoLocalidade.GetHashCode();
                if (this.Pais != null)
                    hashCode = hashCode * 59 + this.Pais.GetHashCode();
                if (this.Iata != null)
                    hashCode = hashCode * 59 + this.Iata.GetHashCode();
                if (this.CodigoFiscalLocalidade != null)
                    hashCode = hashCode * 59 + this.CodigoFiscalLocalidade.GetHashCode();
                if (this.Usuario != null)
                    hashCode = hashCode * 59 + this.Usuario.GetHashCode();
                if (this.DataAtualizacao != null)
                    hashCode = hashCode * 59 + this.DataAtualizacao.GetHashCode();
                if (this.CodigoIbge != null)
                    hashCode = hashCode * 59 + this.CodigoIbge.GetHashCode();
                if (this.CodigosIafi != null)
                    hashCode = hashCode * 59 + this.CodigosIafi.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DescricaoLocalidade (string) maxLength
            if(this.DescricaoLocalidade != null && this.DescricaoLocalidade.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DescricaoLocalidade, length must be less than 60.", new [] { "DescricaoLocalidade" });
            }

            // DescricaoLocalidade (string) minLength
            if(this.DescricaoLocalidade != null && this.DescricaoLocalidade.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DescricaoLocalidade, length must be greater than 0.", new [] { "DescricaoLocalidade" });
            }

            // UfLocalidade (string) maxLength
            if(this.UfLocalidade != null && this.UfLocalidade.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UfLocalidade, length must be less than 2.", new [] { "UfLocalidade" });
            }

            // UfLocalidade (string) minLength
            if(this.UfLocalidade != null && this.UfLocalidade.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UfLocalidade, length must be greater than 0.", new [] { "UfLocalidade" });
            }

            // CodigoFiscalLocalidade (string) maxLength
            if(this.CodigoFiscalLocalidade != null && this.CodigoFiscalLocalidade.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CodigoFiscalLocalidade, length must be less than 10.", new [] { "CodigoFiscalLocalidade" });
            }

            // CodigoFiscalLocalidade (string) minLength
            if(this.CodigoFiscalLocalidade != null && this.CodigoFiscalLocalidade.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CodigoFiscalLocalidade, length must be greater than 0.", new [] { "CodigoFiscalLocalidade" });
            }

            // Usuario (string) maxLength
            if(this.Usuario != null && this.Usuario.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Usuario, length must be less than 15.", new [] { "Usuario" });
            }

            // Usuario (string) minLength
            if(this.Usuario != null && this.Usuario.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Usuario, length must be greater than 0.", new [] { "Usuario" });
            }

            // CodigosIafi (string) maxLength
            if(this.CodigosIafi != null && this.CodigosIafi.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CodigosIafi, length must be less than 10.", new [] { "CodigosIafi" });
            }

            // CodigosIafi (string) minLength
            if(this.CodigosIafi != null && this.CodigosIafi.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CodigosIafi, length must be greater than 0.", new [] { "CodigosIafi" });
            }

            yield break;
        }
    }

}
