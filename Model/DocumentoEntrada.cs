/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DocumentoEntrada
    /// </summary>
    [DataContract]
    public partial class DocumentoEntrada :  IEquatable<DocumentoEntrada>, IValidatableObject
    {
        /// <summary>
        /// Defines EstadoDocumento
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EstadoDocumentoEnum
        {
            
            /// <summary>
            /// Enum PENDENTE for value: _PENDENTE
            /// </summary>
            [EnumMember(Value = "_PENDENTE")]
            PENDENTE = 1,
            
            /// <summary>
            /// Enum CONFERIDO for value: _CONFERIDO
            /// </summary>
            [EnumMember(Value = "_CONFERIDO")]
            CONFERIDO = 2,
            
            /// <summary>
            /// Enum EXPEDIDO for value: _EXPEDIDO
            /// </summary>
            [EnumMember(Value = "_EXPEDIDO")]
            EXPEDIDO = 3,
            
            /// <summary>
            /// Enum EFETIVADO for value: _EFETIVADO
            /// </summary>
            [EnumMember(Value = "_EFETIVADO")]
            EFETIVADO = 4,
            
            /// <summary>
            /// Enum EPEMESPERA for value: EP_EM_ESPERA
            /// </summary>
            [EnumMember(Value = "EP_EM_ESPERA")]
            EPEMESPERA = 5,
            
            /// <summary>
            /// Enum EPPENDENTE for value: EP_PENDENTE
            /// </summary>
            [EnumMember(Value = "EP_PENDENTE")]
            EPPENDENTE = 6,
            
            /// <summary>
            /// Enum EPPREVISTO for value: EP_PREVISTO
            /// </summary>
            [EnumMember(Value = "EP_PREVISTO")]
            EPPREVISTO = 7,
            
            /// <summary>
            /// Enum EPATENDIDO for value: EP_ATENDIDO
            /// </summary>
            [EnumMember(Value = "EP_ATENDIDO")]
            EPATENDIDO = 8,
            
            /// <summary>
            /// Enum EPENCERRADO for value: EP_ENCERRADO
            /// </summary>
            [EnumMember(Value = "EP_ENCERRADO")]
            EPENCERRADO = 9,
            
            /// <summary>
            /// Enum EPCANCELADO for value: EP_CANCELADO
            /// </summary>
            [EnumMember(Value = "EP_CANCELADO")]
            EPCANCELADO = 10,
            
            /// <summary>
            /// Enum EDPENDENTE for value: ED_PENDENTE
            /// </summary>
            [EnumMember(Value = "ED_PENDENTE")]
            EDPENDENTE = 11,
            
            /// <summary>
            /// Enum EDEMEXECUCAO for value: ED_EM_EXECUCAO
            /// </summary>
            [EnumMember(Value = "ED_EM_EXECUCAO")]
            EDEMEXECUCAO = 12,
            
            /// <summary>
            /// Enum EDCONFIRMADO for value: ED_CONFIRMADO
            /// </summary>
            [EnumMember(Value = "ED_CONFIRMADO")]
            EDCONFIRMADO = 13,
            
            /// <summary>
            /// Enum EDCONCLUIDO for value: ED_CONCLUIDO
            /// </summary>
            [EnumMember(Value = "ED_CONCLUIDO")]
            EDCONCLUIDO = 14,
            
            /// <summary>
            /// Enum EDSOLICITACAOCANCELAMENTO for value: ED_SOLICITACAO_CANCELAMENTO
            /// </summary>
            [EnumMember(Value = "ED_SOLICITACAO_CANCELAMENTO")]
            EDSOLICITACAOCANCELAMENTO = 15,
            
            /// <summary>
            /// Enum EDCANCELADO for value: ED_CANCELADO
            /// </summary>
            [EnumMember(Value = "ED_CANCELADO")]
            EDCANCELADO = 16,
            
            /// <summary>
            /// Enum EOPENDENTE for value: EO_PENDENTE
            /// </summary>
            [EnumMember(Value = "EO_PENDENTE")]
            EOPENDENTE = 17,
            
            /// <summary>
            /// Enum EOCONFIRMADO for value: EO_CONFIRMADO
            /// </summary>
            [EnumMember(Value = "EO_CONFIRMADO")]
            EOCONFIRMADO = 18,
            
            /// <summary>
            /// Enum EOCONCLUIDO for value: EO_CONCLUIDO
            /// </summary>
            [EnumMember(Value = "EO_CONCLUIDO")]
            EOCONCLUIDO = 19,
            
            /// <summary>
            /// Enum EOENCERRADO for value: EO_ENCERRADO
            /// </summary>
            [EnumMember(Value = "EO_ENCERRADO")]
            EOENCERRADO = 20,
            
            /// <summary>
            /// Enum EOSOLICITACAOCANCELAMENTO for value: EO_SOLICITACAO_CANCELAMENTO
            /// </summary>
            [EnumMember(Value = "EO_SOLICITACAO_CANCELAMENTO")]
            EOSOLICITACAOCANCELAMENTO = 21,
            
            /// <summary>
            /// Enum EOCANCELADO for value: EO_CANCELADO
            /// </summary>
            [EnumMember(Value = "EO_CANCELADO")]
            EOCANCELADO = 22,
            
            /// <summary>
            /// Enum EOPOPENDENTE for value: EOPO_PENDENTE
            /// </summary>
            [EnumMember(Value = "EOPO_PENDENTE")]
            EOPOPENDENTE = 23,
            
            /// <summary>
            /// Enum EOPOCONFIRMADO for value: EOPO_CONFIRMADO
            /// </summary>
            [EnumMember(Value = "EOPO_CONFIRMADO")]
            EOPOCONFIRMADO = 24,
            
            /// <summary>
            /// Enum EOPOEMEXECUCAO for value: EOPO_EM_EXECUCAO
            /// </summary>
            [EnumMember(Value = "EOPO_EM_EXECUCAO")]
            EOPOEMEXECUCAO = 25,
            
            /// <summary>
            /// Enum EOPOONDACONCLUIDA for value: EOPO_ONDA_CONCLUIDA
            /// </summary>
            [EnumMember(Value = "EOPO_ONDA_CONCLUIDA")]
            EOPOONDACONCLUIDA = 26,
            
            /// <summary>
            /// Enum EOPOCONCLUIDO for value: EOPO_CONCLUIDO
            /// </summary>
            [EnumMember(Value = "EOPO_CONCLUIDO")]
            EOPOCONCLUIDO = 27,
            
            /// <summary>
            /// Enum EOPOCANCELADO for value: EOPO_CANCELADO
            /// </summary>
            [EnumMember(Value = "EOPO_CANCELADO")]
            EOPOCANCELADO = 28,
            
            /// <summary>
            /// Enum EOPOEMSUGESTAO for value: EOPO_EM_SUGESTAO
            /// </summary>
            [EnumMember(Value = "EOPO_EM_SUGESTAO")]
            EOPOEMSUGESTAO = 29
        }

        /// <summary>
        /// Gets or Sets EstadoDocumento
        /// </summary>
        [DataMember(Name="estadoDocumento", EmitDefaultValue=false)]
        public EstadoDocumentoEnum? EstadoDocumento { get; set; }
        /// <summary>
        /// Defines TipoConferencia
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TipoConferenciaEnum
        {
            
            /// <summary>
            /// Enum SEMCONFERENCIA for value: SEM_CONFERENCIA
            /// </summary>
            [EnumMember(Value = "SEM_CONFERENCIA")]
            SEMCONFERENCIA = 1,
            
            /// <summary>
            /// Enum PRODUTOCLASSIFICADOR for value: PRODUTO_CLASSIFICADOR
            /// </summary>
            [EnumMember(Value = "PRODUTO_CLASSIFICADOR")]
            PRODUTOCLASSIFICADOR = 2,
            
            /// <summary>
            /// Enum CONFAUTOMATICAUA for value: CONF_AUTOMATICA_UA
            /// </summary>
            [EnumMember(Value = "CONF_AUTOMATICA_UA")]
            CONFAUTOMATICAUA = 3
        }

        /// <summary>
        /// Gets or Sets TipoConferencia
        /// </summary>
        [DataMember(Name="tipoConferencia", EmitDefaultValue=false)]
        public TipoConferenciaEnum? TipoConferencia { get; set; }
        /// <summary>
        /// Defines EstadoDocumentoArquivoUpload
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EstadoDocumentoArquivoUploadEnum
        {
            
            /// <summary>
            /// Enum CONFERIDA for value: CONFERIDA
            /// </summary>
            [EnumMember(Value = "CONFERIDA")]
            CONFERIDA = 1,
            
            /// <summary>
            /// Enum PENDENTE for value: PENDENTE
            /// </summary>
            [EnumMember(Value = "PENDENTE")]
            PENDENTE = 2,
            
            /// <summary>
            /// Enum FINALIZADA for value: FINALIZADA
            /// </summary>
            [EnumMember(Value = "FINALIZADA")]
            FINALIZADA = 3,
            
            /// <summary>
            /// Enum SEPARADA for value: SEPARADA
            /// </summary>
            [EnumMember(Value = "SEPARADA")]
            SEPARADA = 4,
            
            /// <summary>
            /// Enum CANCELADA for value: CANCELADA
            /// </summary>
            [EnumMember(Value = "CANCELADA")]
            CANCELADA = 5
        }

        /// <summary>
        /// Gets or Sets EstadoDocumentoArquivoUpload
        /// </summary>
        [DataMember(Name="estadoDocumentoArquivoUpload", EmitDefaultValue=false)]
        public EstadoDocumentoArquivoUploadEnum? EstadoDocumentoArquivoUpload { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentoEntrada" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentoEntrada() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentoEntrada" /> class.
        /// </summary>
        /// <param name="codigoEstabelecimento">codigoEstabelecimento.</param>
        /// <param name="codigoEmpresa">codigoEmpresa.</param>
        /// <param name="tipoDocumento">tipoDocumento.</param>
        /// <param name="serieDocumento">serieDocumento.</param>
        /// <param name="documentoEntrada">documentoEntrada.</param>
        /// <param name="codigoDocumento">codigoDocumento.</param>
        /// <param name="documentoRelacionado">documentoRelacionado.</param>
        /// <param name="estadoDocumento">estadoDocumento.</param>
        /// <param name="empresaEmitente">empresaEmitente.</param>
        /// <param name="empresaDestino">empresaDestino.</param>
        /// <param name="naturezaOperacao">naturezaOperacao (required).</param>
        /// <param name="dataEmissao">dataEmissao.</param>
        /// <param name="dataMovimento">dataMovimento.</param>
        /// <param name="especieDocumento">especieDocumento (required).</param>
        /// <param name="especieVolume">especieVolume.</param>
        /// <param name="quantidadeVolume">quantidadeVolume.</param>
        /// <param name="numeroVolume">numeroVolume.</param>
        /// <param name="marcaVolume">marcaVolume.</param>
        /// <param name="tipoFrete">tipoFrete.</param>
        /// <param name="tipoConferencia">tipoConferencia.</param>
        /// <param name="nfeChaveAcesso">nfeChaveAcesso.</param>
        /// <param name="nfeProtocolo">nfeProtocolo.</param>
        /// <param name="nfeDigestValue">nfeDigestValue.</param>
        /// <param name="nfeDataRecebimento">nfeDataRecebimento.</param>
        /// <param name="nfeAmbiente">nfeAmbiente.</param>
        /// <param name="nfeTipoEmissao">nfeTipoEmissao.</param>
        /// <param name="nfeTipoImpressao">nfeTipoImpressao.</param>
        /// <param name="finalidadeDocumento">finalidadeDocumento.</param>
        /// <param name="valorTotalDocumento">valorTotalDocumento.</param>
        /// <param name="valorIcms">valorIcms.</param>
        /// <param name="valorIcmsSub">valorIcmsSub.</param>
        /// <param name="valorIcmsUfDestino">valorIcmsUfDestino.</param>
        /// <param name="valorIcmsUfOrigem">valorIcmsUfOrigem.</param>
        /// <param name="valorTotalFecpSt">valorTotalFecpSt.</param>
        /// <param name="valorTotalFecpRet">valorTotalFecpRet.</param>
        /// <param name="valorIcmsFecpUfDestino">valorIcmsFecpUfDestino.</param>
        /// <param name="valorTotalFecp">valorTotalFecp.</param>
        /// <param name="valorIpi">valorIpi.</param>
        /// <param name="valorFrete">valorFrete.</param>
        /// <param name="valorSeguro">valorSeguro.</param>
        /// <param name="valorServico">valorServico.</param>
        /// <param name="valorDesconto">valorDesconto.</param>
        /// <param name="valorDescontoItem">valorDescontoItem.</param>
        /// <param name="valorAcrescimo">valorAcrescimo.</param>
        /// <param name="valorAcrescimoItem">valorAcrescimoItem.</param>
        /// <param name="valorTotalProduto">valorTotalProduto.</param>
        /// <param name="valorBaseIcms">valorBaseIcms.</param>
        /// <param name="valorBaseIcmsSub">valorBaseIcmsSub.</param>
        /// <param name="valorBaseIpi">valorBaseIpi.</param>
        /// <param name="pesoBruto">pesoBruto.</param>
        /// <param name="pesoLiquido">pesoLiquido.</param>
        /// <param name="volumeCubico">volumeCubico.</param>
        /// <param name="informacaoAdicional1">informacaoAdicional1.</param>
        /// <param name="informacaoAdicional2">informacaoAdicional2.</param>
        /// <param name="informacaoAdicional3">informacaoAdicional3.</param>
        /// <param name="cfop">cfop.</param>
        /// <param name="usuario">usuario.</param>
        /// <param name="usuarioGeracao">usuarioGeracao.</param>
        /// <param name="dataHistorico">dataHistorico.</param>
        /// <param name="dataGeracao">dataGeracao.</param>
        /// <param name="conhecimentoTransporte">conhecimentoTransporte.</param>
        /// <param name="idEnderecoEmpresa">idEnderecoEmpresa.</param>
        /// <param name="placaVeiculo">placaVeiculo.</param>
        /// <param name="ufVeiculo">ufVeiculo.</param>
        /// <param name="nomeMotorista">nomeMotorista.</param>
        /// <param name="documentoMotorista">documentoMotorista.</param>
        /// <param name="loteEntrada">loteEntrada.</param>
        /// <param name="docBloqueadoOficializacao">docBloqueadoOficializacao.</param>
        /// <param name="possuiAvaria">possuiAvaria.</param>
        /// <param name="estadoDocumentoArquivoUpload">estadoDocumentoArquivoUpload.</param>
        /// <param name="estadoProcesso">estadoProcesso.</param>
        /// <param name="codigoTabelaServico">codigoTabelaServico.</param>
        /// <param name="documentoOficialEntrada">documentoOficialEntrada.</param>
        /// <param name="tabelaServico">tabelaServico.</param>
        /// <param name="observacaoDocumento">observacaoDocumento.</param>
        /// <param name="validarPrevisao">validarPrevisao.</param>
        /// <param name="validarOficial">validarOficial.</param>
        /// <param name="permitirSerieExpedida">permitirSerieExpedida.</param>
        /// <param name="dataPrevisaoMovimento">dataPrevisaoMovimento.</param>
        public DocumentoEntrada(long? codigoEstabelecimento = default(long?), string codigoEmpresa = default(string), string tipoDocumento = default(string), string serieDocumento = default(string), string documentoEntrada = default(string), long? codigoDocumento = default(long?), string documentoRelacionado = default(string), EstadoDocumentoEnum? estadoDocumento = default(EstadoDocumentoEnum?), Empresa empresaEmitente = default(Empresa), Empresa empresaDestino = default(Empresa), NaturezaOperacao naturezaOperacao = default(NaturezaOperacao), DateTime? dataEmissao = default(DateTime?), DateTime? dataMovimento = default(DateTime?), string especieDocumento = default(string), string especieVolume = default(string), decimal? quantidadeVolume = default(decimal?), string numeroVolume = default(string), string marcaVolume = default(string), long? tipoFrete = default(long?), TipoConferenciaEnum? tipoConferencia = default(TipoConferenciaEnum?), string nfeChaveAcesso = default(string), string nfeProtocolo = default(string), string nfeDigestValue = default(string), DateTime? nfeDataRecebimento = default(DateTime?), NfeAmbiente nfeAmbiente = default(NfeAmbiente), NfeTipoEmissao nfeTipoEmissao = default(NfeTipoEmissao), NfeTipoImpressao nfeTipoImpressao = default(NfeTipoImpressao), FinalidadeDocumento finalidadeDocumento = default(FinalidadeDocumento), decimal? valorTotalDocumento = default(decimal?), decimal? valorIcms = default(decimal?), decimal? valorIcmsSub = default(decimal?), decimal? valorIcmsUfDestino = default(decimal?), decimal? valorIcmsUfOrigem = default(decimal?), decimal? valorTotalFecpSt = default(decimal?), decimal? valorTotalFecpRet = default(decimal?), decimal? valorIcmsFecpUfDestino = default(decimal?), decimal? valorTotalFecp = default(decimal?), decimal? valorIpi = default(decimal?), decimal? valorFrete = default(decimal?), decimal? valorSeguro = default(decimal?), decimal? valorServico = default(decimal?), decimal? valorDesconto = default(decimal?), decimal? valorDescontoItem = default(decimal?), decimal? valorAcrescimo = default(decimal?), decimal? valorAcrescimoItem = default(decimal?), decimal? valorTotalProduto = default(decimal?), decimal? valorBaseIcms = default(decimal?), decimal? valorBaseIcmsSub = default(decimal?), decimal? valorBaseIpi = default(decimal?), decimal? pesoBruto = default(decimal?), decimal? pesoLiquido = default(decimal?), decimal? volumeCubico = default(decimal?), string informacaoAdicional1 = default(string), string informacaoAdicional2 = default(string), string informacaoAdicional3 = default(string), string cfop = default(string), string usuario = default(string), string usuarioGeracao = default(string), DateTime? dataHistorico = default(DateTime?), DateTime? dataGeracao = default(DateTime?), string conhecimentoTransporte = default(string), long? idEnderecoEmpresa = default(long?), string placaVeiculo = default(string), string ufVeiculo = default(string), string nomeMotorista = default(string), string documentoMotorista = default(string), List<LoteEntrada> loteEntrada = default(List<LoteEntrada>), bool? docBloqueadoOficializacao = default(bool?), bool? possuiAvaria = default(bool?), EstadoDocumentoArquivoUploadEnum? estadoDocumentoArquivoUpload = default(EstadoDocumentoArquivoUploadEnum?), EstadoProcesso estadoProcesso = default(EstadoProcesso), long? codigoTabelaServico = default(long?), string documentoOficialEntrada = default(string), TabelaServico tabelaServico = default(TabelaServico), string observacaoDocumento = default(string), bool? validarPrevisao = default(bool?), bool? validarOficial = default(bool?), bool? permitirSerieExpedida = default(bool?), DateTime? dataPrevisaoMovimento = default(DateTime?))
        {
            // to ensure "naturezaOperacao" is required (not null)
            if (naturezaOperacao == null)
            {
                throw new InvalidDataException("naturezaOperacao is a required property for DocumentoEntrada and cannot be null");
            }
            else
            {
                this.NaturezaOperacao = naturezaOperacao;
            }
            // to ensure "especieDocumento" is required (not null)
            if (especieDocumento == null)
            {
                throw new InvalidDataException("especieDocumento is a required property for DocumentoEntrada and cannot be null");
            }
            else
            {
                this.EspecieDocumento = especieDocumento;
            }
            this.CodigoEstabelecimento = codigoEstabelecimento;
            this.CodigoEmpresa = codigoEmpresa;
            this.TipoDocumento = tipoDocumento;
            this.SerieDocumento = serieDocumento;
            this._DocumentoEntrada = documentoEntrada;
            this.CodigoDocumento = codigoDocumento;
            this.DocumentoRelacionado = documentoRelacionado;
            this.EstadoDocumento = estadoDocumento;
            this.EmpresaEmitente = empresaEmitente;
            this.EmpresaDestino = empresaDestino;
            this.DataEmissao = dataEmissao;
            this.DataMovimento = dataMovimento;
            this.EspecieVolume = especieVolume;
            this.QuantidadeVolume = quantidadeVolume;
            this.NumeroVolume = numeroVolume;
            this.MarcaVolume = marcaVolume;
            this.TipoFrete = tipoFrete;
            this.TipoConferencia = tipoConferencia;
            this.NfeChaveAcesso = nfeChaveAcesso;
            this.NfeProtocolo = nfeProtocolo;
            this.NfeDigestValue = nfeDigestValue;
            this.NfeDataRecebimento = nfeDataRecebimento;
            this.NfeAmbiente = nfeAmbiente;
            this.NfeTipoEmissao = nfeTipoEmissao;
            this.NfeTipoImpressao = nfeTipoImpressao;
            this.FinalidadeDocumento = finalidadeDocumento;
            this.ValorTotalDocumento = valorTotalDocumento;
            this.ValorIcms = valorIcms;
            this.ValorIcmsSub = valorIcmsSub;
            this.ValorIcmsUfDestino = valorIcmsUfDestino;
            this.ValorIcmsUfOrigem = valorIcmsUfOrigem;
            this.ValorTotalFecpSt = valorTotalFecpSt;
            this.ValorTotalFecpRet = valorTotalFecpRet;
            this.ValorIcmsFecpUfDestino = valorIcmsFecpUfDestino;
            this.ValorTotalFecp = valorTotalFecp;
            this.ValorIpi = valorIpi;
            this.ValorFrete = valorFrete;
            this.ValorSeguro = valorSeguro;
            this.ValorServico = valorServico;
            this.ValorDesconto = valorDesconto;
            this.ValorDescontoItem = valorDescontoItem;
            this.ValorAcrescimo = valorAcrescimo;
            this.ValorAcrescimoItem = valorAcrescimoItem;
            this.ValorTotalProduto = valorTotalProduto;
            this.ValorBaseIcms = valorBaseIcms;
            this.ValorBaseIcmsSub = valorBaseIcmsSub;
            this.ValorBaseIpi = valorBaseIpi;
            this.PesoBruto = pesoBruto;
            this.PesoLiquido = pesoLiquido;
            this.VolumeCubico = volumeCubico;
            this.InformacaoAdicional1 = informacaoAdicional1;
            this.InformacaoAdicional2 = informacaoAdicional2;
            this.InformacaoAdicional3 = informacaoAdicional3;
            this.Cfop = cfop;
            this.Usuario = usuario;
            this.UsuarioGeracao = usuarioGeracao;
            this.DataHistorico = dataHistorico;
            this.DataGeracao = dataGeracao;
            this.ConhecimentoTransporte = conhecimentoTransporte;
            this.IdEnderecoEmpresa = idEnderecoEmpresa;
            this.PlacaVeiculo = placaVeiculo;
            this.UfVeiculo = ufVeiculo;
            this.NomeMotorista = nomeMotorista;
            this.DocumentoMotorista = documentoMotorista;
            this.LoteEntrada = loteEntrada;
            this.DocBloqueadoOficializacao = docBloqueadoOficializacao;
            this.PossuiAvaria = possuiAvaria;
            this.EstadoDocumentoArquivoUpload = estadoDocumentoArquivoUpload;
            this.EstadoProcesso = estadoProcesso;
            this.CodigoTabelaServico = codigoTabelaServico;
            this.DocumentoOficialEntrada = documentoOficialEntrada;
            this.TabelaServico = tabelaServico;
            this.ObservacaoDocumento = observacaoDocumento;
            this.ValidarPrevisao = validarPrevisao;
            this.ValidarOficial = validarOficial;
            this.PermitirSerieExpedida = permitirSerieExpedida;
            this.DataPrevisaoMovimento = dataPrevisaoMovimento;
        }
        
        /// <summary>
        /// Gets or Sets CodigoEstabelecimento
        /// </summary>
        [DataMember(Name="codigoEstabelecimento", EmitDefaultValue=false)]
        public long? CodigoEstabelecimento { get; set; }

        /// <summary>
        /// Gets or Sets CodigoEmpresa
        /// </summary>
        [DataMember(Name="codigoEmpresa", EmitDefaultValue=false)]
        public string CodigoEmpresa { get; set; }

        /// <summary>
        /// Gets or Sets TipoDocumento
        /// </summary>
        [DataMember(Name="tipoDocumento", EmitDefaultValue=false)]
        public string TipoDocumento { get; set; }

        /// <summary>
        /// Gets or Sets SerieDocumento
        /// </summary>
        [DataMember(Name="serieDocumento", EmitDefaultValue=false)]
        public string SerieDocumento { get; set; }

        /// <summary>
        /// Gets or Sets _DocumentoEntrada
        /// </summary>
        [DataMember(Name="documentoEntrada", EmitDefaultValue=false)]
        public string _DocumentoEntrada { get; set; }

        /// <summary>
        /// Gets or Sets CodigoDocumento
        /// </summary>
        [DataMember(Name="codigoDocumento", EmitDefaultValue=false)]
        public long? CodigoDocumento { get; set; }

        /// <summary>
        /// Gets or Sets DocumentoRelacionado
        /// </summary>
        [DataMember(Name="documentoRelacionado", EmitDefaultValue=false)]
        public string DocumentoRelacionado { get; set; }


        /// <summary>
        /// Gets or Sets EmpresaEmitente
        /// </summary>
        [DataMember(Name="empresaEmitente", EmitDefaultValue=false)]
        public Empresa EmpresaEmitente { get; set; }

        /// <summary>
        /// Gets or Sets EmpresaDestino
        /// </summary>
        [DataMember(Name="empresaDestino", EmitDefaultValue=false)]
        public Empresa EmpresaDestino { get; set; }

        /// <summary>
        /// Gets or Sets NaturezaOperacao
        /// </summary>
        [DataMember(Name="naturezaOperacao", EmitDefaultValue=false)]
        public NaturezaOperacao NaturezaOperacao { get; set; }

        /// <summary>
        /// Gets or Sets DataEmissao
        /// </summary>
        [DataMember(Name="dataEmissao", EmitDefaultValue=false)]
        public DateTime? DataEmissao { get; set; }

        /// <summary>
        /// Gets or Sets DataMovimento
        /// </summary>
        [DataMember(Name="dataMovimento", EmitDefaultValue=false)]
        public DateTime? DataMovimento { get; set; }

        /// <summary>
        /// Gets or Sets EspecieDocumento
        /// </summary>
        [DataMember(Name="especieDocumento", EmitDefaultValue=false)]
        public string EspecieDocumento { get; set; }

        /// <summary>
        /// Gets or Sets EspecieVolume
        /// </summary>
        [DataMember(Name="especieVolume", EmitDefaultValue=false)]
        public string EspecieVolume { get; set; }

        /// <summary>
        /// Gets or Sets QuantidadeVolume
        /// </summary>
        [DataMember(Name="quantidadeVolume", EmitDefaultValue=false)]
        public decimal? QuantidadeVolume { get; set; }

        /// <summary>
        /// Gets or Sets NumeroVolume
        /// </summary>
        [DataMember(Name="numeroVolume", EmitDefaultValue=false)]
        public string NumeroVolume { get; set; }

        /// <summary>
        /// Gets or Sets MarcaVolume
        /// </summary>
        [DataMember(Name="marcaVolume", EmitDefaultValue=false)]
        public string MarcaVolume { get; set; }

        /// <summary>
        /// Gets or Sets TipoFrete
        /// </summary>
        [DataMember(Name="tipoFrete", EmitDefaultValue=false)]
        public long? TipoFrete { get; set; }


        /// <summary>
        /// Gets or Sets NfeChaveAcesso
        /// </summary>
        [DataMember(Name="nfeChaveAcesso", EmitDefaultValue=false)]
        public string NfeChaveAcesso { get; set; }

        /// <summary>
        /// Gets or Sets NfeProtocolo
        /// </summary>
        [DataMember(Name="nfeProtocolo", EmitDefaultValue=false)]
        public string NfeProtocolo { get; set; }

        /// <summary>
        /// Gets or Sets NfeDigestValue
        /// </summary>
        [DataMember(Name="nfeDigestValue", EmitDefaultValue=false)]
        public string NfeDigestValue { get; set; }

        /// <summary>
        /// Gets or Sets NfeDataRecebimento
        /// </summary>
        [DataMember(Name="nfeDataRecebimento", EmitDefaultValue=false)]
        public DateTime? NfeDataRecebimento { get; set; }

        /// <summary>
        /// Gets or Sets NfeAmbiente
        /// </summary>
        [DataMember(Name="nfeAmbiente", EmitDefaultValue=false)]
        public NfeAmbiente NfeAmbiente { get; set; }

        /// <summary>
        /// Gets or Sets NfeTipoEmissao
        /// </summary>
        [DataMember(Name="nfeTipoEmissao", EmitDefaultValue=false)]
        public NfeTipoEmissao NfeTipoEmissao { get; set; }

        /// <summary>
        /// Gets or Sets NfeTipoImpressao
        /// </summary>
        [DataMember(Name="nfeTipoImpressao", EmitDefaultValue=false)]
        public NfeTipoImpressao NfeTipoImpressao { get; set; }

        /// <summary>
        /// Gets or Sets FinalidadeDocumento
        /// </summary>
        [DataMember(Name="finalidadeDocumento", EmitDefaultValue=false)]
        public FinalidadeDocumento FinalidadeDocumento { get; set; }

        /// <summary>
        /// Gets or Sets ValorTotalDocumento
        /// </summary>
        [DataMember(Name="valorTotalDocumento", EmitDefaultValue=false)]
        public decimal? ValorTotalDocumento { get; set; }

        /// <summary>
        /// Gets or Sets ValorIcms
        /// </summary>
        [DataMember(Name="valorIcms", EmitDefaultValue=false)]
        public decimal? ValorIcms { get; set; }

        /// <summary>
        /// Gets or Sets ValorIcmsSub
        /// </summary>
        [DataMember(Name="valorIcmsSub", EmitDefaultValue=false)]
        public decimal? ValorIcmsSub { get; set; }

        /// <summary>
        /// Gets or Sets ValorIcmsUfDestino
        /// </summary>
        [DataMember(Name="valorIcmsUfDestino", EmitDefaultValue=false)]
        public decimal? ValorIcmsUfDestino { get; set; }

        /// <summary>
        /// Gets or Sets ValorIcmsUfOrigem
        /// </summary>
        [DataMember(Name="valorIcmsUfOrigem", EmitDefaultValue=false)]
        public decimal? ValorIcmsUfOrigem { get; set; }

        /// <summary>
        /// Gets or Sets ValorTotalFecpSt
        /// </summary>
        [DataMember(Name="valorTotalFecpSt", EmitDefaultValue=false)]
        public decimal? ValorTotalFecpSt { get; set; }

        /// <summary>
        /// Gets or Sets ValorTotalFecpRet
        /// </summary>
        [DataMember(Name="valorTotalFecpRet", EmitDefaultValue=false)]
        public decimal? ValorTotalFecpRet { get; set; }

        /// <summary>
        /// Gets or Sets ValorIcmsFecpUfDestino
        /// </summary>
        [DataMember(Name="valorIcmsFecpUfDestino", EmitDefaultValue=false)]
        public decimal? ValorIcmsFecpUfDestino { get; set; }

        /// <summary>
        /// Gets or Sets ValorTotalFecp
        /// </summary>
        [DataMember(Name="valorTotalFecp", EmitDefaultValue=false)]
        public decimal? ValorTotalFecp { get; set; }

        /// <summary>
        /// Gets or Sets ValorIpi
        /// </summary>
        [DataMember(Name="valorIpi", EmitDefaultValue=false)]
        public decimal? ValorIpi { get; set; }

        /// <summary>
        /// Gets or Sets ValorFrete
        /// </summary>
        [DataMember(Name="valorFrete", EmitDefaultValue=false)]
        public decimal? ValorFrete { get; set; }

        /// <summary>
        /// Gets or Sets ValorSeguro
        /// </summary>
        [DataMember(Name="valorSeguro", EmitDefaultValue=false)]
        public decimal? ValorSeguro { get; set; }

        /// <summary>
        /// Gets or Sets ValorServico
        /// </summary>
        [DataMember(Name="valorServico", EmitDefaultValue=false)]
        public decimal? ValorServico { get; set; }

        /// <summary>
        /// Gets or Sets ValorDesconto
        /// </summary>
        [DataMember(Name="valorDesconto", EmitDefaultValue=false)]
        public decimal? ValorDesconto { get; set; }

        /// <summary>
        /// Gets or Sets ValorDescontoItem
        /// </summary>
        [DataMember(Name="valorDescontoItem", EmitDefaultValue=false)]
        public decimal? ValorDescontoItem { get; set; }

        /// <summary>
        /// Gets or Sets ValorAcrescimo
        /// </summary>
        [DataMember(Name="valorAcrescimo", EmitDefaultValue=false)]
        public decimal? ValorAcrescimo { get; set; }

        /// <summary>
        /// Gets or Sets ValorAcrescimoItem
        /// </summary>
        [DataMember(Name="valorAcrescimoItem", EmitDefaultValue=false)]
        public decimal? ValorAcrescimoItem { get; set; }

        /// <summary>
        /// Gets or Sets ValorTotalProduto
        /// </summary>
        [DataMember(Name="valorTotalProduto", EmitDefaultValue=false)]
        public decimal? ValorTotalProduto { get; set; }

        /// <summary>
        /// Gets or Sets ValorBaseIcms
        /// </summary>
        [DataMember(Name="valorBaseIcms", EmitDefaultValue=false)]
        public decimal? ValorBaseIcms { get; set; }

        /// <summary>
        /// Gets or Sets ValorBaseIcmsSub
        /// </summary>
        [DataMember(Name="valorBaseIcmsSub", EmitDefaultValue=false)]
        public decimal? ValorBaseIcmsSub { get; set; }

        /// <summary>
        /// Gets or Sets ValorBaseIpi
        /// </summary>
        [DataMember(Name="valorBaseIpi", EmitDefaultValue=false)]
        public decimal? ValorBaseIpi { get; set; }

        /// <summary>
        /// Gets or Sets PesoBruto
        /// </summary>
        [DataMember(Name="pesoBruto", EmitDefaultValue=false)]
        public decimal? PesoBruto { get; set; }

        /// <summary>
        /// Gets or Sets PesoLiquido
        /// </summary>
        [DataMember(Name="pesoLiquido", EmitDefaultValue=false)]
        public decimal? PesoLiquido { get; set; }

        /// <summary>
        /// Gets or Sets VolumeCubico
        /// </summary>
        [DataMember(Name="volumeCubico", EmitDefaultValue=false)]
        public decimal? VolumeCubico { get; set; }

        /// <summary>
        /// Gets or Sets InformacaoAdicional1
        /// </summary>
        [DataMember(Name="informacaoAdicional1", EmitDefaultValue=false)]
        public string InformacaoAdicional1 { get; set; }

        /// <summary>
        /// Gets or Sets InformacaoAdicional2
        /// </summary>
        [DataMember(Name="informacaoAdicional2", EmitDefaultValue=false)]
        public string InformacaoAdicional2 { get; set; }

        /// <summary>
        /// Gets or Sets InformacaoAdicional3
        /// </summary>
        [DataMember(Name="informacaoAdicional3", EmitDefaultValue=false)]
        public string InformacaoAdicional3 { get; set; }

        /// <summary>
        /// Gets or Sets Cfop
        /// </summary>
        [DataMember(Name="cfop", EmitDefaultValue=false)]
        public string Cfop { get; set; }

        /// <summary>
        /// Gets or Sets Usuario
        /// </summary>
        [DataMember(Name="usuario", EmitDefaultValue=false)]
        public string Usuario { get; set; }

        /// <summary>
        /// Gets or Sets UsuarioGeracao
        /// </summary>
        [DataMember(Name="usuarioGeracao", EmitDefaultValue=false)]
        public string UsuarioGeracao { get; set; }

        /// <summary>
        /// Gets or Sets DataHistorico
        /// </summary>
        [DataMember(Name="dataHistorico", EmitDefaultValue=false)]
        public DateTime? DataHistorico { get; set; }

        /// <summary>
        /// Gets or Sets DataGeracao
        /// </summary>
        [DataMember(Name="dataGeracao", EmitDefaultValue=false)]
        public DateTime? DataGeracao { get; set; }

        /// <summary>
        /// Gets or Sets ConhecimentoTransporte
        /// </summary>
        [DataMember(Name="conhecimentoTransporte", EmitDefaultValue=false)]
        public string ConhecimentoTransporte { get; set; }

        /// <summary>
        /// Gets or Sets IdEnderecoEmpresa
        /// </summary>
        [DataMember(Name="idEnderecoEmpresa", EmitDefaultValue=false)]
        public long? IdEnderecoEmpresa { get; set; }

        /// <summary>
        /// Gets or Sets PlacaVeiculo
        /// </summary>
        [DataMember(Name="placaVeiculo", EmitDefaultValue=false)]
        public string PlacaVeiculo { get; set; }

        /// <summary>
        /// Gets or Sets UfVeiculo
        /// </summary>
        [DataMember(Name="ufVeiculo", EmitDefaultValue=false)]
        public string UfVeiculo { get; set; }

        /// <summary>
        /// Gets or Sets NomeMotorista
        /// </summary>
        [DataMember(Name="nomeMotorista", EmitDefaultValue=false)]
        public string NomeMotorista { get; set; }

        /// <summary>
        /// Gets or Sets DocumentoMotorista
        /// </summary>
        [DataMember(Name="documentoMotorista", EmitDefaultValue=false)]
        public string DocumentoMotorista { get; set; }

        /// <summary>
        /// Gets or Sets LoteEntrada
        /// </summary>
        [DataMember(Name="loteEntrada", EmitDefaultValue=false)]
        public List<LoteEntrada> LoteEntrada { get; set; }

        /// <summary>
        /// Gets or Sets DocBloqueadoOficializacao
        /// </summary>
        [DataMember(Name="docBloqueadoOficializacao", EmitDefaultValue=false)]
        public bool? DocBloqueadoOficializacao { get; set; }

        /// <summary>
        /// Gets or Sets PossuiAvaria
        /// </summary>
        [DataMember(Name="possuiAvaria", EmitDefaultValue=false)]
        public bool? PossuiAvaria { get; set; }


        /// <summary>
        /// Gets or Sets EstadoProcesso
        /// </summary>
        [DataMember(Name="estadoProcesso", EmitDefaultValue=false)]
        public EstadoProcesso EstadoProcesso { get; set; }

        /// <summary>
        /// Gets or Sets CodigoTabelaServico
        /// </summary>
        [DataMember(Name="codigoTabelaServico", EmitDefaultValue=false)]
        public long? CodigoTabelaServico { get; set; }

        /// <summary>
        /// Gets or Sets DocumentoOficialEntrada
        /// </summary>
        [DataMember(Name="documentoOficialEntrada", EmitDefaultValue=false)]
        public string DocumentoOficialEntrada { get; set; }

        /// <summary>
        /// Gets or Sets TabelaServico
        /// </summary>
        [DataMember(Name="tabelaServico", EmitDefaultValue=false)]
        public TabelaServico TabelaServico { get; set; }

        /// <summary>
        /// Gets or Sets ObservacaoDocumento
        /// </summary>
        [DataMember(Name="observacaoDocumento", EmitDefaultValue=false)]
        public string ObservacaoDocumento { get; set; }

        /// <summary>
        /// Gets or Sets ValidarPrevisao
        /// </summary>
        [DataMember(Name="validarPrevisao", EmitDefaultValue=false)]
        public bool? ValidarPrevisao { get; set; }

        /// <summary>
        /// Gets or Sets ValidarOficial
        /// </summary>
        [DataMember(Name="validarOficial", EmitDefaultValue=false)]
        public bool? ValidarOficial { get; set; }

        /// <summary>
        /// Gets or Sets PermitirSerieExpedida
        /// </summary>
        [DataMember(Name="permitirSerieExpedida", EmitDefaultValue=false)]
        public bool? PermitirSerieExpedida { get; set; }

        /// <summary>
        /// Gets or Sets DataPrevisaoMovimento
        /// </summary>
        [DataMember(Name="dataPrevisaoMovimento", EmitDefaultValue=false)]
        public DateTime? DataPrevisaoMovimento { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentoEntrada {\n");
            sb.Append("  CodigoEstabelecimento: ").Append(CodigoEstabelecimento).Append("\n");
            sb.Append("  CodigoEmpresa: ").Append(CodigoEmpresa).Append("\n");
            sb.Append("  TipoDocumento: ").Append(TipoDocumento).Append("\n");
            sb.Append("  SerieDocumento: ").Append(SerieDocumento).Append("\n");
            sb.Append("  _DocumentoEntrada: ").Append(_DocumentoEntrada).Append("\n");
            sb.Append("  CodigoDocumento: ").Append(CodigoDocumento).Append("\n");
            sb.Append("  DocumentoRelacionado: ").Append(DocumentoRelacionado).Append("\n");
            sb.Append("  EstadoDocumento: ").Append(EstadoDocumento).Append("\n");
            sb.Append("  EmpresaEmitente: ").Append(EmpresaEmitente).Append("\n");
            sb.Append("  EmpresaDestino: ").Append(EmpresaDestino).Append("\n");
            sb.Append("  NaturezaOperacao: ").Append(NaturezaOperacao).Append("\n");
            sb.Append("  DataEmissao: ").Append(DataEmissao).Append("\n");
            sb.Append("  DataMovimento: ").Append(DataMovimento).Append("\n");
            sb.Append("  EspecieDocumento: ").Append(EspecieDocumento).Append("\n");
            sb.Append("  EspecieVolume: ").Append(EspecieVolume).Append("\n");
            sb.Append("  QuantidadeVolume: ").Append(QuantidadeVolume).Append("\n");
            sb.Append("  NumeroVolume: ").Append(NumeroVolume).Append("\n");
            sb.Append("  MarcaVolume: ").Append(MarcaVolume).Append("\n");
            sb.Append("  TipoFrete: ").Append(TipoFrete).Append("\n");
            sb.Append("  TipoConferencia: ").Append(TipoConferencia).Append("\n");
            sb.Append("  NfeChaveAcesso: ").Append(NfeChaveAcesso).Append("\n");
            sb.Append("  NfeProtocolo: ").Append(NfeProtocolo).Append("\n");
            sb.Append("  NfeDigestValue: ").Append(NfeDigestValue).Append("\n");
            sb.Append("  NfeDataRecebimento: ").Append(NfeDataRecebimento).Append("\n");
            sb.Append("  NfeAmbiente: ").Append(NfeAmbiente).Append("\n");
            sb.Append("  NfeTipoEmissao: ").Append(NfeTipoEmissao).Append("\n");
            sb.Append("  NfeTipoImpressao: ").Append(NfeTipoImpressao).Append("\n");
            sb.Append("  FinalidadeDocumento: ").Append(FinalidadeDocumento).Append("\n");
            sb.Append("  ValorTotalDocumento: ").Append(ValorTotalDocumento).Append("\n");
            sb.Append("  ValorIcms: ").Append(ValorIcms).Append("\n");
            sb.Append("  ValorIcmsSub: ").Append(ValorIcmsSub).Append("\n");
            sb.Append("  ValorIcmsUfDestino: ").Append(ValorIcmsUfDestino).Append("\n");
            sb.Append("  ValorIcmsUfOrigem: ").Append(ValorIcmsUfOrigem).Append("\n");
            sb.Append("  ValorTotalFecpSt: ").Append(ValorTotalFecpSt).Append("\n");
            sb.Append("  ValorTotalFecpRet: ").Append(ValorTotalFecpRet).Append("\n");
            sb.Append("  ValorIcmsFecpUfDestino: ").Append(ValorIcmsFecpUfDestino).Append("\n");
            sb.Append("  ValorTotalFecp: ").Append(ValorTotalFecp).Append("\n");
            sb.Append("  ValorIpi: ").Append(ValorIpi).Append("\n");
            sb.Append("  ValorFrete: ").Append(ValorFrete).Append("\n");
            sb.Append("  ValorSeguro: ").Append(ValorSeguro).Append("\n");
            sb.Append("  ValorServico: ").Append(ValorServico).Append("\n");
            sb.Append("  ValorDesconto: ").Append(ValorDesconto).Append("\n");
            sb.Append("  ValorDescontoItem: ").Append(ValorDescontoItem).Append("\n");
            sb.Append("  ValorAcrescimo: ").Append(ValorAcrescimo).Append("\n");
            sb.Append("  ValorAcrescimoItem: ").Append(ValorAcrescimoItem).Append("\n");
            sb.Append("  ValorTotalProduto: ").Append(ValorTotalProduto).Append("\n");
            sb.Append("  ValorBaseIcms: ").Append(ValorBaseIcms).Append("\n");
            sb.Append("  ValorBaseIcmsSub: ").Append(ValorBaseIcmsSub).Append("\n");
            sb.Append("  ValorBaseIpi: ").Append(ValorBaseIpi).Append("\n");
            sb.Append("  PesoBruto: ").Append(PesoBruto).Append("\n");
            sb.Append("  PesoLiquido: ").Append(PesoLiquido).Append("\n");
            sb.Append("  VolumeCubico: ").Append(VolumeCubico).Append("\n");
            sb.Append("  InformacaoAdicional1: ").Append(InformacaoAdicional1).Append("\n");
            sb.Append("  InformacaoAdicional2: ").Append(InformacaoAdicional2).Append("\n");
            sb.Append("  InformacaoAdicional3: ").Append(InformacaoAdicional3).Append("\n");
            sb.Append("  Cfop: ").Append(Cfop).Append("\n");
            sb.Append("  Usuario: ").Append(Usuario).Append("\n");
            sb.Append("  UsuarioGeracao: ").Append(UsuarioGeracao).Append("\n");
            sb.Append("  DataHistorico: ").Append(DataHistorico).Append("\n");
            sb.Append("  DataGeracao: ").Append(DataGeracao).Append("\n");
            sb.Append("  ConhecimentoTransporte: ").Append(ConhecimentoTransporte).Append("\n");
            sb.Append("  IdEnderecoEmpresa: ").Append(IdEnderecoEmpresa).Append("\n");
            sb.Append("  PlacaVeiculo: ").Append(PlacaVeiculo).Append("\n");
            sb.Append("  UfVeiculo: ").Append(UfVeiculo).Append("\n");
            sb.Append("  NomeMotorista: ").Append(NomeMotorista).Append("\n");
            sb.Append("  DocumentoMotorista: ").Append(DocumentoMotorista).Append("\n");
            sb.Append("  LoteEntrada: ").Append(LoteEntrada).Append("\n");
            sb.Append("  DocBloqueadoOficializacao: ").Append(DocBloqueadoOficializacao).Append("\n");
            sb.Append("  PossuiAvaria: ").Append(PossuiAvaria).Append("\n");
            sb.Append("  EstadoDocumentoArquivoUpload: ").Append(EstadoDocumentoArquivoUpload).Append("\n");
            sb.Append("  EstadoProcesso: ").Append(EstadoProcesso).Append("\n");
            sb.Append("  CodigoTabelaServico: ").Append(CodigoTabelaServico).Append("\n");
            sb.Append("  DocumentoOficialEntrada: ").Append(DocumentoOficialEntrada).Append("\n");
            sb.Append("  TabelaServico: ").Append(TabelaServico).Append("\n");
            sb.Append("  ObservacaoDocumento: ").Append(ObservacaoDocumento).Append("\n");
            sb.Append("  ValidarPrevisao: ").Append(ValidarPrevisao).Append("\n");
            sb.Append("  ValidarOficial: ").Append(ValidarOficial).Append("\n");
            sb.Append("  PermitirSerieExpedida: ").Append(PermitirSerieExpedida).Append("\n");
            sb.Append("  DataPrevisaoMovimento: ").Append(DataPrevisaoMovimento).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentoEntrada);
        }

        /// <summary>
        /// Returns true if DocumentoEntrada instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentoEntrada to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentoEntrada input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CodigoEstabelecimento == input.CodigoEstabelecimento ||
                    (this.CodigoEstabelecimento != null &&
                    this.CodigoEstabelecimento.Equals(input.CodigoEstabelecimento))
                ) && 
                (
                    this.CodigoEmpresa == input.CodigoEmpresa ||
                    (this.CodigoEmpresa != null &&
                    this.CodigoEmpresa.Equals(input.CodigoEmpresa))
                ) && 
                (
                    this.TipoDocumento == input.TipoDocumento ||
                    (this.TipoDocumento != null &&
                    this.TipoDocumento.Equals(input.TipoDocumento))
                ) && 
                (
                    this.SerieDocumento == input.SerieDocumento ||
                    (this.SerieDocumento != null &&
                    this.SerieDocumento.Equals(input.SerieDocumento))
                ) && 
                (
                    this._DocumentoEntrada == input._DocumentoEntrada ||
                    (this._DocumentoEntrada != null &&
                    this._DocumentoEntrada.Equals(input._DocumentoEntrada))
                ) && 
                (
                    this.CodigoDocumento == input.CodigoDocumento ||
                    (this.CodigoDocumento != null &&
                    this.CodigoDocumento.Equals(input.CodigoDocumento))
                ) && 
                (
                    this.DocumentoRelacionado == input.DocumentoRelacionado ||
                    (this.DocumentoRelacionado != null &&
                    this.DocumentoRelacionado.Equals(input.DocumentoRelacionado))
                ) && 
                (
                    this.EstadoDocumento == input.EstadoDocumento ||
                    (this.EstadoDocumento != null &&
                    this.EstadoDocumento.Equals(input.EstadoDocumento))
                ) && 
                (
                    this.EmpresaEmitente == input.EmpresaEmitente ||
                    (this.EmpresaEmitente != null &&
                    this.EmpresaEmitente.Equals(input.EmpresaEmitente))
                ) && 
                (
                    this.EmpresaDestino == input.EmpresaDestino ||
                    (this.EmpresaDestino != null &&
                    this.EmpresaDestino.Equals(input.EmpresaDestino))
                ) && 
                (
                    this.NaturezaOperacao == input.NaturezaOperacao ||
                    (this.NaturezaOperacao != null &&
                    this.NaturezaOperacao.Equals(input.NaturezaOperacao))
                ) && 
                (
                    this.DataEmissao == input.DataEmissao ||
                    (this.DataEmissao != null &&
                    this.DataEmissao.Equals(input.DataEmissao))
                ) && 
                (
                    this.DataMovimento == input.DataMovimento ||
                    (this.DataMovimento != null &&
                    this.DataMovimento.Equals(input.DataMovimento))
                ) && 
                (
                    this.EspecieDocumento == input.EspecieDocumento ||
                    (this.EspecieDocumento != null &&
                    this.EspecieDocumento.Equals(input.EspecieDocumento))
                ) && 
                (
                    this.EspecieVolume == input.EspecieVolume ||
                    (this.EspecieVolume != null &&
                    this.EspecieVolume.Equals(input.EspecieVolume))
                ) && 
                (
                    this.QuantidadeVolume == input.QuantidadeVolume ||
                    (this.QuantidadeVolume != null &&
                    this.QuantidadeVolume.Equals(input.QuantidadeVolume))
                ) && 
                (
                    this.NumeroVolume == input.NumeroVolume ||
                    (this.NumeroVolume != null &&
                    this.NumeroVolume.Equals(input.NumeroVolume))
                ) && 
                (
                    this.MarcaVolume == input.MarcaVolume ||
                    (this.MarcaVolume != null &&
                    this.MarcaVolume.Equals(input.MarcaVolume))
                ) && 
                (
                    this.TipoFrete == input.TipoFrete ||
                    (this.TipoFrete != null &&
                    this.TipoFrete.Equals(input.TipoFrete))
                ) && 
                (
                    this.TipoConferencia == input.TipoConferencia ||
                    (this.TipoConferencia != null &&
                    this.TipoConferencia.Equals(input.TipoConferencia))
                ) && 
                (
                    this.NfeChaveAcesso == input.NfeChaveAcesso ||
                    (this.NfeChaveAcesso != null &&
                    this.NfeChaveAcesso.Equals(input.NfeChaveAcesso))
                ) && 
                (
                    this.NfeProtocolo == input.NfeProtocolo ||
                    (this.NfeProtocolo != null &&
                    this.NfeProtocolo.Equals(input.NfeProtocolo))
                ) && 
                (
                    this.NfeDigestValue == input.NfeDigestValue ||
                    (this.NfeDigestValue != null &&
                    this.NfeDigestValue.Equals(input.NfeDigestValue))
                ) && 
                (
                    this.NfeDataRecebimento == input.NfeDataRecebimento ||
                    (this.NfeDataRecebimento != null &&
                    this.NfeDataRecebimento.Equals(input.NfeDataRecebimento))
                ) && 
                (
                    this.NfeAmbiente == input.NfeAmbiente ||
                    (this.NfeAmbiente != null &&
                    this.NfeAmbiente.Equals(input.NfeAmbiente))
                ) && 
                (
                    this.NfeTipoEmissao == input.NfeTipoEmissao ||
                    (this.NfeTipoEmissao != null &&
                    this.NfeTipoEmissao.Equals(input.NfeTipoEmissao))
                ) && 
                (
                    this.NfeTipoImpressao == input.NfeTipoImpressao ||
                    (this.NfeTipoImpressao != null &&
                    this.NfeTipoImpressao.Equals(input.NfeTipoImpressao))
                ) && 
                (
                    this.FinalidadeDocumento == input.FinalidadeDocumento ||
                    (this.FinalidadeDocumento != null &&
                    this.FinalidadeDocumento.Equals(input.FinalidadeDocumento))
                ) && 
                (
                    this.ValorTotalDocumento == input.ValorTotalDocumento ||
                    (this.ValorTotalDocumento != null &&
                    this.ValorTotalDocumento.Equals(input.ValorTotalDocumento))
                ) && 
                (
                    this.ValorIcms == input.ValorIcms ||
                    (this.ValorIcms != null &&
                    this.ValorIcms.Equals(input.ValorIcms))
                ) && 
                (
                    this.ValorIcmsSub == input.ValorIcmsSub ||
                    (this.ValorIcmsSub != null &&
                    this.ValorIcmsSub.Equals(input.ValorIcmsSub))
                ) && 
                (
                    this.ValorIcmsUfDestino == input.ValorIcmsUfDestino ||
                    (this.ValorIcmsUfDestino != null &&
                    this.ValorIcmsUfDestino.Equals(input.ValorIcmsUfDestino))
                ) && 
                (
                    this.ValorIcmsUfOrigem == input.ValorIcmsUfOrigem ||
                    (this.ValorIcmsUfOrigem != null &&
                    this.ValorIcmsUfOrigem.Equals(input.ValorIcmsUfOrigem))
                ) && 
                (
                    this.ValorTotalFecpSt == input.ValorTotalFecpSt ||
                    (this.ValorTotalFecpSt != null &&
                    this.ValorTotalFecpSt.Equals(input.ValorTotalFecpSt))
                ) && 
                (
                    this.ValorTotalFecpRet == input.ValorTotalFecpRet ||
                    (this.ValorTotalFecpRet != null &&
                    this.ValorTotalFecpRet.Equals(input.ValorTotalFecpRet))
                ) && 
                (
                    this.ValorIcmsFecpUfDestino == input.ValorIcmsFecpUfDestino ||
                    (this.ValorIcmsFecpUfDestino != null &&
                    this.ValorIcmsFecpUfDestino.Equals(input.ValorIcmsFecpUfDestino))
                ) && 
                (
                    this.ValorTotalFecp == input.ValorTotalFecp ||
                    (this.ValorTotalFecp != null &&
                    this.ValorTotalFecp.Equals(input.ValorTotalFecp))
                ) && 
                (
                    this.ValorIpi == input.ValorIpi ||
                    (this.ValorIpi != null &&
                    this.ValorIpi.Equals(input.ValorIpi))
                ) && 
                (
                    this.ValorFrete == input.ValorFrete ||
                    (this.ValorFrete != null &&
                    this.ValorFrete.Equals(input.ValorFrete))
                ) && 
                (
                    this.ValorSeguro == input.ValorSeguro ||
                    (this.ValorSeguro != null &&
                    this.ValorSeguro.Equals(input.ValorSeguro))
                ) && 
                (
                    this.ValorServico == input.ValorServico ||
                    (this.ValorServico != null &&
                    this.ValorServico.Equals(input.ValorServico))
                ) && 
                (
                    this.ValorDesconto == input.ValorDesconto ||
                    (this.ValorDesconto != null &&
                    this.ValorDesconto.Equals(input.ValorDesconto))
                ) && 
                (
                    this.ValorDescontoItem == input.ValorDescontoItem ||
                    (this.ValorDescontoItem != null &&
                    this.ValorDescontoItem.Equals(input.ValorDescontoItem))
                ) && 
                (
                    this.ValorAcrescimo == input.ValorAcrescimo ||
                    (this.ValorAcrescimo != null &&
                    this.ValorAcrescimo.Equals(input.ValorAcrescimo))
                ) && 
                (
                    this.ValorAcrescimoItem == input.ValorAcrescimoItem ||
                    (this.ValorAcrescimoItem != null &&
                    this.ValorAcrescimoItem.Equals(input.ValorAcrescimoItem))
                ) && 
                (
                    this.ValorTotalProduto == input.ValorTotalProduto ||
                    (this.ValorTotalProduto != null &&
                    this.ValorTotalProduto.Equals(input.ValorTotalProduto))
                ) && 
                (
                    this.ValorBaseIcms == input.ValorBaseIcms ||
                    (this.ValorBaseIcms != null &&
                    this.ValorBaseIcms.Equals(input.ValorBaseIcms))
                ) && 
                (
                    this.ValorBaseIcmsSub == input.ValorBaseIcmsSub ||
                    (this.ValorBaseIcmsSub != null &&
                    this.ValorBaseIcmsSub.Equals(input.ValorBaseIcmsSub))
                ) && 
                (
                    this.ValorBaseIpi == input.ValorBaseIpi ||
                    (this.ValorBaseIpi != null &&
                    this.ValorBaseIpi.Equals(input.ValorBaseIpi))
                ) && 
                (
                    this.PesoBruto == input.PesoBruto ||
                    (this.PesoBruto != null &&
                    this.PesoBruto.Equals(input.PesoBruto))
                ) && 
                (
                    this.PesoLiquido == input.PesoLiquido ||
                    (this.PesoLiquido != null &&
                    this.PesoLiquido.Equals(input.PesoLiquido))
                ) && 
                (
                    this.VolumeCubico == input.VolumeCubico ||
                    (this.VolumeCubico != null &&
                    this.VolumeCubico.Equals(input.VolumeCubico))
                ) && 
                (
                    this.InformacaoAdicional1 == input.InformacaoAdicional1 ||
                    (this.InformacaoAdicional1 != null &&
                    this.InformacaoAdicional1.Equals(input.InformacaoAdicional1))
                ) && 
                (
                    this.InformacaoAdicional2 == input.InformacaoAdicional2 ||
                    (this.InformacaoAdicional2 != null &&
                    this.InformacaoAdicional2.Equals(input.InformacaoAdicional2))
                ) && 
                (
                    this.InformacaoAdicional3 == input.InformacaoAdicional3 ||
                    (this.InformacaoAdicional3 != null &&
                    this.InformacaoAdicional3.Equals(input.InformacaoAdicional3))
                ) && 
                (
                    this.Cfop == input.Cfop ||
                    (this.Cfop != null &&
                    this.Cfop.Equals(input.Cfop))
                ) && 
                (
                    this.Usuario == input.Usuario ||
                    (this.Usuario != null &&
                    this.Usuario.Equals(input.Usuario))
                ) && 
                (
                    this.UsuarioGeracao == input.UsuarioGeracao ||
                    (this.UsuarioGeracao != null &&
                    this.UsuarioGeracao.Equals(input.UsuarioGeracao))
                ) && 
                (
                    this.DataHistorico == input.DataHistorico ||
                    (this.DataHistorico != null &&
                    this.DataHistorico.Equals(input.DataHistorico))
                ) && 
                (
                    this.DataGeracao == input.DataGeracao ||
                    (this.DataGeracao != null &&
                    this.DataGeracao.Equals(input.DataGeracao))
                ) && 
                (
                    this.ConhecimentoTransporte == input.ConhecimentoTransporte ||
                    (this.ConhecimentoTransporte != null &&
                    this.ConhecimentoTransporte.Equals(input.ConhecimentoTransporte))
                ) && 
                (
                    this.IdEnderecoEmpresa == input.IdEnderecoEmpresa ||
                    (this.IdEnderecoEmpresa != null &&
                    this.IdEnderecoEmpresa.Equals(input.IdEnderecoEmpresa))
                ) && 
                (
                    this.PlacaVeiculo == input.PlacaVeiculo ||
                    (this.PlacaVeiculo != null &&
                    this.PlacaVeiculo.Equals(input.PlacaVeiculo))
                ) && 
                (
                    this.UfVeiculo == input.UfVeiculo ||
                    (this.UfVeiculo != null &&
                    this.UfVeiculo.Equals(input.UfVeiculo))
                ) && 
                (
                    this.NomeMotorista == input.NomeMotorista ||
                    (this.NomeMotorista != null &&
                    this.NomeMotorista.Equals(input.NomeMotorista))
                ) && 
                (
                    this.DocumentoMotorista == input.DocumentoMotorista ||
                    (this.DocumentoMotorista != null &&
                    this.DocumentoMotorista.Equals(input.DocumentoMotorista))
                ) && 
                (
                    this.LoteEntrada == input.LoteEntrada ||
                    this.LoteEntrada != null &&
                    this.LoteEntrada.SequenceEqual(input.LoteEntrada)
                ) && 
                (
                    this.DocBloqueadoOficializacao == input.DocBloqueadoOficializacao ||
                    (this.DocBloqueadoOficializacao != null &&
                    this.DocBloqueadoOficializacao.Equals(input.DocBloqueadoOficializacao))
                ) && 
                (
                    this.PossuiAvaria == input.PossuiAvaria ||
                    (this.PossuiAvaria != null &&
                    this.PossuiAvaria.Equals(input.PossuiAvaria))
                ) && 
                (
                    this.EstadoDocumentoArquivoUpload == input.EstadoDocumentoArquivoUpload ||
                    (this.EstadoDocumentoArquivoUpload != null &&
                    this.EstadoDocumentoArquivoUpload.Equals(input.EstadoDocumentoArquivoUpload))
                ) && 
                (
                    this.EstadoProcesso == input.EstadoProcesso ||
                    (this.EstadoProcesso != null &&
                    this.EstadoProcesso.Equals(input.EstadoProcesso))
                ) && 
                (
                    this.CodigoTabelaServico == input.CodigoTabelaServico ||
                    (this.CodigoTabelaServico != null &&
                    this.CodigoTabelaServico.Equals(input.CodigoTabelaServico))
                ) && 
                (
                    this.DocumentoOficialEntrada == input.DocumentoOficialEntrada ||
                    (this.DocumentoOficialEntrada != null &&
                    this.DocumentoOficialEntrada.Equals(input.DocumentoOficialEntrada))
                ) && 
                (
                    this.TabelaServico == input.TabelaServico ||
                    (this.TabelaServico != null &&
                    this.TabelaServico.Equals(input.TabelaServico))
                ) && 
                (
                    this.ObservacaoDocumento == input.ObservacaoDocumento ||
                    (this.ObservacaoDocumento != null &&
                    this.ObservacaoDocumento.Equals(input.ObservacaoDocumento))
                ) && 
                (
                    this.ValidarPrevisao == input.ValidarPrevisao ||
                    (this.ValidarPrevisao != null &&
                    this.ValidarPrevisao.Equals(input.ValidarPrevisao))
                ) && 
                (
                    this.ValidarOficial == input.ValidarOficial ||
                    (this.ValidarOficial != null &&
                    this.ValidarOficial.Equals(input.ValidarOficial))
                ) && 
                (
                    this.PermitirSerieExpedida == input.PermitirSerieExpedida ||
                    (this.PermitirSerieExpedida != null &&
                    this.PermitirSerieExpedida.Equals(input.PermitirSerieExpedida))
                ) && 
                (
                    this.DataPrevisaoMovimento == input.DataPrevisaoMovimento ||
                    (this.DataPrevisaoMovimento != null &&
                    this.DataPrevisaoMovimento.Equals(input.DataPrevisaoMovimento))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodigoEstabelecimento != null)
                    hashCode = hashCode * 59 + this.CodigoEstabelecimento.GetHashCode();
                if (this.CodigoEmpresa != null)
                    hashCode = hashCode * 59 + this.CodigoEmpresa.GetHashCode();
                if (this.TipoDocumento != null)
                    hashCode = hashCode * 59 + this.TipoDocumento.GetHashCode();
                if (this.SerieDocumento != null)
                    hashCode = hashCode * 59 + this.SerieDocumento.GetHashCode();
                if (this._DocumentoEntrada != null)
                    hashCode = hashCode * 59 + this._DocumentoEntrada.GetHashCode();
                if (this.CodigoDocumento != null)
                    hashCode = hashCode * 59 + this.CodigoDocumento.GetHashCode();
                if (this.DocumentoRelacionado != null)
                    hashCode = hashCode * 59 + this.DocumentoRelacionado.GetHashCode();
                if (this.EstadoDocumento != null)
                    hashCode = hashCode * 59 + this.EstadoDocumento.GetHashCode();
                if (this.EmpresaEmitente != null)
                    hashCode = hashCode * 59 + this.EmpresaEmitente.GetHashCode();
                if (this.EmpresaDestino != null)
                    hashCode = hashCode * 59 + this.EmpresaDestino.GetHashCode();
                if (this.NaturezaOperacao != null)
                    hashCode = hashCode * 59 + this.NaturezaOperacao.GetHashCode();
                if (this.DataEmissao != null)
                    hashCode = hashCode * 59 + this.DataEmissao.GetHashCode();
                if (this.DataMovimento != null)
                    hashCode = hashCode * 59 + this.DataMovimento.GetHashCode();
                if (this.EspecieDocumento != null)
                    hashCode = hashCode * 59 + this.EspecieDocumento.GetHashCode();
                if (this.EspecieVolume != null)
                    hashCode = hashCode * 59 + this.EspecieVolume.GetHashCode();
                if (this.QuantidadeVolume != null)
                    hashCode = hashCode * 59 + this.QuantidadeVolume.GetHashCode();
                if (this.NumeroVolume != null)
                    hashCode = hashCode * 59 + this.NumeroVolume.GetHashCode();
                if (this.MarcaVolume != null)
                    hashCode = hashCode * 59 + this.MarcaVolume.GetHashCode();
                if (this.TipoFrete != null)
                    hashCode = hashCode * 59 + this.TipoFrete.GetHashCode();
                if (this.TipoConferencia != null)
                    hashCode = hashCode * 59 + this.TipoConferencia.GetHashCode();
                if (this.NfeChaveAcesso != null)
                    hashCode = hashCode * 59 + this.NfeChaveAcesso.GetHashCode();
                if (this.NfeProtocolo != null)
                    hashCode = hashCode * 59 + this.NfeProtocolo.GetHashCode();
                if (this.NfeDigestValue != null)
                    hashCode = hashCode * 59 + this.NfeDigestValue.GetHashCode();
                if (this.NfeDataRecebimento != null)
                    hashCode = hashCode * 59 + this.NfeDataRecebimento.GetHashCode();
                if (this.NfeAmbiente != null)
                    hashCode = hashCode * 59 + this.NfeAmbiente.GetHashCode();
                if (this.NfeTipoEmissao != null)
                    hashCode = hashCode * 59 + this.NfeTipoEmissao.GetHashCode();
                if (this.NfeTipoImpressao != null)
                    hashCode = hashCode * 59 + this.NfeTipoImpressao.GetHashCode();
                if (this.FinalidadeDocumento != null)
                    hashCode = hashCode * 59 + this.FinalidadeDocumento.GetHashCode();
                if (this.ValorTotalDocumento != null)
                    hashCode = hashCode * 59 + this.ValorTotalDocumento.GetHashCode();
                if (this.ValorIcms != null)
                    hashCode = hashCode * 59 + this.ValorIcms.GetHashCode();
                if (this.ValorIcmsSub != null)
                    hashCode = hashCode * 59 + this.ValorIcmsSub.GetHashCode();
                if (this.ValorIcmsUfDestino != null)
                    hashCode = hashCode * 59 + this.ValorIcmsUfDestino.GetHashCode();
                if (this.ValorIcmsUfOrigem != null)
                    hashCode = hashCode * 59 + this.ValorIcmsUfOrigem.GetHashCode();
                if (this.ValorTotalFecpSt != null)
                    hashCode = hashCode * 59 + this.ValorTotalFecpSt.GetHashCode();
                if (this.ValorTotalFecpRet != null)
                    hashCode = hashCode * 59 + this.ValorTotalFecpRet.GetHashCode();
                if (this.ValorIcmsFecpUfDestino != null)
                    hashCode = hashCode * 59 + this.ValorIcmsFecpUfDestino.GetHashCode();
                if (this.ValorTotalFecp != null)
                    hashCode = hashCode * 59 + this.ValorTotalFecp.GetHashCode();
                if (this.ValorIpi != null)
                    hashCode = hashCode * 59 + this.ValorIpi.GetHashCode();
                if (this.ValorFrete != null)
                    hashCode = hashCode * 59 + this.ValorFrete.GetHashCode();
                if (this.ValorSeguro != null)
                    hashCode = hashCode * 59 + this.ValorSeguro.GetHashCode();
                if (this.ValorServico != null)
                    hashCode = hashCode * 59 + this.ValorServico.GetHashCode();
                if (this.ValorDesconto != null)
                    hashCode = hashCode * 59 + this.ValorDesconto.GetHashCode();
                if (this.ValorDescontoItem != null)
                    hashCode = hashCode * 59 + this.ValorDescontoItem.GetHashCode();
                if (this.ValorAcrescimo != null)
                    hashCode = hashCode * 59 + this.ValorAcrescimo.GetHashCode();
                if (this.ValorAcrescimoItem != null)
                    hashCode = hashCode * 59 + this.ValorAcrescimoItem.GetHashCode();
                if (this.ValorTotalProduto != null)
                    hashCode = hashCode * 59 + this.ValorTotalProduto.GetHashCode();
                if (this.ValorBaseIcms != null)
                    hashCode = hashCode * 59 + this.ValorBaseIcms.GetHashCode();
                if (this.ValorBaseIcmsSub != null)
                    hashCode = hashCode * 59 + this.ValorBaseIcmsSub.GetHashCode();
                if (this.ValorBaseIpi != null)
                    hashCode = hashCode * 59 + this.ValorBaseIpi.GetHashCode();
                if (this.PesoBruto != null)
                    hashCode = hashCode * 59 + this.PesoBruto.GetHashCode();
                if (this.PesoLiquido != null)
                    hashCode = hashCode * 59 + this.PesoLiquido.GetHashCode();
                if (this.VolumeCubico != null)
                    hashCode = hashCode * 59 + this.VolumeCubico.GetHashCode();
                if (this.InformacaoAdicional1 != null)
                    hashCode = hashCode * 59 + this.InformacaoAdicional1.GetHashCode();
                if (this.InformacaoAdicional2 != null)
                    hashCode = hashCode * 59 + this.InformacaoAdicional2.GetHashCode();
                if (this.InformacaoAdicional3 != null)
                    hashCode = hashCode * 59 + this.InformacaoAdicional3.GetHashCode();
                if (this.Cfop != null)
                    hashCode = hashCode * 59 + this.Cfop.GetHashCode();
                if (this.Usuario != null)
                    hashCode = hashCode * 59 + this.Usuario.GetHashCode();
                if (this.UsuarioGeracao != null)
                    hashCode = hashCode * 59 + this.UsuarioGeracao.GetHashCode();
                if (this.DataHistorico != null)
                    hashCode = hashCode * 59 + this.DataHistorico.GetHashCode();
                if (this.DataGeracao != null)
                    hashCode = hashCode * 59 + this.DataGeracao.GetHashCode();
                if (this.ConhecimentoTransporte != null)
                    hashCode = hashCode * 59 + this.ConhecimentoTransporte.GetHashCode();
                if (this.IdEnderecoEmpresa != null)
                    hashCode = hashCode * 59 + this.IdEnderecoEmpresa.GetHashCode();
                if (this.PlacaVeiculo != null)
                    hashCode = hashCode * 59 + this.PlacaVeiculo.GetHashCode();
                if (this.UfVeiculo != null)
                    hashCode = hashCode * 59 + this.UfVeiculo.GetHashCode();
                if (this.NomeMotorista != null)
                    hashCode = hashCode * 59 + this.NomeMotorista.GetHashCode();
                if (this.DocumentoMotorista != null)
                    hashCode = hashCode * 59 + this.DocumentoMotorista.GetHashCode();
                if (this.LoteEntrada != null)
                    hashCode = hashCode * 59 + this.LoteEntrada.GetHashCode();
                if (this.DocBloqueadoOficializacao != null)
                    hashCode = hashCode * 59 + this.DocBloqueadoOficializacao.GetHashCode();
                if (this.PossuiAvaria != null)
                    hashCode = hashCode * 59 + this.PossuiAvaria.GetHashCode();
                if (this.EstadoDocumentoArquivoUpload != null)
                    hashCode = hashCode * 59 + this.EstadoDocumentoArquivoUpload.GetHashCode();
                if (this.EstadoProcesso != null)
                    hashCode = hashCode * 59 + this.EstadoProcesso.GetHashCode();
                if (this.CodigoTabelaServico != null)
                    hashCode = hashCode * 59 + this.CodigoTabelaServico.GetHashCode();
                if (this.DocumentoOficialEntrada != null)
                    hashCode = hashCode * 59 + this.DocumentoOficialEntrada.GetHashCode();
                if (this.TabelaServico != null)
                    hashCode = hashCode * 59 + this.TabelaServico.GetHashCode();
                if (this.ObservacaoDocumento != null)
                    hashCode = hashCode * 59 + this.ObservacaoDocumento.GetHashCode();
                if (this.ValidarPrevisao != null)
                    hashCode = hashCode * 59 + this.ValidarPrevisao.GetHashCode();
                if (this.ValidarOficial != null)
                    hashCode = hashCode * 59 + this.ValidarOficial.GetHashCode();
                if (this.PermitirSerieExpedida != null)
                    hashCode = hashCode * 59 + this.PermitirSerieExpedida.GetHashCode();
                if (this.DataPrevisaoMovimento != null)
                    hashCode = hashCode * 59 + this.DataPrevisaoMovimento.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
