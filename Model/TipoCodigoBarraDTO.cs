/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TipoCodigoBarraDTO
    /// </summary>
    [DataContract]
    public partial class TipoCodigoBarraDTO :  IEquatable<TipoCodigoBarraDTO>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TipoCodigoBarraDTO" /> class.
        /// </summary>
        /// <param name="tipoCodBarra">tipoCodBarra.</param>
        /// <param name="descTipoCodigoBarra">descTipoCodigoBarra.</param>
        /// <param name="usuario">usuario.</param>
        /// <param name="dataAtualizacao">dataAtualizacao.</param>
        public TipoCodigoBarraDTO(string tipoCodBarra = default(string), string descTipoCodigoBarra = default(string), string usuario = default(string), DateTime? dataAtualizacao = default(DateTime?))
        {
            this.TipoCodBarra = tipoCodBarra;
            this.DescTipoCodigoBarra = descTipoCodigoBarra;
            this.Usuario = usuario;
            this.DataAtualizacao = dataAtualizacao;
        }
        
        /// <summary>
        /// Gets or Sets TipoCodBarra
        /// </summary>
        [DataMember(Name="tipoCodBarra", EmitDefaultValue=false)]
        public string TipoCodBarra { get; set; }

        /// <summary>
        /// Gets or Sets DescTipoCodigoBarra
        /// </summary>
        [DataMember(Name="descTipoCodigoBarra", EmitDefaultValue=false)]
        public string DescTipoCodigoBarra { get; set; }

        /// <summary>
        /// Gets or Sets Usuario
        /// </summary>
        [DataMember(Name="usuario", EmitDefaultValue=false)]
        public string Usuario { get; set; }

        /// <summary>
        /// Gets or Sets DataAtualizacao
        /// </summary>
        [DataMember(Name="dataAtualizacao", EmitDefaultValue=false)]
        public DateTime? DataAtualizacao { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TipoCodigoBarraDTO {\n");
            sb.Append("  TipoCodBarra: ").Append(TipoCodBarra).Append("\n");
            sb.Append("  DescTipoCodigoBarra: ").Append(DescTipoCodigoBarra).Append("\n");
            sb.Append("  Usuario: ").Append(Usuario).Append("\n");
            sb.Append("  DataAtualizacao: ").Append(DataAtualizacao).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TipoCodigoBarraDTO);
        }

        /// <summary>
        /// Returns true if TipoCodigoBarraDTO instances are equal
        /// </summary>
        /// <param name="input">Instance of TipoCodigoBarraDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TipoCodigoBarraDTO input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TipoCodBarra == input.TipoCodBarra ||
                    (this.TipoCodBarra != null &&
                    this.TipoCodBarra.Equals(input.TipoCodBarra))
                ) && 
                (
                    this.DescTipoCodigoBarra == input.DescTipoCodigoBarra ||
                    (this.DescTipoCodigoBarra != null &&
                    this.DescTipoCodigoBarra.Equals(input.DescTipoCodigoBarra))
                ) && 
                (
                    this.Usuario == input.Usuario ||
                    (this.Usuario != null &&
                    this.Usuario.Equals(input.Usuario))
                ) && 
                (
                    this.DataAtualizacao == input.DataAtualizacao ||
                    (this.DataAtualizacao != null &&
                    this.DataAtualizacao.Equals(input.DataAtualizacao))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TipoCodBarra != null)
                    hashCode = hashCode * 59 + this.TipoCodBarra.GetHashCode();
                if (this.DescTipoCodigoBarra != null)
                    hashCode = hashCode * 59 + this.DescTipoCodigoBarra.GetHashCode();
                if (this.Usuario != null)
                    hashCode = hashCode * 59 + this.Usuario.GetHashCode();
                if (this.DataAtualizacao != null)
                    hashCode = hashCode * 59 + this.DataAtualizacao.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
