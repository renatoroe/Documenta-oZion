/* 
 * Zion WMS API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Estabelecimento
    /// </summary>
    [DataContract]
    public partial class Estabelecimento :  IEquatable<Estabelecimento>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Estabelecimento" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Estabelecimento() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Estabelecimento" /> class.
        /// </summary>
        /// <param name="codigoEstabelecimento">codigoEstabelecimento (required).</param>
        /// <param name="nomeEstabelecimento">nomeEstabelecimento.</param>
        /// <param name="cpfEstabelecimento">cpfEstabelecimento.</param>
        /// <param name="ufEstabelecimento">ufEstabelecimento.</param>
        /// <param name="nomeResumido">nomeResumido.</param>
        /// <param name="enderecoEstabelecimento">enderecoEstabelecimento.</param>
        /// <param name="numeroEndereco">numeroEndereco.</param>
        /// <param name="bairroEstabelecimento">bairroEstabelecimento.</param>
        /// <param name="fone1Estabelecimento">fone1Estabelecimento.</param>
        /// <param name="fone2Estabelecimento">fone2Estabelecimento.</param>
        public Estabelecimento(long? codigoEstabelecimento = default(long?), string nomeEstabelecimento = default(string), string cpfEstabelecimento = default(string), string ufEstabelecimento = default(string), string nomeResumido = default(string), string enderecoEstabelecimento = default(string), string numeroEndereco = default(string), string bairroEstabelecimento = default(string), string fone1Estabelecimento = default(string), string fone2Estabelecimento = default(string))
        {
            // to ensure "codigoEstabelecimento" is required (not null)
            if (codigoEstabelecimento == null)
            {
                throw new InvalidDataException("codigoEstabelecimento is a required property for Estabelecimento and cannot be null");
            }
            else
            {
                this.CodigoEstabelecimento = codigoEstabelecimento;
            }
            this.NomeEstabelecimento = nomeEstabelecimento;
            this.CpfEstabelecimento = cpfEstabelecimento;
            this.UfEstabelecimento = ufEstabelecimento;
            this.NomeResumido = nomeResumido;
            this.EnderecoEstabelecimento = enderecoEstabelecimento;
            this.NumeroEndereco = numeroEndereco;
            this.BairroEstabelecimento = bairroEstabelecimento;
            this.Fone1Estabelecimento = fone1Estabelecimento;
            this.Fone2Estabelecimento = fone2Estabelecimento;
        }
        
        /// <summary>
        /// Gets or Sets CodigoEstabelecimento
        /// </summary>
        [DataMember(Name="codigoEstabelecimento", EmitDefaultValue=false)]
        public long? CodigoEstabelecimento { get; set; }

        /// <summary>
        /// Gets or Sets NomeEstabelecimento
        /// </summary>
        [DataMember(Name="nomeEstabelecimento", EmitDefaultValue=false)]
        public string NomeEstabelecimento { get; set; }

        /// <summary>
        /// Gets or Sets CpfEstabelecimento
        /// </summary>
        [DataMember(Name="cpfEstabelecimento", EmitDefaultValue=false)]
        public string CpfEstabelecimento { get; set; }

        /// <summary>
        /// Gets or Sets UfEstabelecimento
        /// </summary>
        [DataMember(Name="ufEstabelecimento", EmitDefaultValue=false)]
        public string UfEstabelecimento { get; set; }

        /// <summary>
        /// Gets or Sets NomeResumido
        /// </summary>
        [DataMember(Name="nomeResumido", EmitDefaultValue=false)]
        public string NomeResumido { get; set; }

        /// <summary>
        /// Gets or Sets EnderecoEstabelecimento
        /// </summary>
        [DataMember(Name="enderecoEstabelecimento", EmitDefaultValue=false)]
        public string EnderecoEstabelecimento { get; set; }

        /// <summary>
        /// Gets or Sets NumeroEndereco
        /// </summary>
        [DataMember(Name="numeroEndereco", EmitDefaultValue=false)]
        public string NumeroEndereco { get; set; }

        /// <summary>
        /// Gets or Sets BairroEstabelecimento
        /// </summary>
        [DataMember(Name="bairroEstabelecimento", EmitDefaultValue=false)]
        public string BairroEstabelecimento { get; set; }

        /// <summary>
        /// Gets or Sets Fone1Estabelecimento
        /// </summary>
        [DataMember(Name="fone1Estabelecimento", EmitDefaultValue=false)]
        public string Fone1Estabelecimento { get; set; }

        /// <summary>
        /// Gets or Sets Fone2Estabelecimento
        /// </summary>
        [DataMember(Name="fone2Estabelecimento", EmitDefaultValue=false)]
        public string Fone2Estabelecimento { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Estabelecimento {\n");
            sb.Append("  CodigoEstabelecimento: ").Append(CodigoEstabelecimento).Append("\n");
            sb.Append("  NomeEstabelecimento: ").Append(NomeEstabelecimento).Append("\n");
            sb.Append("  CpfEstabelecimento: ").Append(CpfEstabelecimento).Append("\n");
            sb.Append("  UfEstabelecimento: ").Append(UfEstabelecimento).Append("\n");
            sb.Append("  NomeResumido: ").Append(NomeResumido).Append("\n");
            sb.Append("  EnderecoEstabelecimento: ").Append(EnderecoEstabelecimento).Append("\n");
            sb.Append("  NumeroEndereco: ").Append(NumeroEndereco).Append("\n");
            sb.Append("  BairroEstabelecimento: ").Append(BairroEstabelecimento).Append("\n");
            sb.Append("  Fone1Estabelecimento: ").Append(Fone1Estabelecimento).Append("\n");
            sb.Append("  Fone2Estabelecimento: ").Append(Fone2Estabelecimento).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Estabelecimento);
        }

        /// <summary>
        /// Returns true if Estabelecimento instances are equal
        /// </summary>
        /// <param name="input">Instance of Estabelecimento to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Estabelecimento input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CodigoEstabelecimento == input.CodigoEstabelecimento ||
                    (this.CodigoEstabelecimento != null &&
                    this.CodigoEstabelecimento.Equals(input.CodigoEstabelecimento))
                ) && 
                (
                    this.NomeEstabelecimento == input.NomeEstabelecimento ||
                    (this.NomeEstabelecimento != null &&
                    this.NomeEstabelecimento.Equals(input.NomeEstabelecimento))
                ) && 
                (
                    this.CpfEstabelecimento == input.CpfEstabelecimento ||
                    (this.CpfEstabelecimento != null &&
                    this.CpfEstabelecimento.Equals(input.CpfEstabelecimento))
                ) && 
                (
                    this.UfEstabelecimento == input.UfEstabelecimento ||
                    (this.UfEstabelecimento != null &&
                    this.UfEstabelecimento.Equals(input.UfEstabelecimento))
                ) && 
                (
                    this.NomeResumido == input.NomeResumido ||
                    (this.NomeResumido != null &&
                    this.NomeResumido.Equals(input.NomeResumido))
                ) && 
                (
                    this.EnderecoEstabelecimento == input.EnderecoEstabelecimento ||
                    (this.EnderecoEstabelecimento != null &&
                    this.EnderecoEstabelecimento.Equals(input.EnderecoEstabelecimento))
                ) && 
                (
                    this.NumeroEndereco == input.NumeroEndereco ||
                    (this.NumeroEndereco != null &&
                    this.NumeroEndereco.Equals(input.NumeroEndereco))
                ) && 
                (
                    this.BairroEstabelecimento == input.BairroEstabelecimento ||
                    (this.BairroEstabelecimento != null &&
                    this.BairroEstabelecimento.Equals(input.BairroEstabelecimento))
                ) && 
                (
                    this.Fone1Estabelecimento == input.Fone1Estabelecimento ||
                    (this.Fone1Estabelecimento != null &&
                    this.Fone1Estabelecimento.Equals(input.Fone1Estabelecimento))
                ) && 
                (
                    this.Fone2Estabelecimento == input.Fone2Estabelecimento ||
                    (this.Fone2Estabelecimento != null &&
                    this.Fone2Estabelecimento.Equals(input.Fone2Estabelecimento))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodigoEstabelecimento != null)
                    hashCode = hashCode * 59 + this.CodigoEstabelecimento.GetHashCode();
                if (this.NomeEstabelecimento != null)
                    hashCode = hashCode * 59 + this.NomeEstabelecimento.GetHashCode();
                if (this.CpfEstabelecimento != null)
                    hashCode = hashCode * 59 + this.CpfEstabelecimento.GetHashCode();
                if (this.UfEstabelecimento != null)
                    hashCode = hashCode * 59 + this.UfEstabelecimento.GetHashCode();
                if (this.NomeResumido != null)
                    hashCode = hashCode * 59 + this.NomeResumido.GetHashCode();
                if (this.EnderecoEstabelecimento != null)
                    hashCode = hashCode * 59 + this.EnderecoEstabelecimento.GetHashCode();
                if (this.NumeroEndereco != null)
                    hashCode = hashCode * 59 + this.NumeroEndereco.GetHashCode();
                if (this.BairroEstabelecimento != null)
                    hashCode = hashCode * 59 + this.BairroEstabelecimento.GetHashCode();
                if (this.Fone1Estabelecimento != null)
                    hashCode = hashCode * 59 + this.Fone1Estabelecimento.GetHashCode();
                if (this.Fone2Estabelecimento != null)
                    hashCode = hashCode * 59 + this.Fone2Estabelecimento.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NomeEstabelecimento (string) maxLength
            if(this.NomeEstabelecimento != null && this.NomeEstabelecimento.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NomeEstabelecimento, length must be less than 40.", new [] { "NomeEstabelecimento" });
            }

            // NomeEstabelecimento (string) minLength
            if(this.NomeEstabelecimento != null && this.NomeEstabelecimento.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NomeEstabelecimento, length must be greater than 1.", new [] { "NomeEstabelecimento" });
            }

            // CpfEstabelecimento (string) maxLength
            if(this.CpfEstabelecimento != null && this.CpfEstabelecimento.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CpfEstabelecimento, length must be less than 20.", new [] { "CpfEstabelecimento" });
            }

            // CpfEstabelecimento (string) minLength
            if(this.CpfEstabelecimento != null && this.CpfEstabelecimento.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CpfEstabelecimento, length must be greater than 1.", new [] { "CpfEstabelecimento" });
            }

            // EnderecoEstabelecimento (string) maxLength
            if(this.EnderecoEstabelecimento != null && this.EnderecoEstabelecimento.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EnderecoEstabelecimento, length must be less than 40.", new [] { "EnderecoEstabelecimento" });
            }

            // EnderecoEstabelecimento (string) minLength
            if(this.EnderecoEstabelecimento != null && this.EnderecoEstabelecimento.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EnderecoEstabelecimento, length must be greater than 0.", new [] { "EnderecoEstabelecimento" });
            }

            // NumeroEndereco (string) maxLength
            if(this.NumeroEndereco != null && this.NumeroEndereco.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumeroEndereco, length must be less than 20.", new [] { "NumeroEndereco" });
            }

            // NumeroEndereco (string) minLength
            if(this.NumeroEndereco != null && this.NumeroEndereco.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumeroEndereco, length must be greater than 0.", new [] { "NumeroEndereco" });
            }

            // BairroEstabelecimento (string) maxLength
            if(this.BairroEstabelecimento != null && this.BairroEstabelecimento.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BairroEstabelecimento, length must be less than 25.", new [] { "BairroEstabelecimento" });
            }

            // BairroEstabelecimento (string) minLength
            if(this.BairroEstabelecimento != null && this.BairroEstabelecimento.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BairroEstabelecimento, length must be greater than 0.", new [] { "BairroEstabelecimento" });
            }

            // Fone1Estabelecimento (string) maxLength
            if(this.Fone1Estabelecimento != null && this.Fone1Estabelecimento.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Fone1Estabelecimento, length must be less than 15.", new [] { "Fone1Estabelecimento" });
            }

            // Fone1Estabelecimento (string) minLength
            if(this.Fone1Estabelecimento != null && this.Fone1Estabelecimento.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Fone1Estabelecimento, length must be greater than 0.", new [] { "Fone1Estabelecimento" });
            }

            // Fone2Estabelecimento (string) maxLength
            if(this.Fone2Estabelecimento != null && this.Fone2Estabelecimento.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Fone2Estabelecimento, length must be less than 15.", new [] { "Fone2Estabelecimento" });
            }

            // Fone2Estabelecimento (string) minLength
            if(this.Fone2Estabelecimento != null && this.Fone2Estabelecimento.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Fone2Estabelecimento, length must be greater than 0.", new [] { "Fone2Estabelecimento" });
            }

            yield break;
        }
    }

}
